WPM.loadApp({"name":"wpm","context":"page","js":[{"name":"jquery","src":""},{"name":"jquery","src":""},{"name":"jquery-ui-1","src":"LyohIGpRdWVyeSBVSSAtIHYxLjkuMiAtIDIwMTItMTItMDgKKiBodHRwOi8vanF1ZXJ5dWkuY29tCiogSW5jbHVkZXM6IGpxdWVyeS51aS5jb3JlLmpzLCBqcXVlcnkudWkud2lkZ2V0LmpzLCBqcXVlcnkudWkubW91c2UuanMsIGpxdWVyeS51aS5wb3NpdGlvbi5qcywganF1ZXJ5LnVpLmRyYWdnYWJsZS5qcywganF1ZXJ5LnVpLmRyb3BwYWJsZS5qcywganF1ZXJ5LnVpLnJlc2l6YWJsZS5qcywganF1ZXJ5LnVpLnNlbGVjdGFibGUuanMsIGpxdWVyeS51aS5zb3J0YWJsZS5qcywganF1ZXJ5LnVpLmFjY29yZGlvbi5qcywganF1ZXJ5LnVpLmF1dG9jb21wbGV0ZS5qcywganF1ZXJ5LnVpLmJ1dHRvbi5qcywganF1ZXJ5LnVpLmRhdGVwaWNrZXIuanMsIGpxdWVyeS51aS5kaWFsb2cuanMsIGpxdWVyeS51aS5tZW51LmpzLCBqcXVlcnkudWkucHJvZ3Jlc3NiYXIuanMsIGpxdWVyeS51aS5zbGlkZXIuanMsIGpxdWVyeS51aS5zcGlubmVyLmpzLCBqcXVlcnkudWkudGFicy5qcywganF1ZXJ5LnVpLnRvb2x0aXAuanMsIGpxdWVyeS51aS5lZmZlY3QuanMsIGpxdWVyeS51aS5lZmZlY3QtYmxpbmQuanMsIGpxdWVyeS51aS5lZmZlY3QtYm91bmNlLmpzLCBqcXVlcnkudWkuZWZmZWN0LWNsaXAuanMsIGpxdWVyeS51aS5lZmZlY3QtZHJvcC5qcywganF1ZXJ5LnVpLmVmZmVjdC1leHBsb2RlLmpzLCBqcXVlcnkudWkuZWZmZWN0LWZhZGUuanMsIGpxdWVyeS51aS5lZmZlY3QtZm9sZC5qcywganF1ZXJ5LnVpLmVmZmVjdC1oaWdobGlnaHQuanMsIGpxdWVyeS51aS5lZmZlY3QtcHVsc2F0ZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zY2FsZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zaGFrZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1zbGlkZS5qcywganF1ZXJ5LnVpLmVmZmVjdC10cmFuc2Zlci5qcwoqIENvcHlyaWdodCAoYykgMjAxMiBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIExpY2Vuc2VkIE1JVCAqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgdXVpZCA9IDAsCglydW5pcXVlSWQgPSAvXnVpLWlkLVxkKyQvOwoKLy8gcHJldmVudCBkdXBsaWNhdGUgbG9hZGluZwovLyB0aGlzIGlzIG9ubHkgYSBwcm9ibGVtIGJlY2F1c2Ugd2UgcHJveHkgZXhpc3RpbmcgZnVuY3Rpb25zCi8vIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRvdWJsZSBwcm94eSB0aGVtCiQudWkgPSAkLnVpIHx8IHt9OwppZiAoICQudWkudmVyc2lvbiApIHsKCXJldHVybjsKfQoKJC5leHRlbmQoICQudWksIHsKCXZlcnNpb246ICIxLjkuMiIsCgoJa2V5Q29kZTogewoJCUJBQ0tTUEFDRTogOCwKCQlDT01NQTogMTg4LAoJCURFTEVURTogNDYsCgkJRE9XTjogNDAsCgkJRU5EOiAzNSwKCQlFTlRFUjogMTMsCgkJRVNDQVBFOiAyNywKCQlIT01FOiAzNiwKCQlMRUZUOiAzNywKCQlOVU1QQURfQUREOiAxMDcsCgkJTlVNUEFEX0RFQ0lNQUw6IDExMCwKCQlOVU1QQURfRElWSURFOiAxMTEsCgkJTlVNUEFEX0VOVEVSOiAxMDgsCgkJTlVNUEFEX01VTFRJUExZOiAxMDYsCgkJTlVNUEFEX1NVQlRSQUNUOiAxMDksCgkJUEFHRV9ET1dOOiAzNCwKCQlQQUdFX1VQOiAzMywKCQlQRVJJT0Q6IDE5MCwKCQlSSUdIVDogMzksCgkJU1BBQ0U6IDMyLAoJCVRBQjogOSwKCQlVUDogMzgKCX0KfSk7CgovLyBwbHVnaW5zCiQuZm4uZXh0ZW5kKHsKCV9mb2N1czogJC5mbi5mb2N1cywKCWZvY3VzOiBmdW5jdGlvbiggZGVsYXksIGZuICkgewoJCXJldHVybiB0eXBlb2YgZGVsYXkgPT09ICJudW1iZXIiID8KCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGVsZW0gPSB0aGlzOwoJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkkKCBlbGVtICkuZm9jdXMoKTsKCQkJCQlpZiAoIGZuICkgewoJCQkJCQlmbi5jYWxsKCBlbGVtICk7CgkJCQkJfQoJCQkJfSwgZGVsYXkgKTsKCQkJfSkgOgoJCQl0aGlzLl9mb2N1cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7Cgl9LAoKCXNjcm9sbFBhcmVudDogZnVuY3Rpb24oKSB7CgkJdmFyIHNjcm9sbFBhcmVudDsKCQlpZiAoKCQudWkuaWUgJiYgKC8oc3RhdGljfHJlbGF0aXZlKS8pLnRlc3QodGhpcy5jc3MoJ3Bvc2l0aW9uJykpKSB8fCAoL2Fic29sdXRlLykudGVzdCh0aGlzLmNzcygncG9zaXRpb24nKSkpIHsKCQkJc2Nyb2xsUGFyZW50ID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICgvKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8pLnRlc3QoJC5jc3ModGhpcywncG9zaXRpb24nKSkgJiYgKC8oYXV0b3xzY3JvbGwpLykudGVzdCgkLmNzcyh0aGlzLCdvdmVyZmxvdycpKyQuY3NzKHRoaXMsJ292ZXJmbG93LXknKSskLmNzcyh0aGlzLCdvdmVyZmxvdy14JykpOwoJCQl9KS5lcSgwKTsKCQl9IGVsc2UgewoJCQlzY3JvbGxQYXJlbnQgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gKC8oYXV0b3xzY3JvbGwpLykudGVzdCgkLmNzcyh0aGlzLCdvdmVyZmxvdycpKyQuY3NzKHRoaXMsJ292ZXJmbG93LXknKSskLmNzcyh0aGlzLCdvdmVyZmxvdy14JykpOwoJCQl9KS5lcSgwKTsKCQl9CgoJCXJldHVybiAoL2ZpeGVkLykudGVzdCh0aGlzLmNzcygncG9zaXRpb24nKSkgfHwgIXNjcm9sbFBhcmVudC5sZW5ndGggPyAkKGRvY3VtZW50KSA6IHNjcm9sbFBhcmVudDsKCX0sCgoJekluZGV4OiBmdW5jdGlvbiggekluZGV4ICkgewoJCWlmICggekluZGV4ICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzLmNzcyggInpJbmRleCIsIHpJbmRleCApOwoJCX0KCgkJaWYgKCB0aGlzLmxlbmd0aCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzWyAwIF0gKSwgcG9zaXRpb24sIHZhbHVlOwoJCQl3aGlsZSAoIGVsZW0ubGVuZ3RoICYmIGVsZW1bIDAgXSAhPT0gZG9jdW1lbnQgKSB7CgkJCQkvLyBJZ25vcmUgei1pbmRleCBpZiBwb3NpdGlvbiBpcyBzZXQgdG8gYSB2YWx1ZSB3aGVyZSB6LWluZGV4IGlzIGlnbm9yZWQgYnkgdGhlIGJyb3dzZXIKCQkJCS8vIFRoaXMgbWFrZXMgYmVoYXZpb3Igb2YgdGhpcyBmdW5jdGlvbiBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycwoJCQkJLy8gV2ViS2l0IGFsd2F5cyByZXR1cm5zIGF1dG8gaWYgdGhlIGVsZW1lbnQgaXMgcG9zaXRpb25lZAoJCQkJcG9zaXRpb24gPSBlbGVtLmNzcyggInBvc2l0aW9uIiApOwoJCQkJaWYgKCBwb3NpdGlvbiA9PT0gImFic29sdXRlIiB8fCBwb3NpdGlvbiA9PT0gInJlbGF0aXZlIiB8fCBwb3NpdGlvbiA9PT0gImZpeGVkIiApIHsKCQkJCQkvLyBJRSByZXR1cm5zIDAgd2hlbiB6SW5kZXggaXMgbm90IHNwZWNpZmllZAoJCQkJCS8vIG90aGVyIGJyb3dzZXJzIHJldHVybiBhIHN0cmluZwoJCQkJCS8vIHdlIGlnbm9yZSB0aGUgY2FzZSBvZiBuZXN0ZWQgZWxlbWVudHMgd2l0aCBhbiBleHBsaWNpdCB2YWx1ZSBvZiAwCgkJCQkJLy8gPGRpdiBzdHlsZT0iei1pbmRleDogLTEwOyI+PGRpdiBzdHlsZT0iei1pbmRleDogMDsiPjwvZGl2PjwvZGl2PgoJCQkJCXZhbHVlID0gcGFyc2VJbnQoIGVsZW0uY3NzKCAiekluZGV4IiApLCAxMCApOwoJCQkJCWlmICggIWlzTmFOKCB2YWx1ZSApICYmIHZhbHVlICE9PSAwICkgewoJCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQkJfQoJCQkJfQoJCQkJZWxlbSA9IGVsZW0ucGFyZW50KCk7CgkJCX0KCQl9CgoJCXJldHVybiAwOwoJfSwKCgl1bmlxdWVJZDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJaWYgKCAhdGhpcy5pZCApIHsKCQkJCXRoaXMuaWQgPSAidWktaWQtIiArICgrK3V1aWQpOwoJCQl9CgkJfSk7Cgl9LAoKCXJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoIHJ1bmlxdWVJZC50ZXN0KCB0aGlzLmlkICkgKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlQXR0ciggImlkIiApOwoJCQl9CgkJfSk7Cgl9Cn0pOwoKLy8gc2VsZWN0b3JzCmZ1bmN0aW9uIGZvY3VzYWJsZSggZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTiApIHsKCXZhciBtYXAsIG1hcE5hbWUsIGltZywKCQlub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCWlmICggImFyZWEiID09PSBub2RlTmFtZSApIHsKCQltYXAgPSBlbGVtZW50LnBhcmVudE5vZGU7CgkJbWFwTmFtZSA9IG1hcC5uYW1lOwoJCWlmICggIWVsZW1lbnQuaHJlZiB8fCAhbWFwTmFtZSB8fCBtYXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm1hcCIgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaW1nID0gJCggImltZ1t1c2VtYXA9IyIgKyBtYXBOYW1lICsgIl0iIClbMF07CgkJcmV0dXJuICEhaW1nICYmIHZpc2libGUoIGltZyApOwoJfQoJcmV0dXJuICggL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KCBub2RlTmFtZSApID8KCQkhZWxlbWVudC5kaXNhYmxlZCA6CgkJImEiID09PSBub2RlTmFtZSA/CgkJCWVsZW1lbnQuaHJlZiB8fCBpc1RhYkluZGV4Tm90TmFOIDoKCQkJaXNUYWJJbmRleE5vdE5hTikgJiYKCQkvLyB0aGUgZWxlbWVudCBhbmQgYWxsIG9mIGl0cyBhbmNlc3RvcnMgbXVzdCBiZSB2aXNpYmxlCgkJdmlzaWJsZSggZWxlbWVudCApOwp9CgpmdW5jdGlvbiB2aXNpYmxlKCBlbGVtZW50ICkgewoJcmV0dXJuICQuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW1lbnQgKSAmJgoJCSEkKCBlbGVtZW50ICkucGFyZW50cygpLmFuZFNlbGYoKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkLmNzcyggdGhpcywgInZpc2liaWxpdHkiICkgPT09ICJoaWRkZW4iOwoJCX0pLmxlbmd0aDsKfQoKJC5leHRlbmQoICQuZXhwclsgIjoiIF0sIHsKCWRhdGE6ICQuZXhwci5jcmVhdGVQc2V1ZG8gPwoJCSQuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24oIGRhdGFOYW1lICkgewoJCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQlyZXR1cm4gISEkLmRhdGEoIGVsZW0sIGRhdGFOYW1lICk7CgkJCX07CgkJfSkgOgoJCS8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44CgkJZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gISEkLmRhdGEoIGVsZW0sIG1hdGNoWyAzIF0gKTsKCQl9LAoKCWZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJcmV0dXJuIGZvY3VzYWJsZSggZWxlbWVudCwgIWlzTmFOKCAkLmF0dHIoIGVsZW1lbnQsICJ0YWJpbmRleCIgKSApICk7Cgl9LAoKCXRhYmJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgdGFiSW5kZXggPSAkLmF0dHIoIGVsZW1lbnQsICJ0YWJpbmRleCIgKSwKCQkJaXNUYWJJbmRleE5hTiA9IGlzTmFOKCB0YWJJbmRleCApOwoJCXJldHVybiAoIGlzVGFiSW5kZXhOYU4gfHwgdGFiSW5kZXggPj0gMCApICYmIGZvY3VzYWJsZSggZWxlbWVudCwgIWlzVGFiSW5kZXhOYU4gKTsKCX0KfSk7CgovLyBzdXBwb3J0CiQoZnVuY3Rpb24oKSB7Cgl2YXIgYm9keSA9IGRvY3VtZW50LmJvZHksCgkJZGl2ID0gYm9keS5hcHBlbmRDaGlsZCggZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSApOwoKCS8vIGFjY2VzcyBvZmZzZXRIZWlnaHQgYmVmb3JlIHNldHRpbmcgdGhlIHN0eWxlIHRvIHByZXZlbnQgYSBsYXlvdXQgYnVnCgkvLyBpbiBJRSA5IHdoaWNoIGNhdXNlcyB0aGUgZWxlbWVudCB0byBjb250aW51ZSB0byB0YWtlIHVwIHNwYWNlIGV2ZW4KCS8vIGFmdGVyIGl0IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NICgjODAyNikKCWRpdi5vZmZzZXRIZWlnaHQ7CgoJJC5leHRlbmQoIGRpdi5zdHlsZSwgewoJCW1pbkhlaWdodDogIjEwMHB4IiwKCQloZWlnaHQ6ICJhdXRvIiwKCQlwYWRkaW5nOiAwLAoJCWJvcmRlcldpZHRoOiAwCgl9KTsKCgkkLnN1cHBvcnQubWluSGVpZ2h0ID0gZGl2Lm9mZnNldEhlaWdodCA9PT0gMTAwOwoJJC5zdXBwb3J0LnNlbGVjdHN0YXJ0ID0gIm9uc2VsZWN0c3RhcnQiIGluIGRpdjsKCgkvLyBzZXQgZGlzcGxheSB0byBub25lIHRvIGF2b2lkIGEgbGF5b3V0IGJ1ZyBpbiBJRQoJLy8gaHR0cDovL2Rldi5qcXVlcnkuY29tL3RpY2tldC80MDE0Cglib2R5LnJlbW92ZUNoaWxkKCBkaXYgKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwp9KTsKCi8vIHN1cHBvcnQ6IGpRdWVyeSA8MS44CmlmICggISQoICI8YT4iICkub3V0ZXJXaWR0aCggMSApLmpxdWVyeSApIHsKCSQuZWFjaCggWyAiV2lkdGgiLCAiSGVpZ2h0IiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCQl2YXIgc2lkZSA9IG5hbWUgPT09ICJXaWR0aCIgPyBbICJMZWZ0IiwgIlJpZ2h0IiBdIDogWyAiVG9wIiwgIkJvdHRvbSIgXSwKCQkJdHlwZSA9IG5hbWUudG9Mb3dlckNhc2UoKSwKCQkJb3JpZyA9IHsKCQkJCWlubmVyV2lkdGg6ICQuZm4uaW5uZXJXaWR0aCwKCQkJCWlubmVySGVpZ2h0OiAkLmZuLmlubmVySGVpZ2h0LAoJCQkJb3V0ZXJXaWR0aDogJC5mbi5vdXRlcldpZHRoLAoJCQkJb3V0ZXJIZWlnaHQ6ICQuZm4ub3V0ZXJIZWlnaHQKCQkJfTsKCgkJZnVuY3Rpb24gcmVkdWNlKCBlbGVtLCBzaXplLCBib3JkZXIsIG1hcmdpbiApIHsKCQkJJC5lYWNoKCBzaWRlLCBmdW5jdGlvbigpIHsKCQkJCXNpemUgLT0gcGFyc2VGbG9hdCggJC5jc3MoIGVsZW0sICJwYWRkaW5nIiArIHRoaXMgKSApIHx8IDA7CgkJCQlpZiAoIGJvcmRlciApIHsKCQkJCQlzaXplIC09IHBhcnNlRmxvYXQoICQuY3NzKCBlbGVtLCAiYm9yZGVyIiArIHRoaXMgKyAiV2lkdGgiICkgKSB8fCAwOwoJCQkJfQoJCQkJaWYgKCBtYXJnaW4gKSB7CgkJCQkJc2l6ZSAtPSBwYXJzZUZsb2F0KCAkLmNzcyggZWxlbSwgIm1hcmdpbiIgKyB0aGlzICkgKSB8fCAwOwoJCQkJfQoJCQl9KTsKCQkJcmV0dXJuIHNpemU7CgkJfQoKCQkkLmZuWyAiaW5uZXIiICsgbmFtZSBdID0gZnVuY3Rpb24oIHNpemUgKSB7CgkJCWlmICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIG9yaWdbICJpbm5lciIgKyBuYW1lIF0uY2FsbCggdGhpcyApOwoJCQl9CgoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcyApLmNzcyggdHlwZSwgcmVkdWNlKCB0aGlzLCBzaXplICkgKyAicHgiICk7CgkJCX0pOwoJCX07CgoJCSQuZm5bICJvdXRlciIgKyBuYW1lXSA9IGZ1bmN0aW9uKCBzaXplLCBtYXJnaW4gKSB7CgkJCWlmICggdHlwZW9mIHNpemUgIT09ICJudW1iZXIiICkgewoJCQkJcmV0dXJuIG9yaWdbICJvdXRlciIgKyBuYW1lIF0uY2FsbCggdGhpcywgc2l6ZSApOwoJCQl9CgoJCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJJCggdGhpcykuY3NzKCB0eXBlLCByZWR1Y2UoIHRoaXMsIHNpemUsIHRydWUsIG1hcmdpbiApICsgInB4IiApOwoJCQl9KTsKCQl9OwoJfSk7Cn0KCi8vIHN1cHBvcnQ6IGpRdWVyeSAxLjYuMSwgMS42LjIgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk0MTMpCmlmICggJCggIjxhPiIgKS5kYXRhKCAiYS1iIiwgImEiICkucmVtb3ZlRGF0YSggImEtYiIgKS5kYXRhKCAiYS1iIiApICkgewoJJC5mbi5yZW1vdmVEYXRhID0gKGZ1bmN0aW9uKCByZW1vdmVEYXRhICkgewoJCXJldHVybiBmdW5jdGlvbigga2V5ICkgewoJCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCQlyZXR1cm4gcmVtb3ZlRGF0YS5jYWxsKCB0aGlzLCAkLmNhbWVsQ2FzZSgga2V5ICkgKTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiByZW1vdmVEYXRhLmNhbGwoIHRoaXMgKTsKCQkJfQoJCX07Cgl9KSggJC5mbi5yZW1vdmVEYXRhICk7Cn0KCgoKCgovLyBkZXByZWNhdGVkCgooZnVuY3Rpb24oKSB7Cgl2YXIgdWFNYXRjaCA9IC9tc2llIChbXHcuXSspLy5leGVjKCBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkgKSB8fCBbXTsKCSQudWkuaWUgPSB1YU1hdGNoLmxlbmd0aCA/IHRydWUgOiBmYWxzZTsKCSQudWkuaWU2ID0gcGFyc2VGbG9hdCggdWFNYXRjaFsgMSBdLCAxMCApID09PSA2Owp9KSgpOwoKJC5mbi5leHRlbmQoewoJZGlzYWJsZVNlbGVjdGlvbjogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuYmluZCggKCAkLnN1cHBvcnQuc2VsZWN0c3RhcnQgPyAic2VsZWN0c3RhcnQiIDogIm1vdXNlZG93biIgKSArCgkJCSIudWktZGlzYWJsZVNlbGVjdGlvbiIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0pOwoJfSwKCgllbmFibGVTZWxlY3Rpb246IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnVuYmluZCggIi51aS1kaXNhYmxlU2VsZWN0aW9uIiApOwoJfQp9KTsKCiQuZXh0ZW5kKCAkLnVpLCB7CgkvLyAkLnVpLnBsdWdpbiBpcyBkZXByZWNhdGVkLiAgVXNlIHRoZSBwcm94eSBwYXR0ZXJuIGluc3RlYWQuCglwbHVnaW46IHsKCQlhZGQ6IGZ1bmN0aW9uKCBtb2R1bGUsIG9wdGlvbiwgc2V0ICkgewoJCQl2YXIgaSwKCQkJCXByb3RvID0gJC51aVsgbW9kdWxlIF0ucHJvdG90eXBlOwoJCQlmb3IgKCBpIGluIHNldCApIHsKCQkJCXByb3RvLnBsdWdpbnNbIGkgXSA9IHByb3RvLnBsdWdpbnNbIGkgXSB8fCBbXTsKCQkJCXByb3RvLnBsdWdpbnNbIGkgXS5wdXNoKCBbIG9wdGlvbiwgc2V0WyBpIF0gXSApOwoJCQl9CgkJfSwKCQljYWxsOiBmdW5jdGlvbiggaW5zdGFuY2UsIG5hbWUsIGFyZ3MgKSB7CgkJCXZhciBpLAoJCQkJc2V0ID0gaW5zdGFuY2UucGx1Z2luc1sgbmFtZSBdOwoJCQlpZiAoICFzZXQgfHwgIWluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlIHx8IGluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlLm5vZGVUeXBlID09PSAxMSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJZm9yICggaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoIGluc3RhbmNlLm9wdGlvbnNbIHNldFsgaSBdWyAwIF0gXSApIHsKCQkJCQlzZXRbIGkgXVsgMSBdLmFwcGx5KCBpbnN0YW5jZS5lbGVtZW50LCBhcmdzICk7CgkJCQl9CgkJCX0KCQl9Cgl9LAoKCWNvbnRhaW5zOiAkLmNvbnRhaW5zLAoKCS8vIG9ubHkgdXNlZCBieSByZXNpemFibGUKCWhhc1Njcm9sbDogZnVuY3Rpb24oIGVsLCBhICkgewoKCQkvL0lmIG92ZXJmbG93IGlzIGhpZGRlbiwgdGhlIGVsZW1lbnQgbWlnaHQgaGF2ZSBleHRyYSBjb250ZW50LCBidXQgdGhlIHVzZXIgd2FudHMgdG8gaGlkZSBpdAoJCWlmICggJCggZWwgKS5jc3MoICJvdmVyZmxvdyIgKSA9PT0gImhpZGRlbiIpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJdmFyIHNjcm9sbCA9ICggYSAmJiBhID09PSAibGVmdCIgKSA/ICJzY3JvbGxMZWZ0IiA6ICJzY3JvbGxUb3AiLAoJCQloYXMgPSBmYWxzZTsKCgkJaWYgKCBlbFsgc2Nyb2xsIF0gPiAwICkgewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCS8vIFRPRE86IGRldGVybWluZSB3aGljaCBjYXNlcyBhY3R1YWxseSBjYXVzZSB0aGlzIHRvIGhhcHBlbgoJCS8vIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSB0aGUgc2Nyb2xsIHNldCwgc2VlIGlmIGl0J3MgcG9zc2libGUgdG8KCQkvLyBzZXQgdGhlIHNjcm9sbAoJCWVsWyBzY3JvbGwgXSA9IDE7CgkJaGFzID0gKCBlbFsgc2Nyb2xsIF0gPiAwICk7CgkJZWxbIHNjcm9sbCBdID0gMDsKCQlyZXR1cm4gaGFzOwoJfSwKCgkvLyB0aGVzZSBhcmUgb2RkIGZ1bmN0aW9ucywgZml4IHRoZSBBUEkgb3IgbW92ZSBpbnRvIGluZGl2aWR1YWwgcGx1Z2lucwoJaXNPdmVyQXhpczogZnVuY3Rpb24oIHgsIHJlZmVyZW5jZSwgc2l6ZSApIHsKCQkvL0RldGVybWluZXMgd2hlbiB4IGNvb3JkaW5hdGUgaXMgb3ZlciAiYiIgZWxlbWVudCBheGlzCgkJcmV0dXJuICggeCA+IHJlZmVyZW5jZSApICYmICggeCA8ICggcmVmZXJlbmNlICsgc2l6ZSApICk7Cgl9LAoJaXNPdmVyOiBmdW5jdGlvbiggeSwgeCwgdG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoICkgewoJCS8vRGV0ZXJtaW5lcyB3aGVuIHgsIHkgY29vcmRpbmF0ZXMgaXMgb3ZlciAiYiIgZWxlbWVudAoJCXJldHVybiAkLnVpLmlzT3ZlckF4aXMoIHksIHRvcCwgaGVpZ2h0ICkgJiYgJC51aS5pc092ZXJBeGlzKCB4LCBsZWZ0LCB3aWR0aCApOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgdXVpZCA9IDAsCglzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSwKCV9jbGVhbkRhdGEgPSAkLmNsZWFuRGF0YTsKJC5jbGVhbkRhdGEgPSBmdW5jdGlvbiggZWxlbXMgKSB7Cglmb3IgKCB2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKCQl0cnkgewoJCQkkKCBlbGVtICkudHJpZ2dlckhhbmRsZXIoICJyZW1vdmUiICk7CgkJLy8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvODIzNQoJCX0gY2F0Y2goIGUgKSB7fQoJfQoJX2NsZWFuRGF0YSggZWxlbXMgKTsKfTsKCiQud2lkZ2V0ID0gZnVuY3Rpb24oIG5hbWUsIGJhc2UsIHByb3RvdHlwZSApIHsKCXZhciBmdWxsTmFtZSwgZXhpc3RpbmdDb25zdHJ1Y3RvciwgY29uc3RydWN0b3IsIGJhc2VQcm90b3R5cGUsCgkJbmFtZXNwYWNlID0gbmFtZS5zcGxpdCggIi4iIClbIDAgXTsKCgluYW1lID0gbmFtZS5zcGxpdCggIi4iIClbIDEgXTsKCWZ1bGxOYW1lID0gbmFtZXNwYWNlICsgIi0iICsgbmFtZTsKCglpZiAoICFwcm90b3R5cGUgKSB7CgkJcHJvdG90eXBlID0gYmFzZTsKCQliYXNlID0gJC5XaWRnZXQ7Cgl9CgoJLy8gY3JlYXRlIHNlbGVjdG9yIGZvciBwbHVnaW4KCSQuZXhwclsgIjoiIF1bIGZ1bGxOYW1lLnRvTG93ZXJDYXNlKCkgXSA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXJldHVybiAhISQuZGF0YSggZWxlbSwgZnVsbE5hbWUgKTsKCX07CgoJJFsgbmFtZXNwYWNlIF0gPSAkWyBuYW1lc3BhY2UgXSB8fCB7fTsKCWV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdOwoJY29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7CgkJLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0ICJuZXciIGtleXdvcmQKCQlpZiAoICF0aGlzLl9jcmVhdGVXaWRnZXQgKSB7CgkJCXJldHVybiBuZXcgY29uc3RydWN0b3IoIG9wdGlvbnMsIGVsZW1lbnQgKTsKCQl9CgoJCS8vIGFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBpbml0aWFsaXppbmcgZm9yIHNpbXBsZSBpbmhlcml0YW5jZQoJCS8vIG11c3QgdXNlICJuZXciIGtleXdvcmQgKHRoZSBjb2RlIGFib3ZlIGFsd2F5cyBwYXNzZXMgYXJncykKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCXRoaXMuX2NyZWF0ZVdpZGdldCggb3B0aW9ucywgZWxlbWVudCApOwoJCX0KCX07CgkvLyBleHRlbmQgd2l0aCB0aGUgZXhpc3RpbmcgY29uc3RydWN0b3IgdG8gY2Fycnkgb3ZlciBhbnkgc3RhdGljIHByb3BlcnRpZXMKCSQuZXh0ZW5kKCBjb25zdHJ1Y3RvciwgZXhpc3RpbmdDb25zdHJ1Y3RvciwgewoJCXZlcnNpb246IHByb3RvdHlwZS52ZXJzaW9uLAoJCS8vIGNvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0bwoJCS8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXIKCQlfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksCgkJLy8gdHJhY2sgd2lkZ2V0cyB0aGF0IGluaGVyaXQgZnJvbSB0aGlzIHdpZGdldCBpbiBjYXNlIHRoaXMgd2lkZ2V0IGlzCgkJLy8gcmVkZWZpbmVkIGFmdGVyIGEgd2lkZ2V0IGluaGVyaXRzIGZyb20gaXQKCQlfY2hpbGRDb25zdHJ1Y3RvcnM6IFtdCgl9KTsKCgliYXNlUHJvdG90eXBlID0gbmV3IGJhc2UoKTsKCS8vIHdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZQoJLy8gb3RoZXJ3aXNlIHdlJ2xsIG1vZGlmeSB0aGUgb3B0aW9ucyBoYXNoIG9uIHRoZSBwcm90b3R5cGUgdGhhdCB3ZSdyZQoJLy8gaW5oZXJpdGluZyBmcm9tCgliYXNlUHJvdG90eXBlLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTsKCSQuZWFjaCggcHJvdG90eXBlLCBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7CgkJaWYgKCAkLmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CgkJCXByb3RvdHlwZVsgcHJvcCBdID0gKGZ1bmN0aW9uKCkgewoJCQkJdmFyIF9zdXBlciA9IGZ1bmN0aW9uKCkgewoJCQkJCQlyZXR1cm4gYmFzZS5wcm90b3R5cGVbIHByb3AgXS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCQkJfSwKCQkJCQlfc3VwZXJBcHBseSA9IGZ1bmN0aW9uKCBhcmdzICkgewoJCQkJCQlyZXR1cm4gYmFzZS5wcm90b3R5cGVbIHByb3AgXS5hcHBseSggdGhpcywgYXJncyApOwoJCQkJCX07CgkJCQlyZXR1cm4gZnVuY3Rpb24oKSB7CgkJCQkJdmFyIF9fc3VwZXIgPSB0aGlzLl9zdXBlciwKCQkJCQkJX19zdXBlckFwcGx5ID0gdGhpcy5fc3VwZXJBcHBseSwKCQkJCQkJcmV0dXJuVmFsdWU7CgoJCQkJCXRoaXMuX3N1cGVyID0gX3N1cGVyOwoJCQkJCXRoaXMuX3N1cGVyQXBwbHkgPSBfc3VwZXJBcHBseTsKCgkJCQkJcmV0dXJuVmFsdWUgPSB2YWx1ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgoJCQkJCXRoaXMuX3N1cGVyID0gX19zdXBlcjsKCQkJCQl0aGlzLl9zdXBlckFwcGx5ID0gX19zdXBlckFwcGx5OwoKCQkJCQlyZXR1cm4gcmV0dXJuVmFsdWU7CgkJCQl9OwoJCQl9KSgpOwoJCX0KCX0pOwoJY29uc3RydWN0b3IucHJvdG90eXBlID0gJC53aWRnZXQuZXh0ZW5kKCBiYXNlUHJvdG90eXBlLCB7CgkJLy8gVE9ETzogcmVtb3ZlIHN1cHBvcnQgZm9yIHdpZGdldEV2ZW50UHJlZml4CgkJLy8gYWx3YXlzIHVzZSB0aGUgbmFtZSArIGEgY29sb24gYXMgdGhlIHByZWZpeCwgZS5nLiwgZHJhZ2dhYmxlOnN0YXJ0CgkJLy8gZG9uJ3QgcHJlZml4IGZvciB3aWRnZXRzIHRoYXQgYXJlbid0IERPTS1iYXNlZAoJCXdpZGdldEV2ZW50UHJlZml4OiBleGlzdGluZ0NvbnN0cnVjdG9yID8gYmFzZVByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCA6IG5hbWUKCX0sIHByb3RvdHlwZSwgewoJCWNvbnN0cnVjdG9yOiBjb25zdHJ1Y3RvciwKCQluYW1lc3BhY2U6IG5hbWVzcGFjZSwKCQl3aWRnZXROYW1lOiBuYW1lLAoJCS8vIFRPRE8gcmVtb3ZlIHdpZGdldEJhc2VDbGFzcywgc2VlICM4MTU1CgkJd2lkZ2V0QmFzZUNsYXNzOiBmdWxsTmFtZSwKCQl3aWRnZXRGdWxsTmFtZTogZnVsbE5hbWUKCX0pOwoKCS8vIElmIHRoaXMgd2lkZ2V0IGlzIGJlaW5nIHJlZGVmaW5lZCB0aGVuIHdlIG5lZWQgdG8gZmluZCBhbGwgd2lkZ2V0cyB0aGF0CgkvLyBhcmUgaW5oZXJpdGluZyBmcm9tIGl0IGFuZCByZWRlZmluZSBhbGwgb2YgdGhlbSBzbyB0aGF0IHRoZXkgaW5oZXJpdCBmcm9tCgkvLyB0aGUgbmV3IHZlcnNpb24gb2YgdGhpcyB3aWRnZXQuIFdlJ3JlIGVzc2VudGlhbGx5IHRyeWluZyB0byByZXBsYWNlIG9uZQoJLy8gbGV2ZWwgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi4KCWlmICggZXhpc3RpbmdDb25zdHJ1Y3RvciApIHsKCQkkLmVhY2goIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbiggaSwgY2hpbGQgKSB7CgkJCXZhciBjaGlsZFByb3RvdHlwZSA9IGNoaWxkLnByb3RvdHlwZTsKCgkJCS8vIHJlZGVmaW5lIHRoZSBjaGlsZCB3aWRnZXQgdXNpbmcgdGhlIHNhbWUgcHJvdG90eXBlIHRoYXQgd2FzCgkJCS8vIG9yaWdpbmFsbHkgdXNlZCwgYnV0IGluaGVyaXQgZnJvbSB0aGUgbmV3IHZlcnNpb24gb2YgdGhlIGJhc2UKCQkJJC53aWRnZXQoIGNoaWxkUHJvdG90eXBlLm5hbWVzcGFjZSArICIuIiArIGNoaWxkUHJvdG90eXBlLndpZGdldE5hbWUsIGNvbnN0cnVjdG9yLCBjaGlsZC5fcHJvdG8gKTsKCQl9KTsKCQkvLyByZW1vdmUgdGhlIGxpc3Qgb2YgZXhpc3RpbmcgY2hpbGQgY29uc3RydWN0b3JzIGZyb20gdGhlIG9sZCBjb25zdHJ1Y3RvcgoJCS8vIHNvIHRoZSBvbGQgY2hpbGQgY29uc3RydWN0b3JzIGNhbiBiZSBnYXJiYWdlIGNvbGxlY3RlZAoJCWRlbGV0ZSBleGlzdGluZ0NvbnN0cnVjdG9yLl9jaGlsZENvbnN0cnVjdG9yczsKCX0gZWxzZSB7CgkJYmFzZS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaCggY29uc3RydWN0b3IgKTsKCX0KCgkkLndpZGdldC5icmlkZ2UoIG5hbWUsIGNvbnN0cnVjdG9yICk7Cn07CgokLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkgewoJdmFyIGlucHV0ID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJaW5wdXRJbmRleCA9IDAsCgkJaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsCgkJa2V5LAoJCXZhbHVlOwoJZm9yICggOyBpbnB1dEluZGV4IDwgaW5wdXRMZW5ndGg7IGlucHV0SW5kZXgrKyApIHsKCQlmb3IgKCBrZXkgaW4gaW5wdXRbIGlucHV0SW5kZXggXSApIHsKCQkJdmFsdWUgPSBpbnB1dFsgaW5wdXRJbmRleCBdWyBrZXkgXTsKCQkJaWYgKCBpbnB1dFsgaW5wdXRJbmRleCBdLmhhc093blByb3BlcnR5KCBrZXkgKSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoJCQkJLy8gQ2xvbmUgb2JqZWN0cwoJCQkJaWYgKCAkLmlzUGxhaW5PYmplY3QoIHZhbHVlICkgKSB7CgkJCQkJdGFyZ2V0WyBrZXkgXSA9ICQuaXNQbGFpbk9iamVjdCggdGFyZ2V0WyBrZXkgXSApID8KCQkJCQkJJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGFyZ2V0WyBrZXkgXSwgdmFsdWUgKSA6CgkJCQkJCS8vIERvbid0IGV4dGVuZCBzdHJpbmdzLCBhcnJheXMsIGV0Yy4gd2l0aCBvYmplY3RzCgkJCQkJCSQud2lkZ2V0LmV4dGVuZCgge30sIHZhbHVlICk7CgkJCQkvLyBDb3B5IGV2ZXJ5dGhpbmcgZWxzZSBieSByZWZlcmVuY2UKCQkJCX0gZWxzZSB7CgkJCQkJdGFyZ2V0WyBrZXkgXSA9IHZhbHVlOwoJCQkJfQoJCQl9CgkJfQoJfQoJcmV0dXJuIHRhcmdldDsKfTsKCiQud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uKCBuYW1lLCBvYmplY3QgKSB7Cgl2YXIgZnVsbE5hbWUgPSBvYmplY3QucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lIHx8IG5hbWU7CgkkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgaXNNZXRob2RDYWxsID0gdHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciLAoJCQlhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJCXJldHVyblZhbHVlID0gdGhpczsKCgkJLy8gYWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0CgkJb3B0aW9ucyA9ICFpc01ldGhvZENhbGwgJiYgYXJncy5sZW5ndGggPwoJCQkkLndpZGdldC5leHRlbmQuYXBwbHkoIG51bGwsIFsgb3B0aW9ucyBdLmNvbmNhdChhcmdzKSApIDoKCQkJb3B0aW9uczsKCgkJaWYgKCBpc01ldGhvZENhbGwgKSB7CgkJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBtZXRob2RWYWx1ZSwKCQkJCQlpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTsKCQkJCWlmICggIWluc3RhbmNlICkgewoJCQkJCXJldHVybiAkLmVycm9yKCAiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiAiICsgbmFtZSArICIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247ICIgKwoJCQkJCQkiYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kICciICsgb3B0aW9ucyArICInIiApOwoJCQkJfQoJCQkJaWYgKCAhJC5pc0Z1bmN0aW9uKCBpbnN0YW5jZVtvcHRpb25zXSApIHx8IG9wdGlvbnMuY2hhckF0KCAwICkgPT09ICJfIiApIHsKCQkJCQlyZXR1cm4gJC5lcnJvciggIm5vIHN1Y2ggbWV0aG9kICciICsgb3B0aW9ucyArICInIGZvciAiICsgbmFtZSArICIgd2lkZ2V0IGluc3RhbmNlIiApOwoJCQkJfQoJCQkJbWV0aG9kVmFsdWUgPSBpbnN0YW5jZVsgb3B0aW9ucyBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApOwoJCQkJaWYgKCBtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgbWV0aG9kVmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlICYmIG1ldGhvZFZhbHVlLmpxdWVyeSA/CgkJCQkJCXJldHVyblZhbHVlLnB1c2hTdGFjayggbWV0aG9kVmFsdWUuZ2V0KCkgKSA6CgkJCQkJCW1ldGhvZFZhbHVlOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBmdWxsTmFtZSApOwoJCQkJaWYgKCBpbnN0YW5jZSApIHsKCQkJCQlpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKS5faW5pdCgpOwoJCQkJfSBlbHNlIHsKCQkJCQkkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lLCBuZXcgb2JqZWN0KCBvcHRpb25zLCB0aGlzICkgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gcmV0dXJuVmFsdWU7Cgl9Owp9OwoKJC5XaWRnZXQgPSBmdW5jdGlvbiggLyogb3B0aW9ucywgZWxlbWVudCAqLyApIHt9OwokLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTsKCiQuV2lkZ2V0LnByb3RvdHlwZSA9IHsKCXdpZGdldE5hbWU6ICJ3aWRnZXQiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICIiLAoJZGVmYXVsdEVsZW1lbnQ6ICI8ZGl2PiIsCglvcHRpb25zOiB7CgkJZGlzYWJsZWQ6IGZhbHNlLAoKCQkvLyBjYWxsYmFja3MKCQljcmVhdGU6IG51bGwKCX0sCglfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHsKCQllbGVtZW50ID0gJCggZWxlbWVudCB8fCB0aGlzLmRlZmF1bHRFbGVtZW50IHx8IHRoaXMgKVsgMCBdOwoJCXRoaXMuZWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQl0aGlzLnV1aWQgPSB1dWlkKys7CgkJdGhpcy5ldmVudE5hbWVzcGFjZSA9ICIuIiArIHRoaXMud2lkZ2V0TmFtZSArIHRoaXMudXVpZDsKCQl0aGlzLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LAoJCQl0aGlzLm9wdGlvbnMsCgkJCXRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSwKCQkJb3B0aW9ucyApOwoKCQl0aGlzLmJpbmRpbmdzID0gJCgpOwoJCXRoaXMuaG92ZXJhYmxlID0gJCgpOwoJCXRoaXMuZm9jdXNhYmxlID0gJCgpOwoKCQlpZiAoIGVsZW1lbnQgIT09IHRoaXMgKSB7CgkJCS8vIDEuOSBCQyBmb3IgIzc4MTAKCQkJLy8gVE9ETyByZW1vdmUgZHVhbCBzdG9yYWdlCgkJCSQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXROYW1lLCB0aGlzICk7CgkJCSQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXRGdWxsTmFtZSwgdGhpcyApOwoJCQl0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7CgkJCQlyZW1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQlpZiAoIGV2ZW50LnRhcmdldCA9PT0gZWxlbWVudCApIHsKCQkJCQkJdGhpcy5kZXN0cm95KCk7CgkJCQkJfQoJCQkJfQoJCQl9KTsKCQkJdGhpcy5kb2N1bWVudCA9ICQoIGVsZW1lbnQuc3R5bGUgPwoJCQkJLy8gZWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50CgkJCQllbGVtZW50Lm93bmVyRG9jdW1lbnQgOgoJCQkJLy8gZWxlbWVudCBpcyB3aW5kb3cgb3IgZG9jdW1lbnQKCQkJCWVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCApOwoJCQl0aGlzLndpbmRvdyA9ICQoIHRoaXMuZG9jdW1lbnRbMF0uZGVmYXVsdFZpZXcgfHwgdGhpcy5kb2N1bWVudFswXS5wYXJlbnRXaW5kb3cgKTsKCQl9CgoJCXRoaXMuX2NyZWF0ZSgpOwoJCXRoaXMuX3RyaWdnZXIoICJjcmVhdGUiLCBudWxsLCB0aGlzLl9nZXRDcmVhdGVFdmVudERhdGEoKSApOwoJCXRoaXMuX2luaXQoKTsKCX0sCglfZ2V0Q3JlYXRlT3B0aW9uczogJC5ub29wLAoJX2dldENyZWF0ZUV2ZW50RGF0YTogJC5ub29wLAoJX2NyZWF0ZTogJC5ub29wLAoJX2luaXQ6ICQubm9vcCwKCglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9kZXN0cm95KCk7CgkJLy8gd2UgY2FuIHByb2JhYmx5IHJlbW92ZSB0aGUgdW5iaW5kIGNhbGxzIGluIDIuMAoJCS8vIGFsbCBldmVudCBiaW5kaW5ncyBzaG91bGQgZ28gdGhyb3VnaCB0aGlzLl9vbigpCgkJdGhpcy5lbGVtZW50CgkJCS51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkvLyAxLjkgQkMgZm9yICM3ODEwCgkJCS8vIFRPRE8gcmVtb3ZlIGR1YWwgc3RvcmFnZQoJCQkucmVtb3ZlRGF0YSggdGhpcy53aWRnZXROYW1lICkKCQkJLnJlbW92ZURhdGEoIHRoaXMud2lkZ2V0RnVsbE5hbWUgKQoJCQkvLyBzdXBwb3J0OiBqcXVlcnkgPDEuNi4zCgkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk0MTMKCQkJLnJlbW92ZURhdGEoICQuY2FtZWxDYXNlKCB0aGlzLndpZGdldEZ1bGxOYW1lICkgKTsKCQl0aGlzLndpZGdldCgpCgkJCS51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtZGlzYWJsZWQiICkKCQkJLnJlbW92ZUNsYXNzKAoJCQkJdGhpcy53aWRnZXRGdWxsTmFtZSArICItZGlzYWJsZWQgIiArCgkJCQkidWktc3RhdGUtZGlzYWJsZWQiICk7CgoJCS8vIGNsZWFuIHVwIGV2ZW50cyBhbmQgc3RhdGVzCgkJdGhpcy5iaW5kaW5ncy51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKTsKCQl0aGlzLmhvdmVyYWJsZS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApOwoJCXRoaXMuZm9jdXNhYmxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7Cgl9LAoJX2Rlc3Ryb3k6ICQubm9vcCwKCgl3aWRnZXQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmVsZW1lbnQ7Cgl9LAoKCW9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdmFyIG9wdGlvbnMgPSBrZXksCgkJCXBhcnRzLAoJCQljdXJPcHRpb24sCgkJCWk7CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHsKCQkJLy8gZG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoCgkJCXJldHVybiAkLndpZGdldC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMgKTsKCQl9CgoJCWlmICggdHlwZW9mIGtleSA9PT0gInN0cmluZyIgKSB7CgkJCS8vIGhhbmRsZSBuZXN0ZWQga2V5cywgZS5nLiwgImZvby5iYXIiID0+IHsgZm9vOiB7IGJhcjogX19fIH0gfQoJCQlvcHRpb25zID0ge307CgkJCXBhcnRzID0ga2V5LnNwbGl0KCAiLiIgKTsKCQkJa2V5ID0gcGFydHMuc2hpZnQoKTsKCQkJaWYgKCBwYXJ0cy5sZW5ndGggKSB7CgkJCQljdXJPcHRpb24gPSBvcHRpb25zWyBrZXkgXSA9ICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9uc1sga2V5IF0gKTsKCQkJCWZvciAoIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrICkgewoJCQkJCWN1ck9wdGlvblsgcGFydHNbIGkgXSBdID0gY3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF0gfHwge307CgkJCQkJY3VyT3B0aW9uID0gY3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF07CgkJCQl9CgkJCQlrZXkgPSBwYXJ0cy5wb3AoKTsKCQkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm4gY3VyT3B0aW9uWyBrZXkgXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGN1ck9wdGlvblsga2V5IF07CgkJCQl9CgkJCQljdXJPcHRpb25bIGtleSBdID0gdmFsdWU7CgkJCX0gZWxzZSB7CgkJCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuIHRoaXMub3B0aW9uc1sga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0aGlzLm9wdGlvbnNbIGtleSBdOwoJCQkJfQoJCQkJb3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCQkJfQoJCX0KCgkJdGhpcy5fc2V0T3B0aW9ucyggb3B0aW9ucyApOwoKCQlyZXR1cm4gdGhpczsKCX0sCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGtleTsKCgkJZm9yICgga2V5IGluIG9wdGlvbnMgKSB7CgkJCXRoaXMuX3NldE9wdGlvbigga2V5LCBvcHRpb25zWyBrZXkgXSApOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlOwoKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJdGhpcy53aWRnZXQoKQoJCQkJLnRvZ2dsZUNsYXNzKCB0aGlzLndpZGdldEZ1bGxOYW1lICsgIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIsICEhdmFsdWUgKQoJCQkJLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdmFsdWUgKTsKCQkJdGhpcy5ob3ZlcmFibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIGZhbHNlICk7Cgl9LAoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgdHJ1ZSApOwoJfSwKCglfb246IGZ1bmN0aW9uKCBzdXBwcmVzc0Rpc2FibGVkQ2hlY2ssIGVsZW1lbnQsIGhhbmRsZXJzICkgewoJCXZhciBkZWxlZ2F0ZUVsZW1lbnQsCgkJCWluc3RhbmNlID0gdGhpczsKCgkJLy8gbm8gc3VwcHJlc3NEaXNhYmxlZENoZWNrIGZsYWcsIHNodWZmbGUgYXJndW1lbnRzCgkJaWYgKCB0eXBlb2Ygc3VwcHJlc3NEaXNhYmxlZENoZWNrICE9PSAiYm9vbGVhbiIgKSB7CgkJCWhhbmRsZXJzID0gZWxlbWVudDsKCQkJZWxlbWVudCA9IHN1cHByZXNzRGlzYWJsZWRDaGVjazsKCQkJc3VwcHJlc3NEaXNhYmxlZENoZWNrID0gZmFsc2U7CgkJfQoKCQkvLyBubyBlbGVtZW50IGFyZ3VtZW50LCBzaHVmZmxlIGFuZCB1c2UgdGhpcy5lbGVtZW50CgkJaWYgKCAhaGFuZGxlcnMgKSB7CgkJCWhhbmRsZXJzID0gZWxlbWVudDsKCQkJZWxlbWVudCA9IHRoaXMuZWxlbWVudDsKCQkJZGVsZWdhdGVFbGVtZW50ID0gdGhpcy53aWRnZXQoKTsKCQl9IGVsc2UgewoJCQkvLyBhY2NlcHQgc2VsZWN0b3JzLCBET00gZWxlbWVudHMKCQkJZWxlbWVudCA9IGRlbGVnYXRlRWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQkJdGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuYWRkKCBlbGVtZW50ICk7CgkJfQoKCQkkLmVhY2goIGhhbmRsZXJzLCBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXIgKSB7CgkJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJCS8vIGFsbG93IHdpZGdldHMgdG8gY3VzdG9taXplIHRoZSBkaXNhYmxlZCBoYW5kbGluZwoJCQkJLy8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW4KCQkJCS8vIC0gZGlzYWJsZWQgY2xhc3MgYXMgbWV0aG9kIGZvciBkaXNhYmxpbmcgaW5kaXZpZHVhbCBwYXJ0cwoJCQkJaWYgKCAhc3VwcHJlc3NEaXNhYmxlZENoZWNrICYmCgkJCQkJCSggaW5zdGFuY2Uub3B0aW9ucy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fAoJCQkJCQkJJCggdGhpcyApLmhhc0NsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkgKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCQlyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gInN0cmluZyIgPyBpbnN0YW5jZVsgaGFuZGxlciBdIDogaGFuZGxlciApCgkJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJCX0KCgkJCS8vIGNvcHkgdGhlIGd1aWQgc28gZGlyZWN0IHVuYmluZGluZyB3b3JrcwoJCQlpZiAoIHR5cGVvZiBoYW5kbGVyICE9PSAic3RyaW5nIiApIHsKCQkJCWhhbmRsZXJQcm94eS5ndWlkID0gaGFuZGxlci5ndWlkID0KCQkJCQloYW5kbGVyLmd1aWQgfHwgaGFuZGxlclByb3h5Lmd1aWQgfHwgJC5ndWlkKys7CgkJCX0KCgkJCXZhciBtYXRjaCA9IGV2ZW50Lm1hdGNoKCAvXihcdyspXHMqKC4qKSQvICksCgkJCQlldmVudE5hbWUgPSBtYXRjaFsxXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlLAoJCQkJc2VsZWN0b3IgPSBtYXRjaFsyXTsKCQkJaWYgKCBzZWxlY3RvciApIHsKCQkJCWRlbGVnYXRlRWxlbWVudC5kZWxlZ2F0ZSggc2VsZWN0b3IsIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7CgkJCX0gZWxzZSB7CgkJCQllbGVtZW50LmJpbmQoIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7CgkJCX0KCQl9KTsKCX0sCgoJX29mZjogZnVuY3Rpb24oIGVsZW1lbnQsIGV2ZW50TmFtZSApIHsKCQlldmVudE5hbWUgPSAoZXZlbnROYW1lIHx8ICIiKS5zcGxpdCggIiAiICkuam9pbiggdGhpcy5ldmVudE5hbWVzcGFjZSArICIgIiApICsgdGhpcy5ldmVudE5hbWVzcGFjZTsKCQllbGVtZW50LnVuYmluZCggZXZlbnROYW1lICkudW5kZWxlZ2F0ZSggZXZlbnROYW1lICk7Cgl9LAoKCV9kZWxheTogZnVuY3Rpb24oIGhhbmRsZXIsIGRlbGF5ICkgewoJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJcmV0dXJuICggdHlwZW9mIGhhbmRsZXIgPT09ICJzdHJpbmciID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKQoJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJfQoJCXZhciBpbnN0YW5jZSA9IHRoaXM7CgkJcmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApOwoJfSwKCglfaG92ZXJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmhvdmVyYWJsZSA9IHRoaXMuaG92ZXJhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCW1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5hZGRDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApOwoJCQl9LAoJCQltb3VzZWxlYXZlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfQoJCX0pOwoJfSwKCglfZm9jdXNhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmZvY3VzYWJsZSA9IHRoaXMuZm9jdXNhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCWZvY3VzaW46IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5hZGRDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJCQl9LAoJCQlmb2N1c291dDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJJCggZXZlbnQuY3VycmVudFRhcmdldCApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7CgkJCX0KCQl9KTsKCX0sCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHsKCQl2YXIgcHJvcCwgb3JpZywKCQkJY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTsKCgkJZGF0YSA9IGRhdGEgfHwge307CgkJZXZlbnQgPSAkLkV2ZW50KCBldmVudCApOwoJCWV2ZW50LnR5cGUgPSAoIHR5cGUgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggPwoJCQl0eXBlIDoKCQkJdGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpOwoJCS8vIHRoZSBvcmlnaW5hbCBldmVudCBtYXkgY29tZSBmcm9tIGFueSBlbGVtZW50CgkJLy8gc28gd2UgbmVlZCB0byByZXNldCB0aGUgdGFyZ2V0IG9uIHRoZSBuZXcgZXZlbnQKCQlldmVudC50YXJnZXQgPSB0aGlzLmVsZW1lbnRbIDAgXTsKCgkJLy8gY29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudAoJCW9yaWcgPSBldmVudC5vcmlnaW5hbEV2ZW50OwoJCWlmICggb3JpZyApIHsKCQkJZm9yICggcHJvcCBpbiBvcmlnICkgewoJCQkJaWYgKCAhKCBwcm9wIGluIGV2ZW50ICkgKSB7CgkJCQkJZXZlbnRbIHByb3AgXSA9IG9yaWdbIHByb3AgXTsKCQkJCX0KCQkJfQoJCX0KCgkJdGhpcy5lbGVtZW50LnRyaWdnZXIoIGV2ZW50LCBkYXRhICk7CgkJcmV0dXJuICEoICQuaXNGdW5jdGlvbiggY2FsbGJhY2sgKSAmJgoJCQljYWxsYmFjay5hcHBseSggdGhpcy5lbGVtZW50WzBdLCBbIGV2ZW50IF0uY29uY2F0KCBkYXRhICkgKSA9PT0gZmFsc2UgfHwKCQkJZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKTsKCX0KfTsKCiQuZWFjaCggeyBzaG93OiAiZmFkZUluIiwgaGlkZTogImZhZGVPdXQiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIGRlZmF1bHRFZmZlY3QgKSB7CgkkLldpZGdldC5wcm90b3R5cGVbICJfIiArIG1ldGhvZCBdID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrICkgewoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciICkgewoJCQlvcHRpb25zID0geyBlZmZlY3Q6IG9wdGlvbnMgfTsKCQl9CgkJdmFyIGhhc09wdGlvbnMsCgkJCWVmZmVjdE5hbWUgPSAhb3B0aW9ucyA/CgkJCQltZXRob2QgOgoJCQkJb3B0aW9ucyA9PT0gdHJ1ZSB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gIm51bWJlciIgPwoJCQkJCWRlZmF1bHRFZmZlY3QgOgoJCQkJCW9wdGlvbnMuZWZmZWN0IHx8IGRlZmF1bHRFZmZlY3Q7CgkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gIm51bWJlciIgKSB7CgkJCW9wdGlvbnMgPSB7IGR1cmF0aW9uOiBvcHRpb25zIH07CgkJfQoJCWhhc09wdGlvbnMgPSAhJC5pc0VtcHR5T2JqZWN0KCBvcHRpb25zICk7CgkJb3B0aW9ucy5jb21wbGV0ZSA9IGNhbGxiYWNrOwoJCWlmICggb3B0aW9ucy5kZWxheSApIHsKCQkJZWxlbWVudC5kZWxheSggb3B0aW9ucy5kZWxheSApOwoJCX0KCQlpZiAoIGhhc09wdGlvbnMgJiYgJC5lZmZlY3RzICYmICggJC5lZmZlY3RzLmVmZmVjdFsgZWZmZWN0TmFtZSBdIHx8ICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSAmJiAkLmVmZmVjdHNbIGVmZmVjdE5hbWUgXSApICkgewoJCQllbGVtZW50WyBtZXRob2QgXSggb3B0aW9ucyApOwoJCX0gZWxzZSBpZiAoIGVmZmVjdE5hbWUgIT09IG1ldGhvZCAmJiBlbGVtZW50WyBlZmZlY3ROYW1lIF0gKSB7CgkJCWVsZW1lbnRbIGVmZmVjdE5hbWUgXSggb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrICk7CgkJfSBlbHNlIHsKCQkJZWxlbWVudC5xdWV1ZShmdW5jdGlvbiggbmV4dCApIHsKCQkJCSQoIHRoaXMgKVsgbWV0aG9kIF0oKTsKCQkJCWlmICggY2FsbGJhY2sgKSB7CgkJCQkJY2FsbGJhY2suY2FsbCggZWxlbWVudFsgMCBdICk7CgkJCQl9CgkJCQluZXh0KCk7CgkJCX0pOwoJCX0KCX07Cn0pOwoKLy8gREVQUkVDQVRFRAppZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHsKCSQuV2lkZ2V0LnByb3RvdHlwZS5fZ2V0Q3JlYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiAkLm1ldGFkYXRhICYmICQubWV0YWRhdGEuZ2V0KCB0aGlzLmVsZW1lbnRbMF0gKVsgdGhpcy53aWRnZXROYW1lIF07Cgl9Owp9Cgp9KSggalF1ZXJ5ICk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIG1vdXNlSGFuZGxlZCA9IGZhbHNlOwokKCBkb2N1bWVudCApLm1vdXNldXAoIGZ1bmN0aW9uKCBlICkgewoJbW91c2VIYW5kbGVkID0gZmFsc2U7Cn0pOwoKJC53aWRnZXQoInVpLm1vdXNlIiwgewoJdmVyc2lvbjogIjEuOS4yIiwKCW9wdGlvbnM6IHsKCQljYW5jZWw6ICdpbnB1dCx0ZXh0YXJlYSxidXR0b24sc2VsZWN0LG9wdGlvbicsCgkJZGlzdGFuY2U6IDEsCgkJZGVsYXk6IDAKCX0sCglfbW91c2VJbml0OiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMuZWxlbWVudAoJCQkuYmluZCgnbW91c2Vkb3duLicrdGhpcy53aWRnZXROYW1lLCBmdW5jdGlvbihldmVudCkgewoJCQkJcmV0dXJuIHRoYXQuX21vdXNlRG93bihldmVudCk7CgkJCX0pCgkJCS5iaW5kKCdjbGljay4nK3RoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCWlmICh0cnVlID09PSAkLmRhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50JykpIHsKCQkJCQkkLnJlbW92ZURhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50Jyk7CgkJCQkJZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9KTsKCgkJdGhpcy5zdGFydGVkID0gZmFsc2U7Cgl9LAoKCS8vIFRPRE86IG1ha2Ugc3VyZSBkZXN0cm95aW5nIG9uZSBpbnN0YW5jZSBvZiBtb3VzZSBkb2Vzbid0IG1lc3Mgd2l0aAoJLy8gb3RoZXIgaW5zdGFuY2VzIG9mIG1vdXNlCglfbW91c2VEZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQudW5iaW5kKCcuJyt0aGlzLndpZGdldE5hbWUpOwoJCWlmICggdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgKSB7CgkJCSQoZG9jdW1lbnQpCgkJCQkudW5iaW5kKCdtb3VzZW1vdmUuJyt0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKQoJCQkJLnVuYmluZCgnbW91c2V1cC4nK3RoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKTsKCQl9Cgl9LAoKCV9tb3VzZURvd246IGZ1bmN0aW9uKGV2ZW50KSB7CgkJLy8gZG9uJ3QgbGV0IG1vcmUgdGhhbiBvbmUgd2lkZ2V0IGhhbmRsZSBtb3VzZVN0YXJ0CgkJaWYoIG1vdXNlSGFuZGxlZCApIHsgcmV0dXJuOyB9CgoJCS8vIHdlIG1heSBoYXZlIG1pc3NlZCBtb3VzZXVwIChvdXQgb2Ygd2luZG93KQoJCSh0aGlzLl9tb3VzZVN0YXJ0ZWQgJiYgdGhpcy5fbW91c2VVcChldmVudCkpOwoKCQl0aGlzLl9tb3VzZURvd25FdmVudCA9IGV2ZW50OwoKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCWJ0bklzTGVmdCA9IChldmVudC53aGljaCA9PT0gMSksCgkJCS8vIGV2ZW50LnRhcmdldC5ub2RlTmFtZSB3b3JrcyBhcm91bmQgYSBidWcgaW4gSUUgOCB3aXRoCgkJCS8vIGRpc2FibGVkIGlucHV0cyAoIzc2MjApCgkJCWVsSXNDYW5jZWwgPSAodHlwZW9mIHRoaXMub3B0aW9ucy5jYW5jZWwgPT09ICJzdHJpbmciICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA/ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5jYW5jZWwpLmxlbmd0aCA6IGZhbHNlKTsKCQlpZiAoIWJ0bklzTGVmdCB8fCBlbElzQ2FuY2VsIHx8ICF0aGlzLl9tb3VzZUNhcHR1cmUoZXZlbnQpKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCgkJdGhpcy5tb3VzZURlbGF5TWV0ID0gIXRoaXMub3B0aW9ucy5kZWxheTsKCQlpZiAoIXRoaXMubW91c2VEZWxheU1ldCkgewoJCQl0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJdGhhdC5tb3VzZURlbGF5TWV0ID0gdHJ1ZTsKCQkJfSwgdGhpcy5vcHRpb25zLmRlbGF5KTsKCQl9CgoJCWlmICh0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGV2ZW50KSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KGV2ZW50KSkgewoJCQl0aGlzLl9tb3VzZVN0YXJ0ZWQgPSAodGhpcy5fbW91c2VTdGFydChldmVudCkgIT09IGZhbHNlKTsKCQkJaWYgKCF0aGlzLl9tb3VzZVN0YXJ0ZWQpIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCgkJLy8gQ2xpY2sgZXZlbnQgbWF5IG5ldmVyIGhhdmUgZmlyZWQgKEdlY2tvICYgT3BlcmEpCgkJaWYgKHRydWUgPT09ICQuZGF0YShldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArICcucHJldmVudENsaWNrRXZlbnQnKSkgewoJCQkkLnJlbW92ZURhdGEoZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50Jyk7CgkJfQoKCQkvLyB0aGVzZSBkZWxlZ2F0ZXMgYXJlIHJlcXVpcmVkIHRvIGtlZXAgY29udGV4dAoJCXRoaXMuX21vdXNlTW92ZURlbGVnYXRlID0gZnVuY3Rpb24oZXZlbnQpIHsKCQkJcmV0dXJuIHRoYXQuX21vdXNlTW92ZShldmVudCk7CgkJfTsKCQl0aGlzLl9tb3VzZVVwRGVsZWdhdGUgPSBmdW5jdGlvbihldmVudCkgewoJCQlyZXR1cm4gdGhhdC5fbW91c2VVcChldmVudCk7CgkJfTsKCQkkKGRvY3VtZW50KQoJCQkuYmluZCgnbW91c2Vtb3ZlLicrdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkKCQkJLmJpbmQoJ21vdXNldXAuJyt0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7CgoJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCW1vdXNlSGFuZGxlZCA9IHRydWU7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZU1vdmU6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJLy8gSUUgbW91c2V1cCBjaGVjayAtIG1vdXNldXAgaGFwcGVuZWQgd2hlbiBtb3VzZSB3YXMgb3V0IG9mIHdpbmRvdwoJCWlmICgkLnVpLmllICYmICEoZG9jdW1lbnQuZG9jdW1lbnRNb2RlID49IDkpICYmICFldmVudC5idXR0b24pIHsKCQkJcmV0dXJuIHRoaXMuX21vdXNlVXAoZXZlbnQpOwoJCX0KCgkJaWYgKHRoaXMuX21vdXNlU3RhcnRlZCkgewoJCQl0aGlzLl9tb3VzZURyYWcoZXZlbnQpOwoJCQlyZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQl9CgoJCWlmICh0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGV2ZW50KSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KGV2ZW50KSkgewoJCQl0aGlzLl9tb3VzZVN0YXJ0ZWQgPQoJCQkJKHRoaXMuX21vdXNlU3RhcnQodGhpcy5fbW91c2VEb3duRXZlbnQsIGV2ZW50KSAhPT0gZmFsc2UpOwoJCQkodGhpcy5fbW91c2VTdGFydGVkID8gdGhpcy5fbW91c2VEcmFnKGV2ZW50KSA6IHRoaXMuX21vdXNlVXAoZXZlbnQpKTsKCQl9CgoJCXJldHVybiAhdGhpcy5fbW91c2VTdGFydGVkOwoJfSwKCglfbW91c2VVcDogZnVuY3Rpb24oZXZlbnQpIHsKCQkkKGRvY3VtZW50KQoJCQkudW5iaW5kKCdtb3VzZW1vdmUuJyt0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKQoJCQkudW5iaW5kKCdtb3VzZXVwLicrdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUpOwoKCQlpZiAodGhpcy5fbW91c2VTdGFydGVkKSB7CgkJCXRoaXMuX21vdXNlU3RhcnRlZCA9IGZhbHNlOwoKCQkJaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fbW91c2VEb3duRXZlbnQudGFyZ2V0KSB7CgkJCQkkLmRhdGEoZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50JywgdHJ1ZSk7CgkJCX0KCgkJCXRoaXMuX21vdXNlU3RvcChldmVudCk7CgkJfQoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9tb3VzZURpc3RhbmNlTWV0OiBmdW5jdGlvbihldmVudCkgewoJCXJldHVybiAoTWF0aC5tYXgoCgkJCQlNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWCAtIGV2ZW50LnBhZ2VYKSwKCQkJCU1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VZIC0gZXZlbnQucGFnZVkpCgkJCSkgPj0gdGhpcy5vcHRpb25zLmRpc3RhbmNlCgkJKTsKCX0sCgoJX21vdXNlRGVsYXlNZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJcmV0dXJuIHRoaXMubW91c2VEZWxheU1ldDsKCX0sCgoJLy8gVGhlc2UgYXJlIHBsYWNlaG9sZGVyIG1ldGhvZHMsIHRvIGJlIG92ZXJyaWRlbiBieSBleHRlbmRpbmcgcGx1Z2luCglfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHt9LAoJX21vdXNlRHJhZzogZnVuY3Rpb24oZXZlbnQpIHt9LAoJX21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQpIHt9LAoJX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oZXZlbnQpIHsgcmV0dXJuIHRydWU7IH0KfSk7Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQudWkgPSAkLnVpIHx8IHt9OwoKdmFyIGNhY2hlZFNjcm9sbGJhcldpZHRoLAoJbWF4ID0gTWF0aC5tYXgsCglhYnMgPSBNYXRoLmFicywKCXJvdW5kID0gTWF0aC5yb3VuZCwKCXJob3Jpem9udGFsID0gL2xlZnR8Y2VudGVyfHJpZ2h0LywKCXJ2ZXJ0aWNhbCA9IC90b3B8Y2VudGVyfGJvdHRvbS8sCglyb2Zmc2V0ID0gL1tcK1wtXVxkKyU/LywKCXJwb3NpdGlvbiA9IC9eXHcrLywKCXJwZXJjZW50ID0gLyUkLywKCV9wb3NpdGlvbiA9ICQuZm4ucG9zaXRpb247CgpmdW5jdGlvbiBnZXRPZmZzZXRzKCBvZmZzZXRzLCB3aWR0aCwgaGVpZ2h0ICkgewoJcmV0dXJuIFsKCQlwYXJzZUludCggb2Zmc2V0c1sgMCBdLCAxMCApICogKCBycGVyY2VudC50ZXN0KCBvZmZzZXRzWyAwIF0gKSA/IHdpZHRoIC8gMTAwIDogMSApLAoJCXBhcnNlSW50KCBvZmZzZXRzWyAxIF0sIDEwICkgKiAoIHJwZXJjZW50LnRlc3QoIG9mZnNldHNbIDEgXSApID8gaGVpZ2h0IC8gMTAwIDogMSApCgldOwp9CmZ1bmN0aW9uIHBhcnNlQ3NzKCBlbGVtZW50LCBwcm9wZXJ0eSApIHsKCXJldHVybiBwYXJzZUludCggJC5jc3MoIGVsZW1lbnQsIHByb3BlcnR5ICksIDEwICkgfHwgMDsKfQoKJC5wb3NpdGlvbiA9IHsKCXNjcm9sbGJhcldpZHRoOiBmdW5jdGlvbigpIHsKCQlpZiAoIGNhY2hlZFNjcm9sbGJhcldpZHRoICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiBjYWNoZWRTY3JvbGxiYXJXaWR0aDsKCQl9CgkJdmFyIHcxLCB3MiwKCQkJZGl2ID0gJCggIjxkaXYgc3R5bGU9J2Rpc3BsYXk6YmxvY2s7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdzpoaWRkZW47Jz48ZGl2IHN0eWxlPSdoZWlnaHQ6MTAwcHg7d2lkdGg6YXV0bzsnPjwvZGl2PjwvZGl2PiIgKSwKCQkJaW5uZXJEaXYgPSBkaXYuY2hpbGRyZW4oKVswXTsKCgkJJCggImJvZHkiICkuYXBwZW5kKCBkaXYgKTsKCQl3MSA9IGlubmVyRGl2Lm9mZnNldFdpZHRoOwoJCWRpdi5jc3MoICJvdmVyZmxvdyIsICJzY3JvbGwiICk7CgoJCXcyID0gaW5uZXJEaXYub2Zmc2V0V2lkdGg7CgoJCWlmICggdzEgPT09IHcyICkgewoJCQl3MiA9IGRpdlswXS5jbGllbnRXaWR0aDsKCQl9CgoJCWRpdi5yZW1vdmUoKTsKCgkJcmV0dXJuIChjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IHcxIC0gdzIpOwoJfSwKCWdldFNjcm9sbEluZm86IGZ1bmN0aW9uKCB3aXRoaW4gKSB7CgkJdmFyIG92ZXJmbG93WCA9IHdpdGhpbi5pc1dpbmRvdyA/ICIiIDogd2l0aGluLmVsZW1lbnQuY3NzKCAib3ZlcmZsb3cteCIgKSwKCQkJb3ZlcmZsb3dZID0gd2l0aGluLmlzV2luZG93ID8gIiIgOiB3aXRoaW4uZWxlbWVudC5jc3MoICJvdmVyZmxvdy15IiApLAoJCQloYXNPdmVyZmxvd1ggPSBvdmVyZmxvd1ggPT09ICJzY3JvbGwiIHx8CgkJCQkoIG92ZXJmbG93WCA9PT0gImF1dG8iICYmIHdpdGhpbi53aWR0aCA8IHdpdGhpbi5lbGVtZW50WzBdLnNjcm9sbFdpZHRoICksCgkJCWhhc092ZXJmbG93WSA9IG92ZXJmbG93WSA9PT0gInNjcm9sbCIgfHwKCQkJCSggb3ZlcmZsb3dZID09PSAiYXV0byIgJiYgd2l0aGluLmhlaWdodCA8IHdpdGhpbi5lbGVtZW50WzBdLnNjcm9sbEhlaWdodCApOwoJCXJldHVybiB7CgkJCXdpZHRoOiBoYXNPdmVyZmxvd1ggPyAkLnBvc2l0aW9uLnNjcm9sbGJhcldpZHRoKCkgOiAwLAoJCQloZWlnaHQ6IGhhc092ZXJmbG93WSA/ICQucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKSA6IDAKCQl9OwoJfSwKCWdldFdpdGhpbkluZm86IGZ1bmN0aW9uKCBlbGVtZW50ICkgewoJCXZhciB3aXRoaW5FbGVtZW50ID0gJCggZWxlbWVudCB8fCB3aW5kb3cgKSwKCQkJaXNXaW5kb3cgPSAkLmlzV2luZG93KCB3aXRoaW5FbGVtZW50WzBdICk7CgkJcmV0dXJuIHsKCQkJZWxlbWVudDogd2l0aGluRWxlbWVudCwKCQkJaXNXaW5kb3c6IGlzV2luZG93LAoJCQlvZmZzZXQ6IHdpdGhpbkVsZW1lbnQub2Zmc2V0KCkgfHwgeyBsZWZ0OiAwLCB0b3A6IDAgfSwKCQkJc2Nyb2xsTGVmdDogd2l0aGluRWxlbWVudC5zY3JvbGxMZWZ0KCksCgkJCXNjcm9sbFRvcDogd2l0aGluRWxlbWVudC5zY3JvbGxUb3AoKSwKCQkJd2lkdGg6IGlzV2luZG93ID8gd2l0aGluRWxlbWVudC53aWR0aCgpIDogd2l0aGluRWxlbWVudC5vdXRlcldpZHRoKCksCgkJCWhlaWdodDogaXNXaW5kb3cgPyB3aXRoaW5FbGVtZW50LmhlaWdodCgpIDogd2l0aGluRWxlbWVudC5vdXRlckhlaWdodCgpCgkJfTsKCX0KfTsKCiQuZm4ucG9zaXRpb24gPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCWlmICggIW9wdGlvbnMgfHwgIW9wdGlvbnMub2YgKSB7CgkJcmV0dXJuIF9wb3NpdGlvbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7Cgl9CgoJLy8gbWFrZSBhIGNvcHksIHdlIGRvbid0IHdhbnQgdG8gbW9kaWZ5IGFyZ3VtZW50cwoJb3B0aW9ucyA9ICQuZXh0ZW5kKCB7fSwgb3B0aW9ucyApOwoKCXZhciBhdE9mZnNldCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgdGFyZ2V0T2Zmc2V0LCBiYXNlUG9zaXRpb24sCgkJdGFyZ2V0ID0gJCggb3B0aW9ucy5vZiApLAoJCXdpdGhpbiA9ICQucG9zaXRpb24uZ2V0V2l0aGluSW5mbyggb3B0aW9ucy53aXRoaW4gKSwKCQlzY3JvbGxJbmZvID0gJC5wb3NpdGlvbi5nZXRTY3JvbGxJbmZvKCB3aXRoaW4gKSwKCQl0YXJnZXRFbGVtID0gdGFyZ2V0WzBdLAoJCWNvbGxpc2lvbiA9ICggb3B0aW9ucy5jb2xsaXNpb24gfHwgImZsaXAiICkuc3BsaXQoICIgIiApLAoJCW9mZnNldHMgPSB7fTsKCglpZiAoIHRhcmdldEVsZW0ubm9kZVR5cGUgPT09IDkgKSB7CgkJdGFyZ2V0V2lkdGggPSB0YXJnZXQud2lkdGgoKTsKCQl0YXJnZXRIZWlnaHQgPSB0YXJnZXQuaGVpZ2h0KCk7CgkJdGFyZ2V0T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTsKCX0gZWxzZSBpZiAoICQuaXNXaW5kb3coIHRhcmdldEVsZW0gKSApIHsKCQl0YXJnZXRXaWR0aCA9IHRhcmdldC53aWR0aCgpOwoJCXRhcmdldEhlaWdodCA9IHRhcmdldC5oZWlnaHQoKTsKCQl0YXJnZXRPZmZzZXQgPSB7IHRvcDogdGFyZ2V0LnNjcm9sbFRvcCgpLCBsZWZ0OiB0YXJnZXQuc2Nyb2xsTGVmdCgpIH07Cgl9IGVsc2UgaWYgKCB0YXJnZXRFbGVtLnByZXZlbnREZWZhdWx0ICkgewoJCS8vIGZvcmNlIGxlZnQgdG9wIHRvIGFsbG93IGZsaXBwaW5nCgkJb3B0aW9ucy5hdCA9ICJsZWZ0IHRvcCI7CgkJdGFyZ2V0V2lkdGggPSB0YXJnZXRIZWlnaHQgPSAwOwoJCXRhcmdldE9mZnNldCA9IHsgdG9wOiB0YXJnZXRFbGVtLnBhZ2VZLCBsZWZ0OiB0YXJnZXRFbGVtLnBhZ2VYIH07Cgl9IGVsc2UgewoJCXRhcmdldFdpZHRoID0gdGFyZ2V0Lm91dGVyV2lkdGgoKTsKCQl0YXJnZXRIZWlnaHQgPSB0YXJnZXQub3V0ZXJIZWlnaHQoKTsKCQl0YXJnZXRPZmZzZXQgPSB0YXJnZXQub2Zmc2V0KCk7Cgl9CgkvLyBjbG9uZSB0byByZXVzZSBvcmlnaW5hbCB0YXJnZXRPZmZzZXQgbGF0ZXIKCWJhc2VQb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgdGFyZ2V0T2Zmc2V0ICk7CgoJLy8gZm9yY2UgbXkgYW5kIGF0IHRvIGhhdmUgdmFsaWQgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgcG9zaXRpb25zCgkvLyBpZiBhIHZhbHVlIGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2VudGVyCgkkLmVhY2goIFsgIm15IiwgImF0IiBdLCBmdW5jdGlvbigpIHsKCQl2YXIgcG9zID0gKCBvcHRpb25zWyB0aGlzIF0gfHwgIiIgKS5zcGxpdCggIiAiICksCgkJCWhvcml6b250YWxPZmZzZXQsCgkJCXZlcnRpY2FsT2Zmc2V0OwoKCQlpZiAoIHBvcy5sZW5ndGggPT09IDEpIHsKCQkJcG9zID0gcmhvcml6b250YWwudGVzdCggcG9zWyAwIF0gKSA/CgkJCQlwb3MuY29uY2F0KCBbICJjZW50ZXIiIF0gKSA6CgkJCQlydmVydGljYWwudGVzdCggcG9zWyAwIF0gKSA/CgkJCQkJWyAiY2VudGVyIiBdLmNvbmNhdCggcG9zICkgOgoJCQkJCVsgImNlbnRlciIsICJjZW50ZXIiIF07CgkJfQoJCXBvc1sgMCBdID0gcmhvcml6b250YWwudGVzdCggcG9zWyAwIF0gKSA/IHBvc1sgMCBdIDogImNlbnRlciI7CgkJcG9zWyAxIF0gPSBydmVydGljYWwudGVzdCggcG9zWyAxIF0gKSA/IHBvc1sgMSBdIDogImNlbnRlciI7CgoJCS8vIGNhbGN1bGF0ZSBvZmZzZXRzCgkJaG9yaXpvbnRhbE9mZnNldCA9IHJvZmZzZXQuZXhlYyggcG9zWyAwIF0gKTsKCQl2ZXJ0aWNhbE9mZnNldCA9IHJvZmZzZXQuZXhlYyggcG9zWyAxIF0gKTsKCQlvZmZzZXRzWyB0aGlzIF0gPSBbCgkJCWhvcml6b250YWxPZmZzZXQgPyBob3Jpem9udGFsT2Zmc2V0WyAwIF0gOiAwLAoJCQl2ZXJ0aWNhbE9mZnNldCA/IHZlcnRpY2FsT2Zmc2V0WyAwIF0gOiAwCgkJXTsKCgkJLy8gcmVkdWNlIHRvIGp1c3QgdGhlIHBvc2l0aW9ucyB3aXRob3V0IHRoZSBvZmZzZXRzCgkJb3B0aW9uc1sgdGhpcyBdID0gWwoJCQlycG9zaXRpb24uZXhlYyggcG9zWyAwIF0gKVsgMCBdLAoJCQlycG9zaXRpb24uZXhlYyggcG9zWyAxIF0gKVsgMCBdCgkJXTsKCX0pOwoKCS8vIG5vcm1hbGl6ZSBjb2xsaXNpb24gb3B0aW9uCglpZiAoIGNvbGxpc2lvbi5sZW5ndGggPT09IDEgKSB7CgkJY29sbGlzaW9uWyAxIF0gPSBjb2xsaXNpb25bIDAgXTsKCX0KCglpZiAoIG9wdGlvbnMuYXRbIDAgXSA9PT0gInJpZ2h0IiApIHsKCQliYXNlUG9zaXRpb24ubGVmdCArPSB0YXJnZXRXaWR0aDsKCX0gZWxzZSBpZiAoIG9wdGlvbnMuYXRbIDAgXSA9PT0gImNlbnRlciIgKSB7CgkJYmFzZVBvc2l0aW9uLmxlZnQgKz0gdGFyZ2V0V2lkdGggLyAyOwoJfQoKCWlmICggb3B0aW9ucy5hdFsgMSBdID09PSAiYm90dG9tIiApIHsKCQliYXNlUG9zaXRpb24udG9wICs9IHRhcmdldEhlaWdodDsKCX0gZWxzZSBpZiAoIG9wdGlvbnMuYXRbIDEgXSA9PT0gImNlbnRlciIgKSB7CgkJYmFzZVBvc2l0aW9uLnRvcCArPSB0YXJnZXRIZWlnaHQgLyAyOwoJfQoKCWF0T2Zmc2V0ID0gZ2V0T2Zmc2V0cyggb2Zmc2V0cy5hdCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCApOwoJYmFzZVBvc2l0aW9uLmxlZnQgKz0gYXRPZmZzZXRbIDAgXTsKCWJhc2VQb3NpdGlvbi50b3AgKz0gYXRPZmZzZXRbIDEgXTsKCglyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCXZhciBjb2xsaXNpb25Qb3NpdGlvbiwgdXNpbmcsCgkJCWVsZW0gPSAkKCB0aGlzICksCgkJCWVsZW1XaWR0aCA9IGVsZW0ub3V0ZXJXaWR0aCgpLAoJCQllbGVtSGVpZ2h0ID0gZWxlbS5vdXRlckhlaWdodCgpLAoJCQltYXJnaW5MZWZ0ID0gcGFyc2VDc3MoIHRoaXMsICJtYXJnaW5MZWZ0IiApLAoJCQltYXJnaW5Ub3AgPSBwYXJzZUNzcyggdGhpcywgIm1hcmdpblRvcCIgKSwKCQkJY29sbGlzaW9uV2lkdGggPSBlbGVtV2lkdGggKyBtYXJnaW5MZWZ0ICsgcGFyc2VDc3MoIHRoaXMsICJtYXJnaW5SaWdodCIgKSArIHNjcm9sbEluZm8ud2lkdGgsCgkJCWNvbGxpc2lvbkhlaWdodCA9IGVsZW1IZWlnaHQgKyBtYXJnaW5Ub3AgKyBwYXJzZUNzcyggdGhpcywgIm1hcmdpbkJvdHRvbSIgKSArIHNjcm9sbEluZm8uaGVpZ2h0LAoJCQlwb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgYmFzZVBvc2l0aW9uICksCgkJCW15T2Zmc2V0ID0gZ2V0T2Zmc2V0cyggb2Zmc2V0cy5teSwgZWxlbS5vdXRlcldpZHRoKCksIGVsZW0ub3V0ZXJIZWlnaHQoKSApOwoKCQlpZiAoIG9wdGlvbnMubXlbIDAgXSA9PT0gInJpZ2h0IiApIHsKCQkJcG9zaXRpb24ubGVmdCAtPSBlbGVtV2lkdGg7CgkJfSBlbHNlIGlmICggb3B0aW9ucy5teVsgMCBdID09PSAiY2VudGVyIiApIHsKCQkJcG9zaXRpb24ubGVmdCAtPSBlbGVtV2lkdGggLyAyOwoJCX0KCgkJaWYgKCBvcHRpb25zLm15WyAxIF0gPT09ICJib3R0b20iICkgewoJCQlwb3NpdGlvbi50b3AgLT0gZWxlbUhlaWdodDsKCQl9IGVsc2UgaWYgKCBvcHRpb25zLm15WyAxIF0gPT09ICJjZW50ZXIiICkgewoJCQlwb3NpdGlvbi50b3AgLT0gZWxlbUhlaWdodCAvIDI7CgkJfQoKCQlwb3NpdGlvbi5sZWZ0ICs9IG15T2Zmc2V0WyAwIF07CgkJcG9zaXRpb24udG9wICs9IG15T2Zmc2V0WyAxIF07CgoJCS8vIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBmcmFjdGlvbnMsIHRoZW4gcm91bmQgZm9yIGNvbnNpc3RlbnQgcmVzdWx0cwoJCWlmICggISQuc3VwcG9ydC5vZmZzZXRGcmFjdGlvbnMgKSB7CgkJCXBvc2l0aW9uLmxlZnQgPSByb3VuZCggcG9zaXRpb24ubGVmdCApOwoJCQlwb3NpdGlvbi50b3AgPSByb3VuZCggcG9zaXRpb24udG9wICk7CgkJfQoKCQljb2xsaXNpb25Qb3NpdGlvbiA9IHsKCQkJbWFyZ2luTGVmdDogbWFyZ2luTGVmdCwKCQkJbWFyZ2luVG9wOiBtYXJnaW5Ub3AKCQl9OwoKCQkkLmVhY2goIFsgImxlZnQiLCAidG9wIiBdLCBmdW5jdGlvbiggaSwgZGlyICkgewoJCQlpZiAoICQudWkucG9zaXRpb25bIGNvbGxpc2lvblsgaSBdIF0gKSB7CgkJCQkkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdWyBkaXIgXSggcG9zaXRpb24sIHsKCQkJCQl0YXJnZXRXaWR0aDogdGFyZ2V0V2lkdGgsCgkJCQkJdGFyZ2V0SGVpZ2h0OiB0YXJnZXRIZWlnaHQsCgkJCQkJZWxlbVdpZHRoOiBlbGVtV2lkdGgsCgkJCQkJZWxlbUhlaWdodDogZWxlbUhlaWdodCwKCQkJCQljb2xsaXNpb25Qb3NpdGlvbjogY29sbGlzaW9uUG9zaXRpb24sCgkJCQkJY29sbGlzaW9uV2lkdGg6IGNvbGxpc2lvbldpZHRoLAoJCQkJCWNvbGxpc2lvbkhlaWdodDogY29sbGlzaW9uSGVpZ2h0LAoJCQkJCW9mZnNldDogWyBhdE9mZnNldFsgMCBdICsgbXlPZmZzZXRbIDAgXSwgYXRPZmZzZXQgWyAxIF0gKyBteU9mZnNldFsgMSBdIF0sCgkJCQkJbXk6IG9wdGlvbnMubXksCgkJCQkJYXQ6IG9wdGlvbnMuYXQsCgkJCQkJd2l0aGluOiB3aXRoaW4sCgkJCQkJZWxlbSA6IGVsZW0KCQkJCX0pOwoJCQl9CgkJfSk7CgoJCWlmICggJC5mbi5iZ2lmcmFtZSApIHsKCQkJZWxlbS5iZ2lmcmFtZSgpOwoJCX0KCgkJaWYgKCBvcHRpb25zLnVzaW5nICkgewoJCQkvLyBhZGRzIGZlZWRiYWNrIGFzIHNlY29uZCBhcmd1bWVudCB0byB1c2luZyBjYWxsYmFjaywgaWYgcHJlc2VudAoJCQl1c2luZyA9IGZ1bmN0aW9uKCBwcm9wcyApIHsKCQkJCXZhciBsZWZ0ID0gdGFyZ2V0T2Zmc2V0LmxlZnQgLSBwb3NpdGlvbi5sZWZ0LAoJCQkJCXJpZ2h0ID0gbGVmdCArIHRhcmdldFdpZHRoIC0gZWxlbVdpZHRoLAoJCQkJCXRvcCA9IHRhcmdldE9mZnNldC50b3AgLSBwb3NpdGlvbi50b3AsCgkJCQkJYm90dG9tID0gdG9wICsgdGFyZ2V0SGVpZ2h0IC0gZWxlbUhlaWdodCwKCQkJCQlmZWVkYmFjayA9IHsKCQkJCQkJdGFyZ2V0OiB7CgkJCQkJCQllbGVtZW50OiB0YXJnZXQsCgkJCQkJCQlsZWZ0OiB0YXJnZXRPZmZzZXQubGVmdCwKCQkJCQkJCXRvcDogdGFyZ2V0T2Zmc2V0LnRvcCwKCQkJCQkJCXdpZHRoOiB0YXJnZXRXaWR0aCwKCQkJCQkJCWhlaWdodDogdGFyZ2V0SGVpZ2h0CgkJCQkJCX0sCgkJCQkJCWVsZW1lbnQ6IHsKCQkJCQkJCWVsZW1lbnQ6IGVsZW0sCgkJCQkJCQlsZWZ0OiBwb3NpdGlvbi5sZWZ0LAoJCQkJCQkJdG9wOiBwb3NpdGlvbi50b3AsCgkJCQkJCQl3aWR0aDogZWxlbVdpZHRoLAoJCQkJCQkJaGVpZ2h0OiBlbGVtSGVpZ2h0CgkJCQkJCX0sCgkJCQkJCWhvcml6b250YWw6IHJpZ2h0IDwgMCA/ICJsZWZ0IiA6IGxlZnQgPiAwID8gInJpZ2h0IiA6ICJjZW50ZXIiLAoJCQkJCQl2ZXJ0aWNhbDogYm90dG9tIDwgMCA/ICJ0b3AiIDogdG9wID4gMCA/ICJib3R0b20iIDogIm1pZGRsZSIKCQkJCQl9OwoJCQkJaWYgKCB0YXJnZXRXaWR0aCA8IGVsZW1XaWR0aCAmJiBhYnMoIGxlZnQgKyByaWdodCApIDwgdGFyZ2V0V2lkdGggKSB7CgkJCQkJZmVlZGJhY2suaG9yaXpvbnRhbCA9ICJjZW50ZXIiOwoJCQkJfQoJCQkJaWYgKCB0YXJnZXRIZWlnaHQgPCBlbGVtSGVpZ2h0ICYmIGFicyggdG9wICsgYm90dG9tICkgPCB0YXJnZXRIZWlnaHQgKSB7CgkJCQkJZmVlZGJhY2sudmVydGljYWwgPSAibWlkZGxlIjsKCQkJCX0KCQkJCWlmICggbWF4KCBhYnMoIGxlZnQgKSwgYWJzKCByaWdodCApICkgPiBtYXgoIGFicyggdG9wICksIGFicyggYm90dG9tICkgKSApIHsKCQkJCQlmZWVkYmFjay5pbXBvcnRhbnQgPSAiaG9yaXpvbnRhbCI7CgkJCQl9IGVsc2UgewoJCQkJCWZlZWRiYWNrLmltcG9ydGFudCA9ICJ2ZXJ0aWNhbCI7CgkJCQl9CgkJCQlvcHRpb25zLnVzaW5nLmNhbGwoIHRoaXMsIHByb3BzLCBmZWVkYmFjayApOwoJCQl9OwoJCX0KCgkJZWxlbS5vZmZzZXQoICQuZXh0ZW5kKCBwb3NpdGlvbiwgeyB1c2luZzogdXNpbmcgfSApICk7Cgl9KTsKfTsKCiQudWkucG9zaXRpb24gPSB7CglmaXQ6IHsKCQlsZWZ0OiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7CgkJCXZhciB3aXRoaW4gPSBkYXRhLndpdGhpbiwKCQkJCXdpdGhpbk9mZnNldCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxMZWZ0IDogd2l0aGluLm9mZnNldC5sZWZ0LAoJCQkJb3V0ZXJXaWR0aCA9IHdpdGhpbi53aWR0aCwKCQkJCWNvbGxpc2lvblBvc0xlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LAoJCQkJb3ZlckxlZnQgPSB3aXRoaW5PZmZzZXQgLSBjb2xsaXNpb25Qb3NMZWZ0LAoJCQkJb3ZlclJpZ2h0ID0gY29sbGlzaW9uUG9zTGVmdCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC0gd2l0aGluT2Zmc2V0LAoJCQkJbmV3T3ZlclJpZ2h0OwoKCQkJLy8gZWxlbWVudCBpcyB3aWRlciB0aGFuIHdpdGhpbgoJCQlpZiAoIGRhdGEuY29sbGlzaW9uV2lkdGggPiBvdXRlcldpZHRoICkgewoJCQkJLy8gZWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciB0aGUgbGVmdCBzaWRlIG9mIHdpdGhpbgoJCQkJaWYgKCBvdmVyTGVmdCA+IDAgJiYgb3ZlclJpZ2h0IDw9IDAgKSB7CgkJCQkJbmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG92ZXJMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLSB3aXRoaW5PZmZzZXQ7CgkJCQkJcG9zaXRpb24ubGVmdCArPSBvdmVyTGVmdCAtIG5ld092ZXJSaWdodDsKCQkJCS8vIGVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgcmlnaHQgc2lkZSBvZiB3aXRoaW4KCQkJCX0gZWxzZSBpZiAoIG92ZXJSaWdodCA+IDAgJiYgb3ZlckxlZnQgPD0gMCApIHsKCQkJCQlwb3NpdGlvbi5sZWZ0ID0gd2l0aGluT2Zmc2V0OwoJCQkJLy8gZWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3RoIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIG9mIHdpdGhpbgoJCQkJfSBlbHNlIHsKCQkJCQlpZiAoIG92ZXJMZWZ0ID4gb3ZlclJpZ2h0ICkgewoJCQkJCQlwb3NpdGlvbi5sZWZ0ID0gd2l0aGluT2Zmc2V0ICsgb3V0ZXJXaWR0aCAtIGRhdGEuY29sbGlzaW9uV2lkdGg7CgkJCQkJfSBlbHNlIHsKCQkJCQkJcG9zaXRpb24ubGVmdCA9IHdpdGhpbk9mZnNldDsKCQkJCQl9CgkJCQl9CgkJCS8vIHRvbyBmYXIgbGVmdCAtPiBhbGlnbiB3aXRoIGxlZnQgZWRnZQoJCQl9IGVsc2UgaWYgKCBvdmVyTGVmdCA+IDAgKSB7CgkJCQlwb3NpdGlvbi5sZWZ0ICs9IG92ZXJMZWZ0OwoJCQkvLyB0b28gZmFyIHJpZ2h0IC0+IGFsaWduIHdpdGggcmlnaHQgZWRnZQoJCQl9IGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICkgewoJCQkJcG9zaXRpb24ubGVmdCAtPSBvdmVyUmlnaHQ7CgkJCS8vIGFkanVzdCBiYXNlZCBvbiBwb3NpdGlvbiBhbmQgbWFyZ2luCgkJCX0gZWxzZSB7CgkJCQlwb3NpdGlvbi5sZWZ0ID0gbWF4KCBwb3NpdGlvbi5sZWZ0IC0gY29sbGlzaW9uUG9zTGVmdCwgcG9zaXRpb24ubGVmdCApOwoJCQl9CgkJfSwKCQl0b3A6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHsKCQkJdmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLAoJCQkJd2l0aGluT2Zmc2V0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbFRvcCA6IHdpdGhpbi5vZmZzZXQudG9wLAoJCQkJb3V0ZXJIZWlnaHQgPSBkYXRhLndpdGhpbi5oZWlnaHQsCgkJCQljb2xsaXNpb25Qb3NUb3AgPSBwb3NpdGlvbi50b3AgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCwKCQkJCW92ZXJUb3AgPSB3aXRoaW5PZmZzZXQgLSBjb2xsaXNpb25Qb3NUb3AsCgkJCQlvdmVyQm90dG9tID0gY29sbGlzaW9uUG9zVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIHdpdGhpbk9mZnNldCwKCQkJCW5ld092ZXJCb3R0b207CgoJCQkvLyBlbGVtZW50IGlzIHRhbGxlciB0aGFuIHdpdGhpbgoJCQlpZiAoIGRhdGEuY29sbGlzaW9uSGVpZ2h0ID4gb3V0ZXJIZWlnaHQgKSB7CgkJCQkvLyBlbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHRoZSB0b3Agb2Ygd2l0aGluCgkJCQlpZiAoIG92ZXJUb3AgPiAwICYmIG92ZXJCb3R0b20gPD0gMCApIHsKCQkJCQluZXdPdmVyQm90dG9tID0gcG9zaXRpb24udG9wICsgb3ZlclRvcCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC0gb3V0ZXJIZWlnaHQgLSB3aXRoaW5PZmZzZXQ7CgkJCQkJcG9zaXRpb24udG9wICs9IG92ZXJUb3AgLSBuZXdPdmVyQm90dG9tOwoJCQkJLy8gZWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3R0b20gb2Ygd2l0aGluCgkJCQl9IGVsc2UgaWYgKCBvdmVyQm90dG9tID4gMCAmJiBvdmVyVG9wIDw9IDAgKSB7CgkJCQkJcG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0OwoJCQkJLy8gZWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3RoIHRvcCBhbmQgYm90dG9tIG9mIHdpdGhpbgoJCQkJfSBlbHNlIHsKCQkJCQlpZiAoIG92ZXJUb3AgPiBvdmVyQm90dG9tICkgewoJCQkJCQlwb3NpdGlvbi50b3AgPSB3aXRoaW5PZmZzZXQgKyBvdXRlckhlaWdodCAtIGRhdGEuY29sbGlzaW9uSGVpZ2h0OwoJCQkJCX0gZWxzZSB7CgkJCQkJCXBvc2l0aW9uLnRvcCA9IHdpdGhpbk9mZnNldDsKCQkJCQl9CgkJCQl9CgkJCS8vIHRvbyBmYXIgdXAgLT4gYWxpZ24gd2l0aCB0b3AKCQkJfSBlbHNlIGlmICggb3ZlclRvcCA+IDAgKSB7CgkJCQlwb3NpdGlvbi50b3AgKz0gb3ZlclRvcDsKCQkJLy8gdG9vIGZhciBkb3duIC0+IGFsaWduIHdpdGggYm90dG9tIGVkZ2UKCQkJfSBlbHNlIGlmICggb3ZlckJvdHRvbSA+IDAgKSB7CgkJCQlwb3NpdGlvbi50b3AgLT0gb3ZlckJvdHRvbTsKCQkJLy8gYWRqdXN0IGJhc2VkIG9uIHBvc2l0aW9uIGFuZCBtYXJnaW4KCQkJfSBlbHNlIHsKCQkJCXBvc2l0aW9uLnRvcCA9IG1heCggcG9zaXRpb24udG9wIC0gY29sbGlzaW9uUG9zVG9wLCBwb3NpdGlvbi50b3AgKTsKCQkJfQoJCX0KCX0sCglmbGlwOiB7CgkJbGVmdDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkgewoJCQl2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sCgkJCQl3aXRoaW5PZmZzZXQgPSB3aXRoaW4ub2Zmc2V0LmxlZnQgKyB3aXRoaW4uc2Nyb2xsTGVmdCwKCQkJCW91dGVyV2lkdGggPSB3aXRoaW4ud2lkdGgsCgkJCQlvZmZzZXRMZWZ0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbExlZnQgOiB3aXRoaW4ub2Zmc2V0LmxlZnQsCgkJCQljb2xsaXNpb25Qb3NMZWZ0ID0gcG9zaXRpb24ubGVmdCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCwKCQkJCW92ZXJMZWZ0ID0gY29sbGlzaW9uUG9zTGVmdCAtIG9mZnNldExlZnQsCgkJCQlvdmVyUmlnaHQgPSBjb2xsaXNpb25Qb3NMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLSBvZmZzZXRMZWZ0LAoJCQkJbXlPZmZzZXQgPSBkYXRhLm15WyAwIF0gPT09ICJsZWZ0IiA/CgkJCQkJLWRhdGEuZWxlbVdpZHRoIDoKCQkJCQlkYXRhLm15WyAwIF0gPT09ICJyaWdodCIgPwoJCQkJCQlkYXRhLmVsZW1XaWR0aCA6CgkJCQkJCTAsCgkJCQlhdE9mZnNldCA9IGRhdGEuYXRbIDAgXSA9PT0gImxlZnQiID8KCQkJCQlkYXRhLnRhcmdldFdpZHRoIDoKCQkJCQlkYXRhLmF0WyAwIF0gPT09ICJyaWdodCIgPwoJCQkJCQktZGF0YS50YXJnZXRXaWR0aCA6CgkJCQkJCTAsCgkJCQlvZmZzZXQgPSAtMiAqIGRhdGEub2Zmc2V0WyAwIF0sCgkJCQluZXdPdmVyUmlnaHQsCgkJCQluZXdPdmVyTGVmdDsKCgkJCWlmICggb3ZlckxlZnQgPCAwICkgewoJCQkJbmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC0gb3V0ZXJXaWR0aCAtIHdpdGhpbk9mZnNldDsKCQkJCWlmICggbmV3T3ZlclJpZ2h0IDwgMCB8fCBuZXdPdmVyUmlnaHQgPCBhYnMoIG92ZXJMZWZ0ICkgKSB7CgkJCQkJcG9zaXRpb24ubGVmdCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0OwoJCQkJfQoJCQl9CgkJCWVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICkgewoJCQkJbmV3T3ZlckxlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0ICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCAtIG9mZnNldExlZnQ7CgkJCQlpZiAoIG5ld092ZXJMZWZ0ID4gMCB8fCBhYnMoIG5ld092ZXJMZWZ0ICkgPCBvdmVyUmlnaHQgKSB7CgkJCQkJcG9zaXRpb24ubGVmdCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0OwoJCQkJfQoJCQl9CgkJfSwKCQl0b3A6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHsKCQkJdmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLAoJCQkJd2l0aGluT2Zmc2V0ID0gd2l0aGluLm9mZnNldC50b3AgKyB3aXRoaW4uc2Nyb2xsVG9wLAoJCQkJb3V0ZXJIZWlnaHQgPSB3aXRoaW4uaGVpZ2h0LAoJCQkJb2Zmc2V0VG9wID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbFRvcCA6IHdpdGhpbi5vZmZzZXQudG9wLAoJCQkJY29sbGlzaW9uUG9zVG9wID0gcG9zaXRpb24udG9wIC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AsCgkJCQlvdmVyVG9wID0gY29sbGlzaW9uUG9zVG9wIC0gb2Zmc2V0VG9wLAoJCQkJb3ZlckJvdHRvbSA9IGNvbGxpc2lvblBvc1RvcCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC0gb3V0ZXJIZWlnaHQgLSBvZmZzZXRUb3AsCgkJCQl0b3AgPSBkYXRhLm15WyAxIF0gPT09ICJ0b3AiLAoJCQkJbXlPZmZzZXQgPSB0b3AgPwoJCQkJCS1kYXRhLmVsZW1IZWlnaHQgOgoJCQkJCWRhdGEubXlbIDEgXSA9PT0gImJvdHRvbSIgPwoJCQkJCQlkYXRhLmVsZW1IZWlnaHQgOgoJCQkJCQkwLAoJCQkJYXRPZmZzZXQgPSBkYXRhLmF0WyAxIF0gPT09ICJ0b3AiID8KCQkJCQlkYXRhLnRhcmdldEhlaWdodCA6CgkJCQkJZGF0YS5hdFsgMSBdID09PSAiYm90dG9tIiA/CgkJCQkJCS1kYXRhLnRhcmdldEhlaWdodCA6CgkJCQkJCTAsCgkJCQlvZmZzZXQgPSAtMiAqIGRhdGEub2Zmc2V0WyAxIF0sCgkJCQluZXdPdmVyVG9wLAoJCQkJbmV3T3ZlckJvdHRvbTsKCQkJaWYgKCBvdmVyVG9wIDwgMCApIHsKCQkJCW5ld092ZXJCb3R0b20gPSBwb3NpdGlvbi50b3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0ICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIHdpdGhpbk9mZnNldDsKCQkJCWlmICggKCBwb3NpdGlvbi50b3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0KSA+IG92ZXJUb3AgJiYgKCBuZXdPdmVyQm90dG9tIDwgMCB8fCBuZXdPdmVyQm90dG9tIDwgYWJzKCBvdmVyVG9wICkgKSApIHsKCQkJCQlwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDsKCQkJCX0KCQkJfQoJCQllbHNlIGlmICggb3ZlckJvdHRvbSA+IDAgKSB7CgkJCQluZXdPdmVyVG9wID0gcG9zaXRpb24udG9wIC0gIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCAtIG9mZnNldFRvcDsKCQkJCWlmICggKCBwb3NpdGlvbi50b3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0KSA+IG92ZXJCb3R0b20gJiYgKCBuZXdPdmVyVG9wID4gMCB8fCBhYnMoIG5ld092ZXJUb3AgKSA8IG92ZXJCb3R0b20gKSApIHsKCQkJCQlwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDsKCQkJCX0KCQkJfQoJCX0KCX0sCglmbGlwZml0OiB7CgkJbGVmdDogZnVuY3Rpb24oKSB7CgkJCSQudWkucG9zaXRpb24uZmxpcC5sZWZ0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJJC51aS5wb3NpdGlvbi5maXQubGVmdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJfSwKCQl0b3A6IGZ1bmN0aW9uKCkgewoJCQkkLnVpLnBvc2l0aW9uLmZsaXAudG9wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJJC51aS5wb3NpdGlvbi5maXQudG9wLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl9Cgl9Cn07CgovLyBmcmFjdGlvbiBzdXBwb3J0IHRlc3QKKGZ1bmN0aW9uICgpIHsKCXZhciB0ZXN0RWxlbWVudCwgdGVzdEVsZW1lbnRQYXJlbnQsIHRlc3RFbGVtZW50U3R5bGUsIG9mZnNldExlZnQsIGksCgkJYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiYm9keSIgKVsgMCBdLAoJCWRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CgoJLy9DcmVhdGUgYSAiZmFrZSBib2R5IiBmb3IgdGVzdGluZyBiYXNlZCBvbiBtZXRob2QgdXNlZCBpbiBqUXVlcnkuc3VwcG9ydAoJdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBib2R5ID8gImRpdiIgOiAiYm9keSIgKTsKCXRlc3RFbGVtZW50U3R5bGUgPSB7CgkJdmlzaWJpbGl0eTogImhpZGRlbiIsCgkJd2lkdGg6IDAsCgkJaGVpZ2h0OiAwLAoJCWJvcmRlcjogMCwKCQltYXJnaW46IDAsCgkJYmFja2dyb3VuZDogIm5vbmUiCgl9OwoJaWYgKCBib2R5ICkgewoJCSQuZXh0ZW5kKCB0ZXN0RWxlbWVudFN0eWxlLCB7CgkJCXBvc2l0aW9uOiAiYWJzb2x1dGUiLAoJCQlsZWZ0OiAiLTEwMDBweCIsCgkJCXRvcDogIi0xMDAwcHgiCgkJfSk7Cgl9Cglmb3IgKCBpIGluIHRlc3RFbGVtZW50U3R5bGUgKSB7CgkJdGVzdEVsZW1lbnQuc3R5bGVbIGkgXSA9IHRlc3RFbGVtZW50U3R5bGVbIGkgXTsKCX0KCXRlc3RFbGVtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCXRlc3RFbGVtZW50UGFyZW50ID0gYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cgl0ZXN0RWxlbWVudFBhcmVudC5pbnNlcnRCZWZvcmUoIHRlc3RFbGVtZW50LCB0ZXN0RWxlbWVudFBhcmVudC5maXJzdENoaWxkICk7CgoJZGl2LnN0eWxlLmNzc1RleHQgPSAicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAxMC43NDMyMjIycHg7IjsKCglvZmZzZXRMZWZ0ID0gJCggZGl2ICkub2Zmc2V0KCkubGVmdDsKCSQuc3VwcG9ydC5vZmZzZXRGcmFjdGlvbnMgPSBvZmZzZXRMZWZ0ID4gMTAgJiYgb2Zmc2V0TGVmdCA8IDExOwoKCXRlc3RFbGVtZW50LmlubmVySFRNTCA9ICIiOwoJdGVzdEVsZW1lbnRQYXJlbnQucmVtb3ZlQ2hpbGQoIHRlc3RFbGVtZW50ICk7Cn0pKCk7CgovLyBERVBSRUNBVEVECmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkgewoJLy8gb2Zmc2V0IG9wdGlvbgoJKGZ1bmN0aW9uKCAkICkgewoJCXZhciBfcG9zaXRpb24gPSAkLmZuLnBvc2l0aW9uOwoJCSQuZm4ucG9zaXRpb24gPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQkJaWYgKCAhb3B0aW9ucyB8fCAhb3B0aW9ucy5vZmZzZXQgKSB7CgkJCQlyZXR1cm4gX3Bvc2l0aW9uLmNhbGwoIHRoaXMsIG9wdGlvbnMgKTsKCQkJfQoJCQl2YXIgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQuc3BsaXQoICIgIiApLAoJCQkJYXQgPSBvcHRpb25zLmF0LnNwbGl0KCAiICIgKTsKCQkJaWYgKCBvZmZzZXQubGVuZ3RoID09PSAxICkgewoJCQkJb2Zmc2V0WyAxIF0gPSBvZmZzZXRbIDAgXTsKCQkJfQoJCQlpZiAoIC9eXGQvLnRlc3QoIG9mZnNldFsgMCBdICkgKSB7CgkJCQlvZmZzZXRbIDAgXSA9ICIrIiArIG9mZnNldFsgMCBdOwoJCQl9CgkJCWlmICggL15cZC8udGVzdCggb2Zmc2V0WyAxIF0gKSApIHsKCQkJCW9mZnNldFsgMSBdID0gIisiICsgb2Zmc2V0WyAxIF07CgkJCX0KCQkJaWYgKCBhdC5sZW5ndGggPT09IDEgKSB7CgkJCQlpZiAoIC9sZWZ0fGNlbnRlcnxyaWdodC8udGVzdCggYXRbIDAgXSApICkgewoJCQkJCWF0WyAxIF0gPSAiY2VudGVyIjsKCQkJCX0gZWxzZSB7CgkJCQkJYXRbIDEgXSA9IGF0WyAwIF07CgkJCQkJYXRbIDAgXSA9ICJjZW50ZXIiOwoJCQkJfQoJCQl9CgkJCXJldHVybiBfcG9zaXRpb24uY2FsbCggdGhpcywgJC5leHRlbmQoIG9wdGlvbnMsIHsKCQkJCWF0OiBhdFsgMCBdICsgb2Zmc2V0WyAwIF0gKyAiICIgKyBhdFsgMSBdICsgb2Zmc2V0WyAxIF0sCgkJCQlvZmZzZXQ6IHVuZGVmaW5lZAoJCQl9ICkgKTsKCQl9OwoJfSggalF1ZXJ5ICkgKTsKfQoKfSggalF1ZXJ5ICkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCgidWkuZHJhZ2dhYmxlIiwgJC51aS5tb3VzZSwgewoJdmVyc2lvbjogIjEuOS4yIiwKCXdpZGdldEV2ZW50UHJlZml4OiAiZHJhZyIsCglvcHRpb25zOiB7CgkJYWRkQ2xhc3NlczogdHJ1ZSwKCQlhcHBlbmRUbzogInBhcmVudCIsCgkJYXhpczogZmFsc2UsCgkJY29ubmVjdFRvU29ydGFibGU6IGZhbHNlLAoJCWNvbnRhaW5tZW50OiBmYWxzZSwKCQljdXJzb3I6ICJhdXRvIiwKCQljdXJzb3JBdDogZmFsc2UsCgkJZ3JpZDogZmFsc2UsCgkJaGFuZGxlOiBmYWxzZSwKCQloZWxwZXI6ICJvcmlnaW5hbCIsCgkJaWZyYW1lRml4OiBmYWxzZSwKCQlvcGFjaXR5OiBmYWxzZSwKCQlyZWZyZXNoUG9zaXRpb25zOiBmYWxzZSwKCQlyZXZlcnQ6IGZhbHNlLAoJCXJldmVydER1cmF0aW9uOiA1MDAsCgkJc2NvcGU6ICJkZWZhdWx0IiwKCQlzY3JvbGw6IHRydWUsCgkJc2Nyb2xsU2Vuc2l0aXZpdHk6IDIwLAoJCXNjcm9sbFNwZWVkOiAyMCwKCQlzbmFwOiBmYWxzZSwKCQlzbmFwTW9kZTogImJvdGgiLAoJCXNuYXBUb2xlcmFuY2U6IDIwLAoJCXN0YWNrOiBmYWxzZSwKCQl6SW5kZXg6IGZhbHNlCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCWlmICh0aGlzLm9wdGlvbnMuaGVscGVyID09ICdvcmlnaW5hbCcgJiYgISgvXig/OnJ8YXxmKS8pLnRlc3QodGhpcy5lbGVtZW50LmNzcygicG9zaXRpb24iKSkpCgkJCXRoaXMuZWxlbWVudFswXS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7CgoJCSh0aGlzLm9wdGlvbnMuYWRkQ2xhc3NlcyAmJiB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoInVpLWRyYWdnYWJsZSIpKTsKCQkodGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktZHJhZ2dhYmxlLWRpc2FibGVkIikpOwoKCQl0aGlzLl9tb3VzZUluaXQoKTsKCgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoICJ1aS1kcmFnZ2FibGUgdWktZHJhZ2dhYmxlLWRyYWdnaW5nIHVpLWRyYWdnYWJsZS1kaXNhYmxlZCIgKTsKCQl0aGlzLl9tb3VzZURlc3Ryb3koKTsKCX0sCgoJX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgoJCS8vIGFtb25nIG90aGVycywgcHJldmVudCBhIGRyYWcgb24gYSByZXNpemFibGUtaGFuZGxlCgkJaWYgKHRoaXMuaGVscGVyIHx8IG8uZGlzYWJsZWQgfHwgJChldmVudC50YXJnZXQpLmlzKCcudWktcmVzaXphYmxlLWhhbmRsZScpKQoJCQlyZXR1cm4gZmFsc2U7CgoJCS8vUXVpdCBpZiB3ZSdyZSBub3Qgb24gYSB2YWxpZCBoYW5kbGUKCQl0aGlzLmhhbmRsZSA9IHRoaXMuX2dldEhhbmRsZShldmVudCk7CgkJaWYgKCF0aGlzLmhhbmRsZSkKCQkJcmV0dXJuIGZhbHNlOwoKCQkkKG8uaWZyYW1lRml4ID09PSB0cnVlID8gImlmcmFtZSIgOiBvLmlmcmFtZUZpeCkuZWFjaChmdW5jdGlvbigpIHsKCQkJJCgnPGRpdiBjbGFzcz0idWktZHJhZ2dhYmxlLWlmcmFtZUZpeCIgc3R5bGU9ImJhY2tncm91bmQ6ICNmZmY7Ij48L2Rpdj4nKQoJCQkuY3NzKHsKCQkJCXdpZHRoOiB0aGlzLm9mZnNldFdpZHRoKyJweCIsIGhlaWdodDogdGhpcy5vZmZzZXRIZWlnaHQrInB4IiwKCQkJCXBvc2l0aW9uOiAiYWJzb2x1dGUiLCBvcGFjaXR5OiAiMC4wMDEiLCB6SW5kZXg6IDEwMDAKCQkJfSkKCQkJLmNzcygkKHRoaXMpLm9mZnNldCgpKQoJCQkuYXBwZW5kVG8oImJvZHkiKTsKCQl9KTsKCgkJcmV0dXJuIHRydWU7CgoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgoJCS8vQ3JlYXRlIGFuZCBhcHBlbmQgdGhlIHZpc2libGUgaGVscGVyCgkJdGhpcy5oZWxwZXIgPSB0aGlzLl9jcmVhdGVIZWxwZXIoZXZlbnQpOwoKCQl0aGlzLmhlbHBlci5hZGRDbGFzcygidWktZHJhZ2dhYmxlLWRyYWdnaW5nIik7CgoJCS8vQ2FjaGUgdGhlIGhlbHBlciBzaXplCgkJdGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpOwoKCQkvL0lmIGRkbWFuYWdlciBpcyB1c2VkIGZvciBkcm9wcGFibGVzLCBzZXQgdGhlIGdsb2JhbCBkcmFnZ2FibGUKCQlpZigkLnVpLmRkbWFuYWdlcikKCQkJJC51aS5kZG1hbmFnZXIuY3VycmVudCA9IHRoaXM7CgoJCS8qCgkJICogLSBQb3NpdGlvbiBnZW5lcmF0aW9uIC0KCQkgKiBUaGlzIGJsb2NrIGdlbmVyYXRlcyBldmVyeXRoaW5nIHBvc2l0aW9uIHJlbGF0ZWQgLSBpdCdzIHRoZSBjb3JlIG9mIGRyYWdnYWJsZXMuCgkJICovCgoJCS8vQ2FjaGUgdGhlIG1hcmdpbnMgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnQKCQl0aGlzLl9jYWNoZU1hcmdpbnMoKTsKCgkJLy9TdG9yZSB0aGUgaGVscGVyJ3MgY3NzIHBvc2l0aW9uCgkJdGhpcy5jc3NQb3NpdGlvbiA9IHRoaXMuaGVscGVyLmNzcygicG9zaXRpb24iKTsKCQl0aGlzLnNjcm9sbFBhcmVudCA9IHRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCgpOwoKCQkvL1RoZSBlbGVtZW50J3MgYWJzb2x1dGUgcG9zaXRpb24gb24gdGhlIHBhZ2UgbWludXMgbWFyZ2lucwoJCXRoaXMub2Zmc2V0ID0gdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTsKCQl0aGlzLm9mZnNldCA9IHsKCQkJdG9wOiB0aGlzLm9mZnNldC50b3AgLSB0aGlzLm1hcmdpbnMudG9wLAoJCQlsZWZ0OiB0aGlzLm9mZnNldC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQKCQl9OwoKCQkkLmV4dGVuZCh0aGlzLm9mZnNldCwgewoJCQljbGljazogeyAvL1doZXJlIHRoZSBjbGljayBoYXBwZW5lZCwgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQKCQkJCWxlZnQ6IGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQubGVmdCwKCQkJCXRvcDogZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC50b3AKCQkJfSwKCQkJcGFyZW50OiB0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSwKCQkJcmVsYXRpdmU6IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCkgLy9UaGlzIGlzIGEgcmVsYXRpdmUgdG8gYWJzb2x1dGUgcG9zaXRpb24gbWludXMgdGhlIGFjdHVhbCBwb3NpdGlvbiBjYWxjdWxhdGlvbiAtIG9ubHkgdXNlZCBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBoZWxwZXIKCQl9KTsKCgkJLy9HZW5lcmF0ZSB0aGUgb3JpZ2luYWwgcG9zaXRpb24KCQl0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihldmVudCk7CgkJdGhpcy5vcmlnaW5hbFBhZ2VYID0gZXZlbnQucGFnZVg7CgkJdGhpcy5vcmlnaW5hbFBhZ2VZID0gZXZlbnQucGFnZVk7CgoJCS8vQWRqdXN0IHRoZSBtb3VzZSBvZmZzZXQgcmVsYXRpdmUgdG8gdGhlIGhlbHBlciBpZiAnY3Vyc29yQXQnIGlzIHN1cHBsaWVkCgkJKG8uY3Vyc29yQXQgJiYgdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcihvLmN1cnNvckF0KSk7CgoJCS8vU2V0IGEgY29udGFpbm1lbnQgaWYgZ2l2ZW4gaW4gdGhlIG9wdGlvbnMKCQlpZihvLmNvbnRhaW5tZW50KQoJCQl0aGlzLl9zZXRDb250YWlubWVudCgpOwoKCQkvL1RyaWdnZXIgZXZlbnQgKyBjYWxsYmFja3MKCQlpZih0aGlzLl90cmlnZ2VyKCJzdGFydCIsIGV2ZW50KSA9PT0gZmFsc2UpIHsKCQkJdGhpcy5fY2xlYXIoKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy9SZWNhY2hlIHRoZSBoZWxwZXIgc2l6ZQoJCXRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTsKCgkJLy9QcmVwYXJlIHRoZSBkcm9wcGFibGUgb2Zmc2V0cwoJCWlmICgkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyKQoJCQkkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyh0aGlzLCBldmVudCk7CgoKCQl0aGlzLl9tb3VzZURyYWcoZXZlbnQsIHRydWUpOyAvL0V4ZWN1dGUgdGhlIGRyYWcgb25jZSAtIHRoaXMgY2F1c2VzIHRoZSBoZWxwZXIgbm90IHRvIGJlIHZpc2libGUgYmVmb3JlIGdldHRpbmcgaXRzIGNvcnJlY3QgcG9zaXRpb24KCgkJLy9JZiB0aGUgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciB0aGF0IGRyYWdnaW5nIGhhcyBzdGFydGVkIChzZWUgIzUwMDMpCgkJaWYgKCAkLnVpLmRkbWFuYWdlciApICQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCh0aGlzLCBldmVudCk7CgoJCXJldHVybiB0cnVlOwoJfSwKCglfbW91c2VEcmFnOiBmdW5jdGlvbihldmVudCwgbm9Qcm9wYWdhdGlvbikgewoKCQkvL0NvbXB1dGUgdGhlIGhlbHBlcnMgcG9zaXRpb24KCQl0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihldmVudCk7CgkJdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCJhYnNvbHV0ZSIpOwoKCQkvL0NhbGwgcGx1Z2lucyBhbmQgY2FsbGJhY2tzIGFuZCB1c2UgdGhlIHJlc3VsdGluZyBwb3NpdGlvbiBpZiBzb21ldGhpbmcgaXMgcmV0dXJuZWQKCQlpZiAoIW5vUHJvcGFnYXRpb24pIHsKCQkJdmFyIHVpID0gdGhpcy5fdWlIYXNoKCk7CgkJCWlmKHRoaXMuX3RyaWdnZXIoJ2RyYWcnLCBldmVudCwgdWkpID09PSBmYWxzZSkgewoJCQkJdGhpcy5fbW91c2VVcCh7fSk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJdGhpcy5wb3NpdGlvbiA9IHVpLnBvc2l0aW9uOwoJCX0KCgkJaWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9ICJ5IikgdGhpcy5oZWxwZXJbMF0uc3R5bGUubGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCsncHgnOwoJCWlmKCF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPSAieCIpIHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wKydweCc7CgkJaWYoJC51aS5kZG1hbmFnZXIpICQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcywgZXZlbnQpOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9tb3VzZVN0b3A6IGZ1bmN0aW9uKGV2ZW50KSB7CgoJCS8vSWYgd2UgYXJlIHVzaW5nIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciBhYm91dCB0aGUgZHJvcAoJCXZhciBkcm9wcGVkID0gZmFsc2U7CgkJaWYgKCQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91cikKCQkJZHJvcHBlZCA9ICQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcywgZXZlbnQpOwoKCQkvL2lmIGEgZHJvcCBjb21lcyBmcm9tIG91dHNpZGUgKGEgc29ydGFibGUpCgkJaWYodGhpcy5kcm9wcGVkKSB7CgkJCWRyb3BwZWQgPSB0aGlzLmRyb3BwZWQ7CgkJCXRoaXMuZHJvcHBlZCA9IGZhbHNlOwoJCX0KCgkJLy9pZiB0aGUgb3JpZ2luYWwgZWxlbWVudCBpcyBubyBsb25nZXIgaW4gdGhlIERPTSBkb24ndCBib3RoZXIgdG8gY29udGludWUgKHNlZSAjODI2OSkKCQl2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudFswXSwgZWxlbWVudEluRG9tID0gZmFsc2U7CgkJd2hpbGUgKCBlbGVtZW50ICYmIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSApIHsKCQkJaWYgKGVsZW1lbnQgPT0gZG9jdW1lbnQgKSB7CgkJCQllbGVtZW50SW5Eb20gPSB0cnVlOwoJCQl9CgkJfQoJCWlmICggIWVsZW1lbnRJbkRvbSAmJiB0aGlzLm9wdGlvbnMuaGVscGVyID09PSAib3JpZ2luYWwiICkKCQkJcmV0dXJuIGZhbHNlOwoKCQlpZigodGhpcy5vcHRpb25zLnJldmVydCA9PSAiaW52YWxpZCIgJiYgIWRyb3BwZWQpIHx8ICh0aGlzLm9wdGlvbnMucmV2ZXJ0ID09ICJ2YWxpZCIgJiYgZHJvcHBlZCkgfHwgdGhpcy5vcHRpb25zLnJldmVydCA9PT0gdHJ1ZSB8fCAoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5yZXZlcnQpICYmIHRoaXMub3B0aW9ucy5yZXZlcnQuY2FsbCh0aGlzLmVsZW1lbnQsIGRyb3BwZWQpKSkgewoJCQl2YXIgdGhhdCA9IHRoaXM7CgkJCSQodGhpcy5oZWxwZXIpLmFuaW1hdGUodGhpcy5vcmlnaW5hbFBvc2l0aW9uLCBwYXJzZUludCh0aGlzLm9wdGlvbnMucmV2ZXJ0RHVyYXRpb24sIDEwKSwgZnVuY3Rpb24oKSB7CgkJCQlpZih0aGF0Ll90cmlnZ2VyKCJzdG9wIiwgZXZlbnQpICE9PSBmYWxzZSkgewoJCQkJCXRoYXQuX2NsZWFyKCk7CgkJCQl9CgkJCX0pOwoJCX0gZWxzZSB7CgkJCWlmKHRoaXMuX3RyaWdnZXIoInN0b3AiLCBldmVudCkgIT09IGZhbHNlKSB7CgkJCQl0aGlzLl9jbGVhcigpOwoJCQl9CgkJfQoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9tb3VzZVVwOiBmdW5jdGlvbihldmVudCkgewoJCS8vUmVtb3ZlIGZyYW1lIGhlbHBlcnMKCQkkKCJkaXYudWktZHJhZ2dhYmxlLWlmcmFtZUZpeCIpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTsKCQl9KTsKCgkJLy9JZiB0aGUgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciB0aGF0IGRyYWdnaW5nIGhhcyBzdG9wcGVkIChzZWUgIzUwMDMpCgkJaWYoICQudWkuZGRtYW5hZ2VyICkgJC51aS5kZG1hbmFnZXIuZHJhZ1N0b3AodGhpcywgZXZlbnQpOwoKCQlyZXR1cm4gJC51aS5tb3VzZS5wcm90b3R5cGUuX21vdXNlVXAuY2FsbCh0aGlzLCBldmVudCk7Cgl9LAoKCWNhbmNlbDogZnVuY3Rpb24oKSB7CgoJCWlmKHRoaXMuaGVscGVyLmlzKCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nIikpIHsKCQkJdGhpcy5fbW91c2VVcCh7fSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5fY2xlYXIoKTsKCQl9CgoJCXJldHVybiB0aGlzOwoKCX0sCgoJX2dldEhhbmRsZTogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIGhhbmRsZSA9ICF0aGlzLm9wdGlvbnMuaGFuZGxlIHx8ICEkKHRoaXMub3B0aW9ucy5oYW5kbGUsIHRoaXMuZWxlbWVudCkubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlOwoJCSQodGhpcy5vcHRpb25zLmhhbmRsZSwgdGhpcy5lbGVtZW50KQoJCQkuZmluZCgiKiIpCgkJCS5hbmRTZWxmKCkKCQkJLmVhY2goZnVuY3Rpb24oKSB7CgkJCQlpZih0aGlzID09IGV2ZW50LnRhcmdldCkgaGFuZGxlID0gdHJ1ZTsKCQkJfSk7CgoJCXJldHVybiBoYW5kbGU7CgoJfSwKCglfY3JlYXRlSGVscGVyOiBmdW5jdGlvbihldmVudCkgewoKCQl2YXIgbyA9IHRoaXMub3B0aW9uczsKCQl2YXIgaGVscGVyID0gJC5pc0Z1bmN0aW9uKG8uaGVscGVyKSA/ICQoby5oZWxwZXIuYXBwbHkodGhpcy5lbGVtZW50WzBdLCBbZXZlbnRdKSkgOiAoby5oZWxwZXIgPT0gJ2Nsb25lJyA/IHRoaXMuZWxlbWVudC5jbG9uZSgpLnJlbW92ZUF0dHIoJ2lkJykgOiB0aGlzLmVsZW1lbnQpOwoKCQlpZighaGVscGVyLnBhcmVudHMoJ2JvZHknKS5sZW5ndGgpCgkJCWhlbHBlci5hcHBlbmRUbygoby5hcHBlbmRUbyA9PSAncGFyZW50JyA/IHRoaXMuZWxlbWVudFswXS5wYXJlbnROb2RlIDogby5hcHBlbmRUbykpOwoKCQlpZihoZWxwZXJbMF0gIT0gdGhpcy5lbGVtZW50WzBdICYmICEoLyhmaXhlZHxhYnNvbHV0ZSkvKS50ZXN0KGhlbHBlci5jc3MoInBvc2l0aW9uIikpKQoJCQloZWxwZXIuY3NzKCJwb3NpdGlvbiIsICJhYnNvbHV0ZSIpOwoKCQlyZXR1cm4gaGVscGVyOwoKCX0sCgoJX2FkanVzdE9mZnNldEZyb21IZWxwZXI6IGZ1bmN0aW9uKG9iaikgewoJCWlmICh0eXBlb2Ygb2JqID09ICdzdHJpbmcnKSB7CgkJCW9iaiA9IG9iai5zcGxpdCgnICcpOwoJCX0KCQlpZiAoJC5pc0FycmF5KG9iaikpIHsKCQkJb2JqID0ge2xlZnQ6ICtvYmpbMF0sIHRvcDogK29ialsxXSB8fCAwfTsKCQl9CgkJaWYgKCdsZWZ0JyBpbiBvYmopIHsKCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7CgkJfQoJCWlmICgncmlnaHQnIGluIG9iaikgewoJCQl0aGlzLm9mZnNldC5jbGljay5sZWZ0ID0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIG9iai5yaWdodCArIHRoaXMubWFyZ2lucy5sZWZ0OwoJCX0KCQlpZiAoJ3RvcCcgaW4gb2JqKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IG9iai50b3AgKyB0aGlzLm1hcmdpbnMudG9wOwoJCX0KCQlpZiAoJ2JvdHRvbScgaW4gb2JqKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7CgkJfQoJfSwKCglfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHsKCgkJLy9HZXQgdGhlIG9mZnNldFBhcmVudCBhbmQgY2FjaGUgaXRzIHBvc2l0aW9uCgkJdGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTsKCQl2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTsKCgkJLy8gVGhpcyBpcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSB3ZSBuZWVkIHRvIG1vZGlmeSBhIG9mZnNldCBjYWxjdWxhdGVkIG9uIHN0YXJ0LCBzaW5jZSB0aGUgZm9sbG93aW5nIGhhcHBlbmVkOgoJCS8vIDEuIFRoZSBwb3NpdGlvbiBvZiB0aGUgaGVscGVyIGlzIGFic29sdXRlLCBzbyBpdCdzIHBvc2l0aW9uIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIG5leHQgcG9zaXRpb25lZCBwYXJlbnQKCQkvLyAyLiBUaGUgYWN0dWFsIG9mZnNldCBwYXJlbnQgaXMgYSBjaGlsZCBvZiB0aGUgc2Nyb2xsIHBhcmVudCwgYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzbid0IHRoZSBkb2N1bWVudCwgd2hpY2ggbWVhbnMgdGhhdAoJCS8vICAgIHRoZSBzY3JvbGwgaXMgaW5jbHVkZWQgaW4gdGhlIGluaXRpYWwgY2FsY3VsYXRpb24gb2YgdGhlIG9mZnNldCBvZiB0aGUgcGFyZW50LCBhbmQgbmV2ZXIgcmVjYWxjdWxhdGVkIHVwb24gZHJhZwoJCWlmKHRoaXMuY3NzUG9zaXRpb24gPT0gJ2Fic29sdXRlJyAmJiB0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpIHsKCQkJcG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7CgkJCXBvLnRvcCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKTsKCQl9CgoJCWlmKCh0aGlzLm9mZnNldFBhcmVudFswXSA9PSBkb2N1bWVudC5ib2R5KSAvL1RoaXMgbmVlZHMgdG8gYmUgYWN0dWFsbHkgZG9uZSBmb3IgYWxsIGJyb3dzZXJzLCBzaW5jZSBwYWdlWC9wYWdlWSBpbmNsdWRlcyB0aGlzIGluZm9ybWF0aW9uCgkJfHwgKHRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUgJiYgdGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdodG1sJyAmJiAkLnVpLmllKSkgLy9VZ2x5IElFIGZpeAoJCQlwbyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07CgoJCXJldHVybiB7CgkJCXRvcDogcG8udG9wICsgKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCkgfHwgMCksCgkJCWxlZnQ6IHBvLmxlZnQgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCkgfHwgMCkKCQl9OwoKCX0sCgoJX2dldFJlbGF0aXZlT2Zmc2V0OiBmdW5jdGlvbigpIHsKCgkJaWYodGhpcy5jc3NQb3NpdGlvbiA9PSAicmVsYXRpdmUiKSB7CgkJCXZhciBwID0gdGhpcy5lbGVtZW50LnBvc2l0aW9uKCk7CgkJCXJldHVybiB7CgkJCQl0b3A6IHAudG9wIC0gKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcygidG9wIiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksCgkJCQlsZWZ0OiBwLmxlZnQgLSAocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCJsZWZ0IiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpCgkJCX07CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07CgkJfQoKCX0sCgoJX2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7CgkJdGhpcy5tYXJnaW5zID0gewoJCQlsZWZ0OiAocGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygibWFyZ2luTGVmdCIpLDEwKSB8fCAwKSwKCQkJdG9wOiAocGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygibWFyZ2luVG9wIiksMTApIHx8IDApLAoJCQlyaWdodDogKHBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoIm1hcmdpblJpZ2h0IiksMTApIHx8IDApLAoJCQlib3R0b206IChwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKCJtYXJnaW5Cb3R0b20iKSwxMCkgfHwgMCkKCQl9OwoJfSwKCglfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczogZnVuY3Rpb24oKSB7CgkJdGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHsKCQkJd2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSwKCQkJaGVpZ2h0OiB0aGlzLmhlbHBlci5vdXRlckhlaWdodCgpCgkJfTsKCX0sCgoJX3NldENvbnRhaW5tZW50OiBmdW5jdGlvbigpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgkJaWYoby5jb250YWlubWVudCA9PSAncGFyZW50Jykgby5jb250YWlubWVudCA9IHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGU7CgkJaWYoby5jb250YWlubWVudCA9PSAnZG9jdW1lbnQnIHx8IG8uY29udGFpbm1lbnQgPT0gJ3dpbmRvdycpIHRoaXMuY29udGFpbm1lbnQgPSBbCgkJCW8uY29udGFpbm1lbnQgPT0gJ2RvY3VtZW50JyA/IDAgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LAoJCQlvLmNvbnRhaW5tZW50ID09ICdkb2N1bWVudCcgPyAwIDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCwKCQkJKG8uY29udGFpbm1lbnQgPT0gJ2RvY3VtZW50JyA/IDAgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpKSArICQoby5jb250YWlubWVudCA9PSAnZG9jdW1lbnQnID8gZG9jdW1lbnQgOiB3aW5kb3cpLndpZHRoKCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsCgkJCShvLmNvbnRhaW5tZW50ID09ICdkb2N1bWVudCcgPyAwIDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSArICgkKG8uY29udGFpbm1lbnQgPT0gJ2RvY3VtZW50JyA/IGRvY3VtZW50IDogd2luZG93KS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcAoJCV07CgoJCWlmKCEoL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLykudGVzdChvLmNvbnRhaW5tZW50KSAmJiBvLmNvbnRhaW5tZW50LmNvbnN0cnVjdG9yICE9IEFycmF5KSB7CgkJCXZhciBjID0gJChvLmNvbnRhaW5tZW50KTsKCQkJdmFyIGNlID0gY1swXTsgaWYoIWNlKSByZXR1cm47CgkJCXZhciBjbyA9IGMub2Zmc2V0KCk7CgkJCXZhciBvdmVyID0gKCQoY2UpLmNzcygib3ZlcmZsb3ciKSAhPSAnaGlkZGVuJyk7CgoJCQl0aGlzLmNvbnRhaW5tZW50ID0gWwoJCQkJKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApIHx8IDApICsgKHBhcnNlSW50KCQoY2UpLmNzcygicGFkZGluZ0xlZnQiKSwxMCkgfHwgMCksCgkJCQkocGFyc2VJbnQoJChjZSkuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKSB8fCAwKSArIChwYXJzZUludCgkKGNlKS5jc3MoInBhZGRpbmdUb3AiKSwxMCkgfHwgMCksCgkJCQkob3ZlciA/IE1hdGgubWF4KGNlLnNjcm9sbFdpZHRoLGNlLm9mZnNldFdpZHRoKSA6IGNlLm9mZnNldFdpZHRoKSAtIChwYXJzZUludCgkKGNlKS5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKSB8fCAwKSAtIChwYXJzZUludCgkKGNlKS5jc3MoInBhZGRpbmdSaWdodCIpLDEwKSB8fCAwKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCAtIHRoaXMubWFyZ2lucy5yaWdodCwKCQkJCShvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsSGVpZ2h0LGNlLm9mZnNldEhlaWdodCkgOiBjZS5vZmZzZXRIZWlnaHQpIC0gKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCkgfHwgMCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKCJwYWRkaW5nQm90dG9tIiksMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wICAtIHRoaXMubWFyZ2lucy5ib3R0b20KCQkJXTsKCQkJdGhpcy5yZWxhdGl2ZV9jb250YWluZXIgPSBjOwoKCQl9IGVsc2UgaWYoby5jb250YWlubWVudC5jb25zdHJ1Y3RvciA9PSBBcnJheSkgewoJCQl0aGlzLmNvbnRhaW5tZW50ID0gby5jb250YWlubWVudDsKCQl9CgoJfSwKCglfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKGQsIHBvcykgewoKCQlpZighcG9zKSBwb3MgPSB0aGlzLnBvc2l0aW9uOwoJCXZhciBtb2QgPSBkID09ICJhYnNvbHV0ZSIgPyAxIDogLTE7CgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIHNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT0gJ2Fic29sdXRlJyAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgPyB0aGlzLm9mZnNldFBhcmVudCA6IHRoaXMuc2Nyb2xsUGFyZW50LCBzY3JvbGxJc1Jvb3ROb2RlID0gKC8oaHRtbHxib2R5KS9pKS50ZXN0KHNjcm9sbFswXS50YWdOYW1lKTsKCgkJcmV0dXJuIHsKCQkJdG9wOiAoCgkJCQlwb3MudG9wCQkJCQkJCQkJCQkJCQkJCQkvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb24KCQkJCSsgdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbW9kCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJKyB0aGlzLm9mZnNldC5wYXJlbnQudG9wICogbW9kCQkJCQkJCQkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJLSAoICggdGhpcy5jc3NQb3NpdGlvbiA9PSAnZml4ZWQnID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkgKiBtb2QpCgkJCSksCgkJCWxlZnQ6ICgKCQkJCXBvcy5sZWZ0CQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJKyB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJKyB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAqIG1vZAkJCQkJCQkJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCS0gKCAoIHRoaXMuY3NzUG9zaXRpb24gPT0gJ2ZpeGVkJyA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxMZWZ0KCkgKSAqIG1vZCkKCQkJKQoJCX07CgoJfSwKCglfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIHNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT0gJ2Fic29sdXRlJyAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgPyB0aGlzLm9mZnNldFBhcmVudCA6IHRoaXMuc2Nyb2xsUGFyZW50LCBzY3JvbGxJc1Jvb3ROb2RlID0gKC8oaHRtbHxib2R5KS9pKS50ZXN0KHNjcm9sbFswXS50YWdOYW1lKTsKCQl2YXIgcGFnZVggPSBldmVudC5wYWdlWDsKCQl2YXIgcGFnZVkgPSBldmVudC5wYWdlWTsKCgkJLyoKCQkgKiAtIFBvc2l0aW9uIGNvbnN0cmFpbmluZyAtCgkJICogQ29uc3RyYWluIHRoZSBwb3NpdGlvbiB0byBhIG1peCBvZiBncmlkLCBjb250YWlubWVudC4KCQkgKi8KCgkJaWYodGhpcy5vcmlnaW5hbFBvc2l0aW9uKSB7IC8vSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zCgkJCXZhciBjb250YWlubWVudDsKCQkJaWYodGhpcy5jb250YWlubWVudCkgewoJCQlpZiAodGhpcy5yZWxhdGl2ZV9jb250YWluZXIpewoJCQkJdmFyIGNvID0gdGhpcy5yZWxhdGl2ZV9jb250YWluZXIub2Zmc2V0KCk7CgkJCQljb250YWlubWVudCA9IFsgdGhpcy5jb250YWlubWVudFswXSArIGNvLmxlZnQsCgkJCQkJdGhpcy5jb250YWlubWVudFsxXSArIGNvLnRvcCwKCQkJCQl0aGlzLmNvbnRhaW5tZW50WzJdICsgY28ubGVmdCwKCQkJCQl0aGlzLmNvbnRhaW5tZW50WzNdICsgY28udG9wIF07CgkJCX0KCQkJZWxzZSB7CgkJCQljb250YWlubWVudCA9IHRoaXMuY29udGFpbm1lbnQ7CgkJCX0KCgkJCQlpZihldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCBjb250YWlubWVudFswXSkgcGFnZVggPSBjb250YWlubWVudFswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCQlpZihldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA8IGNvbnRhaW5tZW50WzFdKSBwYWdlWSA9IGNvbnRhaW5tZW50WzFdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wOwoJCQkJaWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbMl0pIHBhZ2VYID0gY29udGFpbm1lbnRbMl0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0OwoJCQkJaWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBjb250YWlubWVudFszXSkgcGFnZVkgPSBjb250YWlubWVudFszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcDsKCQkJfQoKCQkJaWYoby5ncmlkKSB7CgkJCQkvL0NoZWNrIGZvciBncmlkIGVsZW1lbnRzIHNldCB0byAwIHRvIHByZXZlbnQgZGl2aWRlIGJ5IDAgZXJyb3IgY2F1c2luZyBpbnZhbGlkIGFyZ3VtZW50IGVycm9ycyBpbiBJRSAoc2VlIHRpY2tldCAjNjk1MCkKCQkJCXZhciB0b3AgPSBvLmdyaWRbMV0gPyB0aGlzLm9yaWdpbmFsUGFnZVkgKyBNYXRoLnJvdW5kKChwYWdlWSAtIHRoaXMub3JpZ2luYWxQYWdlWSkgLyBvLmdyaWRbMV0pICogby5ncmlkWzFdIDogdGhpcy5vcmlnaW5hbFBhZ2VZOwoJCQkJcGFnZVkgPSBjb250YWlubWVudCA/ICghKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA8IGNvbnRhaW5tZW50WzFdIHx8IHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IGNvbnRhaW5tZW50WzNdKSA/IHRvcCA6ICghKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA8IGNvbnRhaW5tZW50WzFdKSA/IHRvcCAtIG8uZ3JpZFsxXSA6IHRvcCArIG8uZ3JpZFsxXSkpIDogdG9wOwoKCQkJCXZhciBsZWZ0ID0gby5ncmlkWzBdID8gdGhpcy5vcmlnaW5hbFBhZ2VYICsgTWF0aC5yb3VuZCgocGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gby5ncmlkWzBdKSAqIG8uZ3JpZFswXSA6IHRoaXMub3JpZ2luYWxQYWdlWDsKCQkJCXBhZ2VYID0gY29udGFpbm1lbnQgPyAoIShsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IGNvbnRhaW5tZW50WzBdIHx8IGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbMl0pID8gbGVmdCA6ICghKGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDwgY29udGFpbm1lbnRbMF0pID8gbGVmdCAtIG8uZ3JpZFswXSA6IGxlZnQgKyBvLmdyaWRbMF0pKSA6IGxlZnQ7CgkJCX0KCgkJfQoKCQlyZXR1cm4gewoJCQl0b3A6ICgKCQkJCXBhZ2VZCQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJLSB0aGlzLm9mZnNldC5jbGljay50b3AJCQkJCQkJCQkJCQkJLy8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudCkKCQkJCS0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wCQkJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQktIHRoaXMub2Zmc2V0LnBhcmVudC50b3AJCQkJCQkJCQkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJKyAoICggdGhpcy5jc3NQb3NpdGlvbiA9PSAnZml4ZWQnID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkpCgkJCSksCgkJCWxlZnQ6ICgKCQkJCXBhZ2VYCQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0CQkJCQkJCQkJCQkJLy8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudCkKCQkJCS0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdAkJCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdAkJCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkrICggKCB0aGlzLmNzc1Bvc2l0aW9uID09ICdmaXhlZCcgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkpCgkJCSkKCQl9OwoKCX0sCgoJX2NsZWFyOiBmdW5jdGlvbigpIHsKCQl0aGlzLmhlbHBlci5yZW1vdmVDbGFzcygidWktZHJhZ2dhYmxlLWRyYWdnaW5nIik7CgkJaWYodGhpcy5oZWxwZXJbMF0gIT0gdGhpcy5lbGVtZW50WzBdICYmICF0aGlzLmNhbmNlbEhlbHBlclJlbW92YWwpIHRoaXMuaGVscGVyLnJlbW92ZSgpOwoJCS8vaWYoJC51aS5kZG1hbmFnZXIpICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQgPSBudWxsOwoJCXRoaXMuaGVscGVyID0gbnVsbDsKCQl0aGlzLmNhbmNlbEhlbHBlclJlbW92YWwgPSBmYWxzZTsKCX0sCgoJLy8gRnJvbSBub3cgb24gYnVsayBzdHVmZiAtIG1haW5seSBoZWxwZXJzCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCB1aSkgewoJCXVpID0gdWkgfHwgdGhpcy5fdWlIYXNoKCk7CgkJJC51aS5wbHVnaW4uY2FsbCh0aGlzLCB0eXBlLCBbZXZlbnQsIHVpXSk7CgkJaWYodHlwZSA9PSAiZHJhZyIpIHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKTsgLy9UaGUgYWJzb2x1dGUgcG9zaXRpb24gaGFzIHRvIGJlIHJlY2FsY3VsYXRlZCBhZnRlciBwbHVnaW5zCgkJcmV0dXJuICQuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5jYWxsKHRoaXMsIHR5cGUsIGV2ZW50LCB1aSk7Cgl9LAoKCXBsdWdpbnM6IHt9LAoKCV91aUhhc2g6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJcmV0dXJuIHsKCQkJaGVscGVyOiB0aGlzLmhlbHBlciwKCQkJcG9zaXRpb246IHRoaXMucG9zaXRpb24sCgkJCW9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbiwKCQkJb2Zmc2V0OiB0aGlzLnBvc2l0aW9uQWJzCgkJfTsKCX0KCn0pOwoKJC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCAiY29ubmVjdFRvU29ydGFibGUiLCB7CglzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgoJCXZhciBpbnN0ID0gJCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKSwgbyA9IGluc3Qub3B0aW9ucywKCQkJdWlTb3J0YWJsZSA9ICQuZXh0ZW5kKHt9LCB1aSwgeyBpdGVtOiBpbnN0LmVsZW1lbnQgfSk7CgkJaW5zdC5zb3J0YWJsZXMgPSBbXTsKCQkkKG8uY29ubmVjdFRvU29ydGFibGUpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBzb3J0YWJsZSA9ICQuZGF0YSh0aGlzLCAnc29ydGFibGUnKTsKCQkJaWYgKHNvcnRhYmxlICYmICFzb3J0YWJsZS5vcHRpb25zLmRpc2FibGVkKSB7CgkJCQlpbnN0LnNvcnRhYmxlcy5wdXNoKHsKCQkJCQlpbnN0YW5jZTogc29ydGFibGUsCgkJCQkJc2hvdWxkUmV2ZXJ0OiBzb3J0YWJsZS5vcHRpb25zLnJldmVydAoJCQkJfSk7CgkJCQlzb3J0YWJsZS5yZWZyZXNoUG9zaXRpb25zKCk7CS8vIENhbGwgdGhlIHNvcnRhYmxlJ3MgcmVmcmVzaFBvc2l0aW9ucyBhdCBkcmFnIHN0YXJ0IHRvIHJlZnJlc2ggdGhlIGNvbnRhaW5lckNhY2hlIHNpbmNlIHRoZSBzb3J0YWJsZSBjb250YWluZXIgY2FjaGUgaXMgdXNlZCBpbiBkcmFnIGFuZCBuZWVkcyB0byBiZSB1cCB0byBkYXRlICh0aGlzIHdpbGwgZW5zdXJlIGl0J3MgaW5pdGlhbGlzZWQgYXMgd2VsbCBhcyBiZWluZyBrZXB0IGluIHN0ZXAgd2l0aCBhbnkgY2hhbmdlcyB0aGF0IG1pZ2h0IGhhdmUgaGFwcGVuZWQgb24gdGhlIHBhZ2UpLgoJCQkJc29ydGFibGUuX3RyaWdnZXIoImFjdGl2YXRlIiwgZXZlbnQsIHVpU29ydGFibGUpOwoJCQl9CgkJfSk7CgoJfSwKCXN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoKCQkvL0lmIHdlIGFyZSBzdGlsbCBvdmVyIHRoZSBzb3J0YWJsZSwgd2UgZmFrZSB0aGUgc3RvcCBldmVudCBvZiB0aGUgc29ydGFibGUsIGJ1dCBhbHNvIHJlbW92ZSBoZWxwZXIKCQl2YXIgaW5zdCA9ICQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksCgkJCXVpU29ydGFibGUgPSAkLmV4dGVuZCh7fSwgdWksIHsgaXRlbTogaW5zdC5lbGVtZW50IH0pOwoKCQkkLmVhY2goaW5zdC5zb3J0YWJsZXMsIGZ1bmN0aW9uKCkgewoJCQlpZih0aGlzLmluc3RhbmNlLmlzT3ZlcikgewoKCQkJCXRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMDsKCgkJCQlpbnN0LmNhbmNlbEhlbHBlclJlbW92YWwgPSB0cnVlOyAvL0Rvbid0IHJlbW92ZSB0aGUgaGVscGVyIGluIHRoZSBkcmFnZ2FibGUgaW5zdGFuY2UKCQkJCXRoaXMuaW5zdGFuY2UuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IGZhbHNlOyAvL1JlbW92ZSBpdCBpbiB0aGUgc29ydGFibGUgaW5zdGFuY2UgKHNvIHNvcnRhYmxlIHBsdWdpbnMgbGlrZSByZXZlcnQgc3RpbGwgd29yaykKCgkJCQkvL1RoZSBzb3J0YWJsZSByZXZlcnQgaXMgc3VwcG9ydGVkLCBhbmQgd2UgaGF2ZSB0byBzZXQgYSB0ZW1wb3JhcnkgZHJvcHBlZCB2YXJpYWJsZSBvbiB0aGUgZHJhZ2dhYmxlIHRvIHN1cHBvcnQgcmV2ZXJ0OiAndmFsaWQvaW52YWxpZCcKCQkJCWlmKHRoaXMuc2hvdWxkUmV2ZXJ0KSB0aGlzLmluc3RhbmNlLm9wdGlvbnMucmV2ZXJ0ID0gdHJ1ZTsKCgkJCQkvL1RyaWdnZXIgdGhlIHN0b3Agb2YgdGhlIHNvcnRhYmxlCgkJCQl0aGlzLmluc3RhbmNlLl9tb3VzZVN0b3AoZXZlbnQpOwoKCQkJCXRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oZWxwZXIgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMuX2hlbHBlcjsKCgkJCQkvL0lmIHRoZSBoZWxwZXIgaGFzIGJlZW4gdGhlIG9yaWdpbmFsIGl0ZW0sIHJlc3RvcmUgcHJvcGVydGllcyBpbiB0aGUgc29ydGFibGUKCQkJCWlmKGluc3Qub3B0aW9ucy5oZWxwZXIgPT0gJ29yaWdpbmFsJykKCQkJCQl0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtLmNzcyh7IHRvcDogJ2F1dG8nLCBsZWZ0OiAnYXV0bycgfSk7CgoJCQl9IGVsc2UgewoJCQkJdGhpcy5pbnN0YW5jZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7IC8vUmVtb3ZlIHRoZSBoZWxwZXIgaW4gdGhlIHNvcnRhYmxlIGluc3RhbmNlCgkJCQl0aGlzLmluc3RhbmNlLl90cmlnZ2VyKCJkZWFjdGl2YXRlIiwgZXZlbnQsIHVpU29ydGFibGUpOwoJCQl9CgoJCX0pOwoKCX0sCglkcmFnOiBmdW5jdGlvbihldmVudCwgdWkpIHsKCgkJdmFyIGluc3QgPSAkKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLCB0aGF0ID0gdGhpczsKCgkJdmFyIGNoZWNrUG9zID0gZnVuY3Rpb24obykgewoJCQl2YXIgZHlDbGljayA9IHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgZHhDbGljayA9IHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCXZhciBoZWxwZXJUb3AgPSB0aGlzLnBvc2l0aW9uQWJzLnRvcCwgaGVscGVyTGVmdCA9IHRoaXMucG9zaXRpb25BYnMubGVmdDsKCQkJdmFyIGl0ZW1IZWlnaHQgPSBvLmhlaWdodCwgaXRlbVdpZHRoID0gby53aWR0aDsKCQkJdmFyIGl0ZW1Ub3AgPSBvLnRvcCwgaXRlbUxlZnQgPSBvLmxlZnQ7CgoJCQlyZXR1cm4gJC51aS5pc092ZXIoaGVscGVyVG9wICsgZHlDbGljaywgaGVscGVyTGVmdCArIGR4Q2xpY2ssIGl0ZW1Ub3AsIGl0ZW1MZWZ0LCBpdGVtSGVpZ2h0LCBpdGVtV2lkdGgpOwoJCX07CgoJCSQuZWFjaChpbnN0LnNvcnRhYmxlcywgZnVuY3Rpb24oaSkgewoKCQkJdmFyIGlubmVybW9zdEludGVyc2VjdGluZyA9IGZhbHNlOwoJCQl2YXIgdGhpc1NvcnRhYmxlID0gdGhpczsKCQkJLy9Db3B5IG92ZXIgc29tZSB2YXJpYWJsZXMgdG8gYWxsb3cgY2FsbGluZyB0aGUgc29ydGFibGUncyBuYXRpdmUgX2ludGVyc2VjdHNXaXRoCgkJCXRoaXMuaW5zdGFuY2UucG9zaXRpb25BYnMgPSBpbnN0LnBvc2l0aW9uQWJzOwoJCQl0aGlzLmluc3RhbmNlLmhlbHBlclByb3BvcnRpb25zID0gaW5zdC5oZWxwZXJQcm9wb3J0aW9uczsKCQkJdGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sgPSBpbnN0Lm9mZnNldC5jbGljazsKCgkJCWlmKHRoaXMuaW5zdGFuY2UuX2ludGVyc2VjdHNXaXRoKHRoaXMuaW5zdGFuY2UuY29udGFpbmVyQ2FjaGUpKSB7CgkJCQlpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSB0cnVlOwoJCQkJJC5lYWNoKGluc3Quc29ydGFibGVzLCBmdW5jdGlvbiAoKSB7CgkJCQkJdGhpcy5pbnN0YW5jZS5wb3NpdGlvbkFicyA9IGluc3QucG9zaXRpb25BYnM7CgkJCQkJdGhpcy5pbnN0YW5jZS5oZWxwZXJQcm9wb3J0aW9ucyA9IGluc3QuaGVscGVyUHJvcG9ydGlvbnM7CgkJCQkJdGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sgPSBpbnN0Lm9mZnNldC5jbGljazsKCQkJCQlpZiAgKHRoaXMgIT0gdGhpc1NvcnRhYmxlCgkJCQkJCSYmIHRoaXMuaW5zdGFuY2UuX2ludGVyc2VjdHNXaXRoKHRoaXMuaW5zdGFuY2UuY29udGFpbmVyQ2FjaGUpCgkJCQkJCSYmICQudWkuY29udGFpbnModGhpc1NvcnRhYmxlLmluc3RhbmNlLmVsZW1lbnRbMF0sIHRoaXMuaW5zdGFuY2UuZWxlbWVudFswXSkpCgkJCQkJCWlubmVybW9zdEludGVyc2VjdGluZyA9IGZhbHNlOwoJCQkJCQlyZXR1cm4gaW5uZXJtb3N0SW50ZXJzZWN0aW5nOwoJCQkJfSk7CgkJCX0KCgoJCQlpZihpbm5lcm1vc3RJbnRlcnNlY3RpbmcpIHsKCQkJCS8vSWYgaXQgaW50ZXJzZWN0cywgd2UgdXNlIGEgbGl0dGxlIGlzT3ZlciB2YXJpYWJsZSBhbmQgc2V0IGl0IG9uY2UsIHNvIG91ciBtb3ZlLWluIHN0dWZmIGdldHMgZmlyZWQgb25seSBvbmNlCgkJCQlpZighdGhpcy5pbnN0YW5jZS5pc092ZXIpIHsKCgkJCQkJdGhpcy5pbnN0YW5jZS5pc092ZXIgPSAxOwoJCQkJCS8vTm93IHdlIGZha2UgdGhlIHN0YXJ0IG9mIGRyYWdnaW5nIGZvciB0aGUgc29ydGFibGUgaW5zdGFuY2UsCgkJCQkJLy9ieSBjbG9uaW5nIHRoZSBsaXN0IGdyb3VwIGl0ZW0sIGFwcGVuZGluZyBpdCB0byB0aGUgc29ydGFibGUgYW5kIHVzaW5nIGl0IGFzIGluc3QuY3VycmVudEl0ZW0KCQkJCQkvL1dlIGNhbiB0aGVuIGZpcmUgdGhlIHN0YXJ0IGV2ZW50IG9mIHRoZSBzb3J0YWJsZSB3aXRoIG91ciBwYXNzZWQgYnJvd3NlciBldmVudCwgYW5kIG91ciBvd24gaGVscGVyIChzbyBpdCBkb2Vzbid0IGNyZWF0ZSBhIG5ldyBvbmUpCgkJCQkJdGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbSA9ICQodGhhdCkuY2xvbmUoKS5yZW1vdmVBdHRyKCdpZCcpLmFwcGVuZFRvKHRoaXMuaW5zdGFuY2UuZWxlbWVudCkuZGF0YSgic29ydGFibGUtaXRlbSIsIHRydWUpOwoJCQkJCXRoaXMuaW5zdGFuY2Uub3B0aW9ucy5faGVscGVyID0gdGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlcjsgLy9TdG9yZSBoZWxwZXIgb3B0aW9uIHRvIGxhdGVyIHJlc3RvcmUgaXQKCQkJCQl0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGVscGVyID0gZnVuY3Rpb24oKSB7IHJldHVybiB1aS5oZWxwZXJbMF07IH07CgoJCQkJCWV2ZW50LnRhcmdldCA9IHRoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW1bMF07CgkJCQkJdGhpcy5pbnN0YW5jZS5fbW91c2VDYXB0dXJlKGV2ZW50LCB0cnVlKTsKCQkJCQl0aGlzLmluc3RhbmNlLl9tb3VzZVN0YXJ0KGV2ZW50LCB0cnVlLCB0cnVlKTsKCgkJCQkJLy9CZWNhdXNlIHRoZSBicm93c2VyIGV2ZW50IGlzIHdheSBvZmYgdGhlIG5ldyBhcHBlbmRlZCBwb3J0bGV0LCB3ZSBtb2RpZnkgYSBjb3VwbGUgb2YgdmFyaWFibGVzIHRvIHJlZmxlY3QgdGhlIGNoYW5nZXMKCQkJCQl0aGlzLmluc3RhbmNlLm9mZnNldC5jbGljay50b3AgPSBpbnN0Lm9mZnNldC5jbGljay50b3A7CgkJCQkJdGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2subGVmdCA9IGluc3Qub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCQkJdGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LmxlZnQgLT0gaW5zdC5vZmZzZXQucGFyZW50LmxlZnQgLSB0aGlzLmluc3RhbmNlLm9mZnNldC5wYXJlbnQubGVmdDsKCQkJCQl0aGlzLmluc3RhbmNlLm9mZnNldC5wYXJlbnQudG9wIC09IGluc3Qub2Zmc2V0LnBhcmVudC50b3AgLSB0aGlzLmluc3RhbmNlLm9mZnNldC5wYXJlbnQudG9wOwoKCQkJCQlpbnN0Ll90cmlnZ2VyKCJ0b1NvcnRhYmxlIiwgZXZlbnQpOwoJCQkJCWluc3QuZHJvcHBlZCA9IHRoaXMuaW5zdGFuY2UuZWxlbWVudDsgLy9kcmFnZ2FibGUgcmV2ZXJ0IG5lZWRzIHRoYXQKCQkJCQkvL2hhY2sgc28gcmVjZWl2ZS91cGRhdGUgY2FsbGJhY2tzIHdvcmsgKG1vc3RseSkKCQkJCQlpbnN0LmN1cnJlbnRJdGVtID0gaW5zdC5lbGVtZW50OwoJCQkJCXRoaXMuaW5zdGFuY2UuZnJvbU91dHNpZGUgPSBpbnN0OwoKCQkJCX0KCgkJCQkvL1Byb3ZpZGVkIHdlIGRpZCBhbGwgdGhlIHByZXZpb3VzIHN0ZXBzLCB3ZSBjYW4gZmlyZSB0aGUgZHJhZyBldmVudCBvZiB0aGUgc29ydGFibGUgb24gZXZlcnkgZHJhZ2dhYmxlIGRyYWcsIHdoZW4gaXQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzb3J0YWJsZQoJCQkJaWYodGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbSkgdGhpcy5pbnN0YW5jZS5fbW91c2VEcmFnKGV2ZW50KTsKCgkJCX0gZWxzZSB7CgoJCQkJLy9JZiBpdCBkb2Vzbid0IGludGVyc2VjdCB3aXRoIHRoZSBzb3J0YWJsZSwgYW5kIGl0IGludGVyc2VjdGVkIGJlZm9yZSwKCQkJCS8vd2UgZmFrZSB0aGUgZHJhZyBzdG9wIG9mIHRoZSBzb3J0YWJsZSwgYnV0IG1ha2Ugc3VyZSBpdCBkb2Vzbid0IHJlbW92ZSB0aGUgaGVscGVyIGJ5IHVzaW5nIGNhbmNlbEhlbHBlclJlbW92YWwKCQkJCWlmKHRoaXMuaW5zdGFuY2UuaXNPdmVyKSB7CgoJCQkJCXRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMDsKCQkJCQl0aGlzLmluc3RhbmNlLmNhbmNlbEhlbHBlclJlbW92YWwgPSB0cnVlOwoKCQkJCQkvL1ByZXZlbnQgcmV2ZXJ0aW5nIG9uIHRoaXMgZm9yY2VkIHN0b3AKCQkJCQl0aGlzLmluc3RhbmNlLm9wdGlvbnMucmV2ZXJ0ID0gZmFsc2U7CgoJCQkJCS8vIFRoZSBvdXQgZXZlbnQgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGluZGVwZW5kZW50bHkKCQkJCQl0aGlzLmluc3RhbmNlLl90cmlnZ2VyKCdvdXQnLCBldmVudCwgdGhpcy5pbnN0YW5jZS5fdWlIYXNoKHRoaXMuaW5zdGFuY2UpKTsKCgkJCQkJdGhpcy5pbnN0YW5jZS5fbW91c2VTdG9wKGV2ZW50LCB0cnVlKTsKCQkJCQl0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGVscGVyID0gdGhpcy5pbnN0YW5jZS5vcHRpb25zLl9oZWxwZXI7CgoJCQkJCS8vTm93IHdlIHJlbW92ZSBvdXIgY3VycmVudEl0ZW0sIHRoZSBsaXN0IGdyb3VwIGNsb25lIGFnYWluLCBhbmQgdGhlIHBsYWNlaG9sZGVyLCBhbmQgYW5pbWF0ZSB0aGUgaGVscGVyIGJhY2sgdG8gaXQncyBvcmlnaW5hbCBzaXplCgkJCQkJdGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbS5yZW1vdmUoKTsKCQkJCQlpZih0aGlzLmluc3RhbmNlLnBsYWNlaG9sZGVyKSB0aGlzLmluc3RhbmNlLnBsYWNlaG9sZGVyLnJlbW92ZSgpOwoKCQkJCQlpbnN0Ll90cmlnZ2VyKCJmcm9tU29ydGFibGUiLCBldmVudCk7CgkJCQkJaW5zdC5kcm9wcGVkID0gZmFsc2U7IC8vZHJhZ2dhYmxlIHJldmVydCBuZWVkcyB0aGF0CgkJCQl9CgoJCQl9OwoKCQl9KTsKCgl9Cn0pOwoKJC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCAiY3Vyc29yIiwgewoJc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoJCXZhciB0ID0gJCgnYm9keScpLCBvID0gJCh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKS5vcHRpb25zOwoJCWlmICh0LmNzcygiY3Vyc29yIikpIG8uX2N1cnNvciA9IHQuY3NzKCJjdXJzb3IiKTsKCQl0LmNzcygiY3Vyc29yIiwgby5jdXJzb3IpOwoJfSwKCXN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoJCXZhciBvID0gJCh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKS5vcHRpb25zOwoJCWlmIChvLl9jdXJzb3IpICQoJ2JvZHknKS5jc3MoImN1cnNvciIsIG8uX2N1cnNvcik7Cgl9Cn0pOwoKJC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCAib3BhY2l0eSIsIHsKCXN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHsKCQl2YXIgdCA9ICQodWkuaGVscGVyKSwgbyA9ICQodGhpcykuZGF0YSgnZHJhZ2dhYmxlJykub3B0aW9uczsKCQlpZih0LmNzcygib3BhY2l0eSIpKSBvLl9vcGFjaXR5ID0gdC5jc3MoIm9wYWNpdHkiKTsKCQl0LmNzcygnb3BhY2l0eScsIG8ub3BhY2l0eSk7Cgl9LAoJc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIG8gPSAkKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLm9wdGlvbnM7CgkJaWYoby5fb3BhY2l0eSkgJCh1aS5oZWxwZXIpLmNzcygnb3BhY2l0eScsIG8uX29wYWNpdHkpOwoJfQp9KTsKCiQudWkucGx1Z2luLmFkZCgiZHJhZ2dhYmxlIiwgInNjcm9sbCIsIHsKCXN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHsKCQl2YXIgaSA9ICQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIik7CgkJaWYoaS5zY3JvbGxQYXJlbnRbMF0gIT0gZG9jdW1lbnQgJiYgaS5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSAhPSAnSFRNTCcpIGkub3ZlcmZsb3dPZmZzZXQgPSBpLnNjcm9sbFBhcmVudC5vZmZzZXQoKTsKCX0sCglkcmFnOiBmdW5jdGlvbihldmVudCwgdWkpIHsKCgkJdmFyIGkgPSAkKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLCBvID0gaS5vcHRpb25zLCBzY3JvbGxlZCA9IGZhbHNlOwoKCQlpZihpLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJiBpLnNjcm9sbFBhcmVudFswXS50YWdOYW1lICE9ICdIVE1MJykgewoKCQkJaWYoIW8uYXhpcyB8fCBvLmF4aXMgIT0gJ3gnKSB7CgkJCQlpZigoaS5vdmVyZmxvd09mZnNldC50b3AgKyBpLnNjcm9sbFBhcmVudFswXS5vZmZzZXRIZWlnaHQpIC0gZXZlbnQucGFnZVkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCWkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCA9IHNjcm9sbGVkID0gaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wICsgby5zY3JvbGxTcGVlZDsKCQkJCWVsc2UgaWYoZXZlbnQucGFnZVkgLSBpLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpCgkJCQkJaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wID0gc2Nyb2xsZWQgPSBpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgLSBvLnNjcm9sbFNwZWVkOwoJCQl9CgoJCQlpZighby5heGlzIHx8IG8uYXhpcyAhPSAneScpIHsKCQkJCWlmKChpLm92ZXJmbG93T2Zmc2V0LmxlZnQgKyBpLnNjcm9sbFBhcmVudFswXS5vZmZzZXRXaWR0aCkgLSBldmVudC5wYWdlWCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpCgkJCQkJaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID0gaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCArIG8uc2Nyb2xsU3BlZWQ7CgkJCQllbHNlIGlmKGV2ZW50LnBhZ2VYIC0gaS5vdmVyZmxvd09mZnNldC5sZWZ0IDwgby5zY3JvbGxTZW5zaXRpdml0eSkKCQkJCQlpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPSBpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0IC0gby5zY3JvbGxTcGVlZDsKCQkJfQoKCQl9IGVsc2UgewoKCQkJaWYoIW8uYXhpcyB8fCBvLmF4aXMgIT0gJ3gnKSB7CgkJCQlpZihldmVudC5wYWdlWSAtICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkKCQkJCQlzY3JvbGxlZCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSAtIG8uc2Nyb2xsU3BlZWQpOwoJCQkJZWxzZSBpZigkKHdpbmRvdykuaGVpZ2h0KCkgLSAoZXZlbnQucGFnZVkgLSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpICsgby5zY3JvbGxTcGVlZCk7CgkJCX0KCgkJCWlmKCFvLmF4aXMgfHwgby5heGlzICE9ICd5JykgewoJCQkJaWYoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgLSBvLnNjcm9sbFNwZWVkKTsKCQkJCWVsc2UgaWYoJCh3aW5kb3cpLndpZHRoKCkgLSAoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkKCQkJCQlzY3JvbGxlZCA9ICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpICsgby5zY3JvbGxTcGVlZCk7CgkJCX0KCgkJfQoKCQlpZihzY3JvbGxlZCAhPT0gZmFsc2UgJiYgJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikKCQkJJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoaSwgZXZlbnQpOwoKCX0KfSk7CgokLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsICJzbmFwIiwgewoJc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoKCQl2YXIgaSA9ICQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksIG8gPSBpLm9wdGlvbnM7CgkJaS5zbmFwRWxlbWVudHMgPSBbXTsKCgkJJChvLnNuYXAuY29uc3RydWN0b3IgIT0gU3RyaW5nID8gKCBvLnNuYXAuaXRlbXMgfHwgJzpkYXRhKGRyYWdnYWJsZSknICkgOiBvLnNuYXApLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciAkdCA9ICQodGhpcyk7IHZhciAkbyA9ICR0Lm9mZnNldCgpOwoJCQlpZih0aGlzICE9IGkuZWxlbWVudFswXSkgaS5zbmFwRWxlbWVudHMucHVzaCh7CgkJCQlpdGVtOiB0aGlzLAoJCQkJd2lkdGg6ICR0Lm91dGVyV2lkdGgoKSwgaGVpZ2h0OiAkdC5vdXRlckhlaWdodCgpLAoJCQkJdG9wOiAkby50b3AsIGxlZnQ6ICRvLmxlZnQKCQkJfSk7CgkJfSk7CgoJfSwKCWRyYWc6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoKCQl2YXIgaW5zdCA9ICQodGhpcykuZGF0YSgiZHJhZ2dhYmxlIiksIG8gPSBpbnN0Lm9wdGlvbnM7CgkJdmFyIGQgPSBvLnNuYXBUb2xlcmFuY2U7CgoJCXZhciB4MSA9IHVpLm9mZnNldC5sZWZ0LCB4MiA9IHgxICsgaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCwKCQkJeTEgPSB1aS5vZmZzZXQudG9wLCB5MiA9IHkxICsgaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQ7CgoJCWZvciAodmFyIGkgPSBpbnN0LnNuYXBFbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7CgoJCQl2YXIgbCA9IGluc3Quc25hcEVsZW1lbnRzW2ldLmxlZnQsIHIgPSBsICsgaW5zdC5zbmFwRWxlbWVudHNbaV0ud2lkdGgsCgkJCQl0ID0gaW5zdC5zbmFwRWxlbWVudHNbaV0udG9wLCBiID0gdCArIGluc3Quc25hcEVsZW1lbnRzW2ldLmhlaWdodDsKCgkJCS8vWWVzLCBJIGtub3csIHRoaXMgaXMgaW5zYW5lIDspCgkJCWlmKCEoKGwtZCA8IHgxICYmIHgxIDwgcitkICYmIHQtZCA8IHkxICYmIHkxIDwgYitkKSB8fCAobC1kIDwgeDEgJiYgeDEgPCByK2QgJiYgdC1kIDwgeTIgJiYgeTIgPCBiK2QpIHx8IChsLWQgPCB4MiAmJiB4MiA8IHIrZCAmJiB0LWQgPCB5MSAmJiB5MSA8IGIrZCkgfHwgKGwtZCA8IHgyICYmIHgyIDwgcitkICYmIHQtZCA8IHkyICYmIHkyIDwgYitkKSkpIHsKCQkJCWlmKGluc3Quc25hcEVsZW1lbnRzW2ldLnNuYXBwaW5nKSAoaW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZSAmJiBpbnN0Lm9wdGlvbnMuc25hcC5yZWxlYXNlLmNhbGwoaW5zdC5lbGVtZW50LCBldmVudCwgJC5leHRlbmQoaW5zdC5fdWlIYXNoKCksIHsgc25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzW2ldLml0ZW0gfSkpKTsKCQkJCWluc3Quc25hcEVsZW1lbnRzW2ldLnNuYXBwaW5nID0gZmFsc2U7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJaWYoby5zbmFwTW9kZSAhPSAnaW5uZXInKSB7CgkJCQl2YXIgdHMgPSBNYXRoLmFicyh0IC0geTIpIDw9IGQ7CgkJCQl2YXIgYnMgPSBNYXRoLmFicyhiIC0geTEpIDw9IGQ7CgkJCQl2YXIgbHMgPSBNYXRoLmFicyhsIC0geDIpIDw9IGQ7CgkJCQl2YXIgcnMgPSBNYXRoLmFicyhyIC0geDEpIDw9IGQ7CgkJCQlpZih0cykgdWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIiwgeyB0b3A6IHQgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodCwgbGVmdDogMCB9KS50b3AgLSBpbnN0Lm1hcmdpbnMudG9wOwoJCQkJaWYoYnMpIHVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiBiLCBsZWZ0OiAwIH0pLnRvcCAtIGluc3QubWFyZ2lucy50b3A7CgkJCQlpZihscykgdWkucG9zaXRpb24ubGVmdCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiAwLCBsZWZ0OiBsIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCQlpZihycykgdWkucG9zaXRpb24ubGVmdCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiAwLCBsZWZ0OiByIH0pLmxlZnQgLSBpbnN0Lm1hcmdpbnMubGVmdDsKCQkJfQoKCQkJdmFyIGZpcnN0ID0gKHRzIHx8IGJzIHx8IGxzIHx8IHJzKTsKCgkJCWlmKG8uc25hcE1vZGUgIT0gJ291dGVyJykgewoJCQkJdmFyIHRzID0gTWF0aC5hYnModCAtIHkxKSA8PSBkOwoJCQkJdmFyIGJzID0gTWF0aC5hYnMoYiAtIHkyKSA8PSBkOwoJCQkJdmFyIGxzID0gTWF0aC5hYnMobCAtIHgxKSA8PSBkOwoJCQkJdmFyIHJzID0gTWF0aC5hYnMociAtIHgyKSA8PSBkOwoJCQkJaWYodHMpIHVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiB0LCBsZWZ0OiAwIH0pLnRvcCAtIGluc3QubWFyZ2lucy50b3A7CgkJCQlpZihicykgdWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIiwgeyB0b3A6IGIgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodCwgbGVmdDogMCB9KS50b3AgLSBpbnN0Lm1hcmdpbnMudG9wOwoJCQkJaWYobHMpIHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogMCwgbGVmdDogbCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCQlpZihycykgdWkucG9zaXRpb24ubGVmdCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiAwLCBsZWZ0OiByIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCX0KCgkJCWlmKCFpbnN0LnNuYXBFbGVtZW50c1tpXS5zbmFwcGluZyAmJiAodHMgfHwgYnMgfHwgbHMgfHwgcnMgfHwgZmlyc3QpKQoJCQkJKGluc3Qub3B0aW9ucy5zbmFwLnNuYXAgJiYgaW5zdC5vcHRpb25zLnNuYXAuc25hcC5jYWxsKGluc3QuZWxlbWVudCwgZXZlbnQsICQuZXh0ZW5kKGluc3QuX3VpSGFzaCgpLCB7IHNuYXBJdGVtOiBpbnN0LnNuYXBFbGVtZW50c1tpXS5pdGVtIH0pKSk7CgkJCWluc3Quc25hcEVsZW1lbnRzW2ldLnNuYXBwaW5nID0gKHRzIHx8IGJzIHx8IGxzIHx8IHJzIHx8IGZpcnN0KTsKCgkJfTsKCgl9Cn0pOwoKJC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCAic3RhY2siLCB7CglzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgoJCXZhciBvID0gJCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKS5vcHRpb25zOwoKCQl2YXIgZ3JvdXAgPSAkLm1ha2VBcnJheSgkKG8uc3RhY2spKS5zb3J0KGZ1bmN0aW9uKGEsYikgewoJCQlyZXR1cm4gKHBhcnNlSW50KCQoYSkuY3NzKCJ6SW5kZXgiKSwxMCkgfHwgMCkgLSAocGFyc2VJbnQoJChiKS5jc3MoInpJbmRleCIpLDEwKSB8fCAwKTsKCQl9KTsKCQlpZiAoIWdyb3VwLmxlbmd0aCkgeyByZXR1cm47IH0KCgkJdmFyIG1pbiA9IHBhcnNlSW50KGdyb3VwWzBdLnN0eWxlLnpJbmRleCkgfHwgMDsKCQkkKGdyb3VwKS5lYWNoKGZ1bmN0aW9uKGkpIHsKCQkJdGhpcy5zdHlsZS56SW5kZXggPSBtaW4gKyBpOwoJCX0pOwoKCQl0aGlzWzBdLnN0eWxlLnpJbmRleCA9IG1pbiArIGdyb3VwLmxlbmd0aDsKCgl9Cn0pOwoKJC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCAiekluZGV4IiwgewoJc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkgewoJCXZhciB0ID0gJCh1aS5oZWxwZXIpLCBvID0gJCh0aGlzKS5kYXRhKCJkcmFnZ2FibGUiKS5vcHRpb25zOwoJCWlmKHQuY3NzKCJ6SW5kZXgiKSkgby5fekluZGV4ID0gdC5jc3MoInpJbmRleCIpOwoJCXQuY3NzKCd6SW5kZXgnLCBvLnpJbmRleCk7Cgl9LAoJc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIG8gPSAkKHRoaXMpLmRhdGEoImRyYWdnYWJsZSIpLm9wdGlvbnM7CgkJaWYoby5fekluZGV4KSAkKHVpLmhlbHBlcikuY3NzKCd6SW5kZXgnLCBvLl96SW5kZXgpOwoJfQp9KTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoInVpLmRyb3BwYWJsZSIsIHsKCXZlcnNpb246ICIxLjkuMiIsCgl3aWRnZXRFdmVudFByZWZpeDogImRyb3AiLAoJb3B0aW9uczogewoJCWFjY2VwdDogJyonLAoJCWFjdGl2ZUNsYXNzOiBmYWxzZSwKCQlhZGRDbGFzc2VzOiB0cnVlLAoJCWdyZWVkeTogZmFsc2UsCgkJaG92ZXJDbGFzczogZmFsc2UsCgkJc2NvcGU6ICdkZWZhdWx0JywKCQl0b2xlcmFuY2U6ICdpbnRlcnNlY3QnCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciBvID0gdGhpcy5vcHRpb25zLCBhY2NlcHQgPSBvLmFjY2VwdDsKCQl0aGlzLmlzb3ZlciA9IDA7IHRoaXMuaXNvdXQgPSAxOwoKCQl0aGlzLmFjY2VwdCA9ICQuaXNGdW5jdGlvbihhY2NlcHQpID8gYWNjZXB0IDogZnVuY3Rpb24oZCkgewoJCQlyZXR1cm4gZC5pcyhhY2NlcHQpOwoJCX07CgoJCS8vU3RvcmUgdGhlIGRyb3BwYWJsZSdzIHByb3BvcnRpb25zCgkJdGhpcy5wcm9wb3J0aW9ucyA9IHsgd2lkdGg6IHRoaXMuZWxlbWVudFswXS5vZmZzZXRXaWR0aCwgaGVpZ2h0OiB0aGlzLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IH07CgoJCS8vIEFkZCB0aGUgcmVmZXJlbmNlIGFuZCBwb3NpdGlvbnMgdG8gdGhlIG1hbmFnZXIKCQkkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW28uc2NvcGVdID0gJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tvLnNjb3BlXSB8fCBbXTsKCQkkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW28uc2NvcGVdLnB1c2godGhpcyk7CgoJCShvLmFkZENsYXNzZXMgJiYgdGhpcy5lbGVtZW50LmFkZENsYXNzKCJ1aS1kcm9wcGFibGUiKSk7CgoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIGRyb3AgPSAkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW3RoaXMub3B0aW9ucy5zY29wZV07CgkJZm9yICggdmFyIGkgPSAwOyBpIDwgZHJvcC5sZW5ndGg7IGkrKyApCgkJCWlmICggZHJvcFtpXSA9PSB0aGlzICkKCQkJCWRyb3Auc3BsaWNlKGksIDEpOwoKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoInVpLWRyb3BwYWJsZSB1aS1kcm9wcGFibGUtZGlzYWJsZWQiKTsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewoKCQlpZihrZXkgPT0gJ2FjY2VwdCcpIHsKCQkJdGhpcy5hY2NlcHQgPSAkLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihkKSB7CgkJCQlyZXR1cm4gZC5pcyh2YWx1ZSk7CgkJCX07CgkJfQoJCSQuV2lkZ2V0LnByb3RvdHlwZS5fc2V0T3B0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cgl9LAoKCV9hY3RpdmF0ZTogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgZHJhZ2dhYmxlID0gJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCQlpZih0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpIHRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpOwoJCShkcmFnZ2FibGUgJiYgdGhpcy5fdHJpZ2dlcignYWN0aXZhdGUnLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKSk7Cgl9LAoKCV9kZWFjdGl2YXRlOiBmdW5jdGlvbihldmVudCkgewoJCXZhciBkcmFnZ2FibGUgPSAkLnVpLmRkbWFuYWdlci5jdXJyZW50OwoJCWlmKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7CgkJKGRyYWdnYWJsZSAmJiB0aGlzLl90cmlnZ2VyKCdkZWFjdGl2YXRlJywgZXZlbnQsIHRoaXMudWkoZHJhZ2dhYmxlKSkpOwoJfSwKCglfb3ZlcjogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7CgkJaWYgKCFkcmFnZ2FibGUgfHwgKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudClbMF0gPT0gdGhpcy5lbGVtZW50WzBdKSByZXR1cm47IC8vIEJhaWwgaWYgZHJhZ2dhYmxlIGFuZCBkcm9wcGFibGUgYXJlIHNhbWUgZWxlbWVudAoKCQlpZiAodGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCkpKSB7CgkJCWlmKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKSB0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpOwoJCQl0aGlzLl90cmlnZ2VyKCdvdmVyJywgZXZlbnQsIHRoaXMudWkoZHJhZ2dhYmxlKSk7CgkJfQoKCX0sCgoJX291dDogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7CgkJaWYgKCFkcmFnZ2FibGUgfHwgKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudClbMF0gPT0gdGhpcy5lbGVtZW50WzBdKSByZXR1cm47IC8vIEJhaWwgaWYgZHJhZ2dhYmxlIGFuZCBkcm9wcGFibGUgYXJlIHNhbWUgZWxlbWVudAoKCQlpZiAodGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCkpKSB7CgkJCWlmKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpOwoJCQl0aGlzLl90cmlnZ2VyKCdvdXQnLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTsKCQl9CgoJfSwKCglfZHJvcDogZnVuY3Rpb24oZXZlbnQsY3VzdG9tKSB7CgoJCXZhciBkcmFnZ2FibGUgPSBjdXN0b20gfHwgJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCQlpZiAoIWRyYWdnYWJsZSB8fCAoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KVswXSA9PSB0aGlzLmVsZW1lbnRbMF0pIHJldHVybiBmYWxzZTsgLy8gQmFpbCBpZiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZSBhcmUgc2FtZSBlbGVtZW50CgoJCXZhciBjaGlsZHJlbkludGVyc2VjdGlvbiA9IGZhbHNlOwoJCXRoaXMuZWxlbWVudC5maW5kKCI6ZGF0YShkcm9wcGFibGUpIikubm90KCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nIikuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIGluc3QgPSAkLmRhdGEodGhpcywgJ2Ryb3BwYWJsZScpOwoJCQlpZigKCQkJCWluc3Qub3B0aW9ucy5ncmVlZHkKCQkJCSYmICFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQKCQkJCSYmIGluc3Qub3B0aW9ucy5zY29wZSA9PSBkcmFnZ2FibGUub3B0aW9ucy5zY29wZQoJCQkJJiYgaW5zdC5hY2NlcHQuY2FsbChpbnN0LmVsZW1lbnRbMF0sIChkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHwgZHJhZ2dhYmxlLmVsZW1lbnQpKQoJCQkJJiYgJC51aS5pbnRlcnNlY3QoZHJhZ2dhYmxlLCAkLmV4dGVuZChpbnN0LCB7IG9mZnNldDogaW5zdC5lbGVtZW50Lm9mZnNldCgpIH0pLCBpbnN0Lm9wdGlvbnMudG9sZXJhbmNlKQoJCQkpIHsgY2hpbGRyZW5JbnRlcnNlY3Rpb24gPSB0cnVlOyByZXR1cm4gZmFsc2U7IH0KCQl9KTsKCQlpZihjaGlsZHJlbkludGVyc2VjdGlvbikgcmV0dXJuIGZhbHNlOwoKCQlpZih0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSwoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KSkpIHsKCQkJaWYodGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTsKCQkJaWYodGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyk7CgkJCXRoaXMuX3RyaWdnZXIoJ2Ryb3AnLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTsKCQkJcmV0dXJuIHRoaXMuZWxlbWVudDsKCQl9CgoJCXJldHVybiBmYWxzZTsKCgl9LAoKCXVpOiBmdW5jdGlvbihjKSB7CgkJcmV0dXJuIHsKCQkJZHJhZ2dhYmxlOiAoYy5jdXJyZW50SXRlbSB8fCBjLmVsZW1lbnQpLAoJCQloZWxwZXI6IGMuaGVscGVyLAoJCQlwb3NpdGlvbjogYy5wb3NpdGlvbiwKCQkJb2Zmc2V0OiBjLnBvc2l0aW9uQWJzCgkJfTsKCX0KCn0pOwoKJC51aS5pbnRlcnNlY3QgPSBmdW5jdGlvbihkcmFnZ2FibGUsIGRyb3BwYWJsZSwgdG9sZXJhbmNlTW9kZSkgewoKCWlmICghZHJvcHBhYmxlLm9mZnNldCkgcmV0dXJuIGZhbHNlOwoKCXZhciB4MSA9IChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS5sZWZ0LCB4MiA9IHgxICsgZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoLAoJCXkxID0gKGRyYWdnYWJsZS5wb3NpdGlvbkFicyB8fCBkcmFnZ2FibGUucG9zaXRpb24uYWJzb2x1dGUpLnRvcCwgeTIgPSB5MSArIGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQ7Cgl2YXIgbCA9IGRyb3BwYWJsZS5vZmZzZXQubGVmdCwgciA9IGwgKyBkcm9wcGFibGUucHJvcG9ydGlvbnMud2lkdGgsCgkJdCA9IGRyb3BwYWJsZS5vZmZzZXQudG9wLCBiID0gdCArIGRyb3BwYWJsZS5wcm9wb3J0aW9ucy5oZWlnaHQ7CgoJc3dpdGNoICh0b2xlcmFuY2VNb2RlKSB7CgkJY2FzZSAnZml0JzoKCQkJcmV0dXJuIChsIDw9IHgxICYmIHgyIDw9IHIKCQkJCSYmIHQgPD0geTEgJiYgeTIgPD0gYik7CgkJCWJyZWFrOwoJCWNhc2UgJ2ludGVyc2VjdCc6CgkJCXJldHVybiAobCA8IHgxICsgKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIpIC8vIFJpZ2h0IEhhbGYKCQkJCSYmIHgyIC0gKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIpIDwgciAvLyBMZWZ0IEhhbGYKCQkJCSYmIHQgPCB5MSArIChkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMikgLy8gQm90dG9tIEhhbGYKCQkJCSYmIHkyIC0gKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyKSA8IGIgKTsgLy8gVG9wIEhhbGYKCQkJYnJlYWs7CgkJY2FzZSAncG9pbnRlcic6CgkJCXZhciBkcmFnZ2FibGVMZWZ0ID0gKChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS5sZWZ0ICsgKGRyYWdnYWJsZS5jbGlja09mZnNldCB8fCBkcmFnZ2FibGUub2Zmc2V0LmNsaWNrKS5sZWZ0KSwKCQkJCWRyYWdnYWJsZVRvcCA9ICgoZHJhZ2dhYmxlLnBvc2l0aW9uQWJzIHx8IGRyYWdnYWJsZS5wb3NpdGlvbi5hYnNvbHV0ZSkudG9wICsgKGRyYWdnYWJsZS5jbGlja09mZnNldCB8fCBkcmFnZ2FibGUub2Zmc2V0LmNsaWNrKS50b3ApLAoJCQkJaXNPdmVyID0gJC51aS5pc092ZXIoZHJhZ2dhYmxlVG9wLCBkcmFnZ2FibGVMZWZ0LCB0LCBsLCBkcm9wcGFibGUucHJvcG9ydGlvbnMuaGVpZ2h0LCBkcm9wcGFibGUucHJvcG9ydGlvbnMud2lkdGgpOwoJCQlyZXR1cm4gaXNPdmVyOwoJCQlicmVhazsKCQljYXNlICd0b3VjaCc6CgkJCXJldHVybiAoCgkJCQkJKHkxID49IHQgJiYgeTEgPD0gYikgfHwJLy8gVG9wIGVkZ2UgdG91Y2hpbmcKCQkJCQkoeTIgPj0gdCAmJiB5MiA8PSBiKSB8fAkvLyBCb3R0b20gZWRnZSB0b3VjaGluZwoJCQkJCSh5MSA8IHQgJiYgeTIgPiBiKQkJLy8gU3Vycm91bmRlZCB2ZXJ0aWNhbGx5CgkJCQkpICYmICgKCQkJCQkoeDEgPj0gbCAmJiB4MSA8PSByKSB8fAkvLyBMZWZ0IGVkZ2UgdG91Y2hpbmcKCQkJCQkoeDIgPj0gbCAmJiB4MiA8PSByKSB8fAkvLyBSaWdodCBlZGdlIHRvdWNoaW5nCgkJCQkJKHgxIDwgbCAmJiB4MiA+IHIpCQkvLyBTdXJyb3VuZGVkIGhvcml6b250YWxseQoJCQkJKTsKCQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJcmV0dXJuIGZhbHNlOwoJCQlicmVhazsKCQl9Cgp9OwoKLyoKCVRoaXMgbWFuYWdlciB0cmFja3Mgb2Zmc2V0cyBvZiBkcmFnZ2FibGVzIGFuZCBkcm9wcGFibGVzCiovCiQudWkuZGRtYW5hZ2VyID0gewoJY3VycmVudDogbnVsbCwKCWRyb3BwYWJsZXM6IHsgJ2RlZmF1bHQnOiBbXSB9LAoJcHJlcGFyZU9mZnNldHM6IGZ1bmN0aW9uKHQsIGV2ZW50KSB7CgoJCXZhciBtID0gJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1t0Lm9wdGlvbnMuc2NvcGVdIHx8IFtdOwoJCXZhciB0eXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbDsgLy8gd29ya2Fyb3VuZCBmb3IgIzIzMTcKCQl2YXIgbGlzdCA9ICh0LmN1cnJlbnRJdGVtIHx8IHQuZWxlbWVudCkuZmluZCgiOmRhdGEoZHJvcHBhYmxlKSIpLmFuZFNlbGYoKTsKCgkJZHJvcHBhYmxlc0xvb3A6IGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykgewoKCQkJaWYobVtpXS5vcHRpb25zLmRpc2FibGVkIHx8ICh0ICYmICFtW2ldLmFjY2VwdC5jYWxsKG1baV0uZWxlbWVudFswXSwodC5jdXJyZW50SXRlbSB8fCB0LmVsZW1lbnQpKSkpIGNvbnRpbnVlOwkvL05vIGRpc2FibGVkIGFuZCBub24tYWNjZXB0ZWQKCQkJZm9yICh2YXIgaj0wOyBqIDwgbGlzdC5sZW5ndGg7IGorKykgeyBpZihsaXN0W2pdID09IG1baV0uZWxlbWVudFswXSkgeyBtW2ldLnByb3BvcnRpb25zLmhlaWdodCA9IDA7IGNvbnRpbnVlIGRyb3BwYWJsZXNMb29wOyB9IH07IC8vRmlsdGVyIG91dCBlbGVtZW50cyBpbiB0aGUgY3VycmVudCBkcmFnZ2VkIGl0ZW0KCQkJbVtpXS52aXNpYmxlID0gbVtpXS5lbGVtZW50LmNzcygiZGlzcGxheSIpICE9ICJub25lIjsgaWYoIW1baV0udmlzaWJsZSkgY29udGludWU7IAkJCQkJCQkJCS8vSWYgdGhlIGVsZW1lbnQgaXMgbm90IHZpc2libGUsIGNvbnRpbnVlCgoJCQlpZih0eXBlID09ICJtb3VzZWRvd24iKSBtW2ldLl9hY3RpdmF0ZS5jYWxsKG1baV0sIGV2ZW50KTsgLy9BY3RpdmF0ZSB0aGUgZHJvcHBhYmxlIGlmIHVzZWQgZGlyZWN0bHkgZnJvbSBkcmFnZ2FibGVzCgoJCQltW2ldLm9mZnNldCA9IG1baV0uZWxlbWVudC5vZmZzZXQoKTsKCQkJbVtpXS5wcm9wb3J0aW9ucyA9IHsgd2lkdGg6IG1baV0uZWxlbWVudFswXS5vZmZzZXRXaWR0aCwgaGVpZ2h0OiBtW2ldLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IH07CgoJCX0KCgl9LAoJZHJvcDogZnVuY3Rpb24oZHJhZ2dhYmxlLCBldmVudCkgewoKCQl2YXIgZHJvcHBlZCA9IGZhbHNlOwoJCSQuZWFjaCgkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2RyYWdnYWJsZS5vcHRpb25zLnNjb3BlXSB8fCBbXSwgZnVuY3Rpb24oKSB7CgoJCQlpZighdGhpcy5vcHRpb25zKSByZXR1cm47CgkJCWlmICghdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHRoaXMudmlzaWJsZSAmJiAkLnVpLmludGVyc2VjdChkcmFnZ2FibGUsIHRoaXMsIHRoaXMub3B0aW9ucy50b2xlcmFuY2UpKQoJCQkJZHJvcHBlZCA9IHRoaXMuX2Ryb3AuY2FsbCh0aGlzLCBldmVudCkgfHwgZHJvcHBlZDsKCgkJCWlmICghdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHRoaXMudmlzaWJsZSAmJiB0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSwoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KSkpIHsKCQkJCXRoaXMuaXNvdXQgPSAxOyB0aGlzLmlzb3ZlciA9IDA7CgkJCQl0aGlzLl9kZWFjdGl2YXRlLmNhbGwodGhpcywgZXZlbnQpOwoJCQl9CgoJCX0pOwoJCXJldHVybiBkcm9wcGVkOwoKCX0sCglkcmFnU3RhcnQ6IGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGV2ZW50ICkgewoJCS8vTGlzdGVuIGZvciBzY3JvbGxpbmcgc28gdGhhdCBpZiB0aGUgZHJhZ2dpbmcgY2F1c2VzIHNjcm9sbGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIGRyb3BwYWJsZXMgY2FuIGJlIHJlY2FsY3VsYXRlZCAoc2VlICM1MDAzKQoJCWRyYWdnYWJsZS5lbGVtZW50LnBhcmVudHNVbnRpbCggImJvZHkiICkuYmluZCggInNjcm9sbC5kcm9wcGFibGUiLCBmdW5jdGlvbigpIHsKCQkJaWYoICFkcmFnZ2FibGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zICkgJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoIGRyYWdnYWJsZSwgZXZlbnQgKTsKCQl9KTsKCX0sCglkcmFnOiBmdW5jdGlvbihkcmFnZ2FibGUsIGV2ZW50KSB7CgoJCS8vSWYgeW91IGhhdmUgYSBoaWdobHkgZHluYW1pYyBwYWdlLCB5b3UgbWlnaHQgdHJ5IHRoaXMgb3B0aW9uLiBJdCByZW5kZXJzIHBvc2l0aW9ucyBldmVyeSB0aW1lIHlvdSBtb3ZlIHRoZSBtb3VzZS4KCQlpZihkcmFnZ2FibGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zKSAkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhkcmFnZ2FibGUsIGV2ZW50KTsKCgkJLy9SdW4gdGhyb3VnaCBhbGwgZHJvcHBhYmxlcyBhbmQgY2hlY2sgdGhlaXIgcG9zaXRpb25zIGJhc2VkIG9uIHNwZWNpZmljIHRvbGVyYW5jZSBvcHRpb25zCgkJJC5lYWNoKCQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZHJhZ2dhYmxlLm9wdGlvbnMuc2NvcGVdIHx8IFtdLCBmdW5jdGlvbigpIHsKCgkJCWlmKHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLmdyZWVkeUNoaWxkIHx8ICF0aGlzLnZpc2libGUpIHJldHVybjsKCQkJdmFyIGludGVyc2VjdHMgPSAkLnVpLmludGVyc2VjdChkcmFnZ2FibGUsIHRoaXMsIHRoaXMub3B0aW9ucy50b2xlcmFuY2UpOwoKCQkJdmFyIGMgPSAhaW50ZXJzZWN0cyAmJiB0aGlzLmlzb3ZlciA9PSAxID8gJ2lzb3V0JyA6IChpbnRlcnNlY3RzICYmIHRoaXMuaXNvdmVyID09IDAgPyAnaXNvdmVyJyA6IG51bGwpOwoJCQlpZighYykgcmV0dXJuOwoKCQkJdmFyIHBhcmVudEluc3RhbmNlOwoJCQlpZiAodGhpcy5vcHRpb25zLmdyZWVkeSkgewoJCQkJLy8gZmluZCBkcm9wcGFibGUgcGFyZW50cyB3aXRoIHNhbWUgc2NvcGUKCQkJCXZhciBzY29wZSA9IHRoaXMub3B0aW9ucy5zY29wZTsKCQkJCXZhciBwYXJlbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50cygnOmRhdGEoZHJvcHBhYmxlKScpLmZpbHRlcihmdW5jdGlvbiAoKSB7CgkJCQkJcmV0dXJuICQuZGF0YSh0aGlzLCAnZHJvcHBhYmxlJykub3B0aW9ucy5zY29wZSA9PT0gc2NvcGU7CgkJCQl9KTsKCgkJCQlpZiAocGFyZW50Lmxlbmd0aCkgewoJCQkJCXBhcmVudEluc3RhbmNlID0gJC5kYXRhKHBhcmVudFswXSwgJ2Ryb3BwYWJsZScpOwoJCQkJCXBhcmVudEluc3RhbmNlLmdyZWVkeUNoaWxkID0gKGMgPT0gJ2lzb3ZlcicgPyAxIDogMCk7CgkJCQl9CgkJCX0KCgkJCS8vIHdlIGp1c3QgbW92ZWQgaW50byBhIGdyZWVkeSBjaGlsZAoJCQlpZiAocGFyZW50SW5zdGFuY2UgJiYgYyA9PSAnaXNvdmVyJykgewoJCQkJcGFyZW50SW5zdGFuY2VbJ2lzb3ZlciddID0gMDsKCQkJCXBhcmVudEluc3RhbmNlWydpc291dCddID0gMTsKCQkJCXBhcmVudEluc3RhbmNlLl9vdXQuY2FsbChwYXJlbnRJbnN0YW5jZSwgZXZlbnQpOwoJCQl9CgoJCQl0aGlzW2NdID0gMTsgdGhpc1tjID09ICdpc291dCcgPyAnaXNvdmVyJyA6ICdpc291dCddID0gMDsKCQkJdGhpc1tjID09ICJpc292ZXIiID8gIl9vdmVyIiA6ICJfb3V0Il0uY2FsbCh0aGlzLCBldmVudCk7CgoJCQkvLyB3ZSBqdXN0IG1vdmVkIG91dCBvZiBhIGdyZWVkeSBjaGlsZAoJCQlpZiAocGFyZW50SW5zdGFuY2UgJiYgYyA9PSAnaXNvdXQnKSB7CgkJCQlwYXJlbnRJbnN0YW5jZVsnaXNvdXQnXSA9IDA7CgkJCQlwYXJlbnRJbnN0YW5jZVsnaXNvdmVyJ10gPSAxOwoJCQkJcGFyZW50SW5zdGFuY2UuX292ZXIuY2FsbChwYXJlbnRJbnN0YW5jZSwgZXZlbnQpOwoJCQl9CgkJfSk7CgoJfSwKCWRyYWdTdG9wOiBmdW5jdGlvbiggZHJhZ2dhYmxlLCBldmVudCApIHsKCQlkcmFnZ2FibGUuZWxlbWVudC5wYXJlbnRzVW50aWwoICJib2R5IiApLnVuYmluZCggInNjcm9sbC5kcm9wcGFibGUiICk7CgkJLy9DYWxsIHByZXBhcmVPZmZzZXRzIG9uZSBmaW5hbCB0aW1lIHNpbmNlIElFIGRvZXMgbm90IGZpcmUgcmV0dXJuIHNjcm9sbCBldmVudHMgd2hlbiBvdmVyZmxvdyB3YXMgY2F1c2VkIGJ5IGRyYWcgKHNlZSAjNTAwMykKCQlpZiggIWRyYWdnYWJsZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgKSAkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggZHJhZ2dhYmxlLCBldmVudCApOwoJfQp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCgidWkucmVzaXphYmxlIiwgJC51aS5tb3VzZSwgewoJdmVyc2lvbjogIjEuOS4yIiwKCXdpZGdldEV2ZW50UHJlZml4OiAicmVzaXplIiwKCW9wdGlvbnM6IHsKCQlhbHNvUmVzaXplOiBmYWxzZSwKCQlhbmltYXRlOiBmYWxzZSwKCQlhbmltYXRlRHVyYXRpb246ICJzbG93IiwKCQlhbmltYXRlRWFzaW5nOiAic3dpbmciLAoJCWFzcGVjdFJhdGlvOiBmYWxzZSwKCQlhdXRvSGlkZTogZmFsc2UsCgkJY29udGFpbm1lbnQ6IGZhbHNlLAoJCWdob3N0OiBmYWxzZSwKCQlncmlkOiBmYWxzZSwKCQloYW5kbGVzOiAiZSxzLHNlIiwKCQloZWxwZXI6IGZhbHNlLAoJCW1heEhlaWdodDogbnVsbCwKCQltYXhXaWR0aDogbnVsbCwKCQltaW5IZWlnaHQ6IDEwLAoJCW1pbldpZHRoOiAxMCwKCQl6SW5kZXg6IDEwMDAKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCgkJdmFyIHRoYXQgPSB0aGlzLCBvID0gdGhpcy5vcHRpb25zOwoJCXRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktcmVzaXphYmxlIik7CgoJCSQuZXh0ZW5kKHRoaXMsIHsKCQkJX2FzcGVjdFJhdGlvOiAhIShvLmFzcGVjdFJhdGlvKSwKCQkJYXNwZWN0UmF0aW86IG8uYXNwZWN0UmF0aW8sCgkJCW9yaWdpbmFsRWxlbWVudDogdGhpcy5lbGVtZW50LAoJCQlfcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50czogW10sCgkJCV9oZWxwZXI6IG8uaGVscGVyIHx8IG8uZ2hvc3QgfHwgby5hbmltYXRlID8gby5oZWxwZXIgfHwgJ3VpLXJlc2l6YWJsZS1oZWxwZXInIDogbnVsbAoJCX0pOwoKCQkvL1dyYXAgdGhlIGVsZW1lbnQgaWYgaXQgY2Fubm90IGhvbGQgY2hpbGQgbm9kZXMKCQlpZih0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL2NhbnZhc3x0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9ufGltZy9pKSkgewoKCQkJLy9DcmVhdGUgYSB3cmFwcGVyIGVsZW1lbnQgYW5kIHNldCB0aGUgd3JhcHBlciB0byB0aGUgbmV3IGN1cnJlbnQgaW50ZXJuYWwgZWxlbWVudAoJCQl0aGlzLmVsZW1lbnQud3JhcCgKCQkJCSQoJzxkaXYgY2xhc3M9InVpLXdyYXBwZXIiIHN0eWxlPSJvdmVyZmxvdzogaGlkZGVuOyI+PC9kaXY+JykuY3NzKHsKCQkJCQlwb3NpdGlvbjogdGhpcy5lbGVtZW50LmNzcygncG9zaXRpb24nKSwKCQkJCQl3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSwKCQkJCQloZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLAoJCQkJCXRvcDogdGhpcy5lbGVtZW50LmNzcygndG9wJyksCgkJCQkJbGVmdDogdGhpcy5lbGVtZW50LmNzcygnbGVmdCcpCgkJCQl9KQoJCQkpOwoKCQkJLy9PdmVyd3JpdGUgdGhlIG9yaWdpbmFsIHRoaXMuZWxlbWVudAoJCQl0aGlzLmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCkuZGF0YSgKCQkJCSJyZXNpemFibGUiLCB0aGlzLmVsZW1lbnQuZGF0YSgncmVzaXphYmxlJykKCQkJKTsKCgkJCXRoaXMuZWxlbWVudElzV3JhcHBlciA9IHRydWU7CgoJCQkvL01vdmUgbWFyZ2lucyB0byB0aGUgd3JhcHBlcgoJCQl0aGlzLmVsZW1lbnQuY3NzKHsgbWFyZ2luTGVmdDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJtYXJnaW5MZWZ0IiksIG1hcmdpblRvcDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJtYXJnaW5Ub3AiKSwgbWFyZ2luUmlnaHQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygibWFyZ2luUmlnaHQiKSwgbWFyZ2luQm90dG9tOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIm1hcmdpbkJvdHRvbSIpIH0pOwoJCQl0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoeyBtYXJnaW5MZWZ0OiAwLCBtYXJnaW5Ub3A6IDAsIG1hcmdpblJpZ2h0OiAwLCBtYXJnaW5Cb3R0b206IDB9KTsKCgkJCS8vUHJldmVudCBTYWZhcmkgdGV4dGFyZWEgcmVzaXplCgkJCXRoaXMub3JpZ2luYWxSZXNpemVTdHlsZSA9IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygncmVzaXplJyk7CgkJCXRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygncmVzaXplJywgJ25vbmUnKTsKCgkJCS8vUHVzaCB0aGUgYWN0dWFsIGVsZW1lbnQgdG8gb3VyIHByb3BvcnRpb25hbGx5UmVzaXplIGludGVybmFsIGFycmF5CgkJCXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMucHVzaCh0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoeyBwb3NpdGlvbjogJ3N0YXRpYycsIHpvb206IDEsIGRpc3BsYXk6ICdibG9jaycgfSkpOwoKCQkJLy8gYXZvaWQgSUUganVtcCAoaGFyZCBzZXQgdGhlIG1hcmdpbikKCQkJdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHsgbWFyZ2luOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoJ21hcmdpbicpIH0pOwoKCQkJLy8gZml4IGhhbmRsZXJzIG9mZnNldAoJCQl0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpOwoKCQl9CgoJCXRoaXMuaGFuZGxlcyA9IG8uaGFuZGxlcyB8fCAoISQoJy51aS1yZXNpemFibGUtaGFuZGxlJywgdGhpcy5lbGVtZW50KS5sZW5ndGggPyAiZSxzLHNlIiA6IHsgbjogJy51aS1yZXNpemFibGUtbicsIGU6ICcudWktcmVzaXphYmxlLWUnLCBzOiAnLnVpLXJlc2l6YWJsZS1zJywgdzogJy51aS1yZXNpemFibGUtdycsIHNlOiAnLnVpLXJlc2l6YWJsZS1zZScsIHN3OiAnLnVpLXJlc2l6YWJsZS1zdycsIG5lOiAnLnVpLXJlc2l6YWJsZS1uZScsIG53OiAnLnVpLXJlc2l6YWJsZS1udycgfSk7CgkJaWYodGhpcy5oYW5kbGVzLmNvbnN0cnVjdG9yID09IFN0cmluZykgewoKCQkJaWYodGhpcy5oYW5kbGVzID09ICdhbGwnKSB0aGlzLmhhbmRsZXMgPSAnbixlLHMsdyxzZSxzdyxuZSxudyc7CgkJCXZhciBuID0gdGhpcy5oYW5kbGVzLnNwbGl0KCIsIik7IHRoaXMuaGFuZGxlcyA9IHt9OwoKCQkJZm9yKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHsKCgkJCQl2YXIgaGFuZGxlID0gJC50cmltKG5baV0pLCBobmFtZSA9ICd1aS1yZXNpemFibGUtJytoYW5kbGU7CgkJCQl2YXIgYXhpcyA9ICQoJzxkaXYgY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgJyArIGhuYW1lICsgJyI+PC9kaXY+Jyk7CgoJCQkJLy8gQXBwbHkgekluZGV4IHRvIGFsbCBoYW5kbGVzIC0gc2VlICM3OTYwCgkJCQlheGlzLmNzcyh7IHpJbmRleDogby56SW5kZXggfSk7CgoJCQkJLy9UT0RPIDogV2hhdCdzIGdvaW5nIG9uIGhlcmU/CgkJCQlpZiAoJ3NlJyA9PSBoYW5kbGUpIHsKCQkJCQlheGlzLmFkZENsYXNzKCd1aS1pY29uIHVpLWljb24tZ3JpcHNtYWxsLWRpYWdvbmFsLXNlJyk7CgkJCQl9OwoKCQkJCS8vSW5zZXJ0IGludG8gaW50ZXJuYWwgaGFuZGxlcyBvYmplY3QgYW5kIGFwcGVuZCB0byBlbGVtZW50CgkJCQl0aGlzLmhhbmRsZXNbaGFuZGxlXSA9ICcudWktcmVzaXphYmxlLScraGFuZGxlOwoJCQkJdGhpcy5lbGVtZW50LmFwcGVuZChheGlzKTsKCQkJfQoKCQl9CgoJCXRoaXMuX3JlbmRlckF4aXMgPSBmdW5jdGlvbih0YXJnZXQpIHsKCgkJCXRhcmdldCA9IHRhcmdldCB8fCB0aGlzLmVsZW1lbnQ7CgoJCQlmb3IodmFyIGkgaW4gdGhpcy5oYW5kbGVzKSB7CgoJCQkJaWYodGhpcy5oYW5kbGVzW2ldLmNvbnN0cnVjdG9yID09IFN0cmluZykKCQkJCQl0aGlzLmhhbmRsZXNbaV0gPSAkKHRoaXMuaGFuZGxlc1tpXSwgdGhpcy5lbGVtZW50KS5zaG93KCk7CgoJCQkJLy9BcHBseSBwYWQgdG8gd3JhcHBlciBlbGVtZW50LCBuZWVkZWQgdG8gZml4IGF4aXMgcG9zaXRpb24gKHRleHRhcmVhLCBpbnB1dHMsIHNjcm9sbHMpCgkJCQlpZiAodGhpcy5lbGVtZW50SXNXcmFwcGVyICYmIHRoaXMub3JpZ2luYWxFbGVtZW50WzBdLm5vZGVOYW1lLm1hdGNoKC90ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9uL2kpKSB7CgoJCQkJCXZhciBheGlzID0gJCh0aGlzLmhhbmRsZXNbaV0sIHRoaXMuZWxlbWVudCksIHBhZFdyYXBwZXIgPSAwOwoKCQkJCQkvL0NoZWNraW5nIHRoZSBjb3JyZWN0IHBhZCBhbmQgYm9yZGVyCgkJCQkJcGFkV3JhcHBlciA9IC9zd3xuZXxud3xzZXxufHMvLnRlc3QoaSkgPyBheGlzLm91dGVySGVpZ2h0KCkgOiBheGlzLm91dGVyV2lkdGgoKTsKCgkJCQkJLy9UaGUgcGFkZGluZyB0eXBlIGkgaGF2ZSB0byBhcHBseS4uLgoJCQkJCXZhciBwYWRQb3MgPSBbICdwYWRkaW5nJywKCQkJCQkJL25lfG53fG4vLnRlc3QoaSkgPyAnVG9wJyA6CgkJCQkJCS9zZXxzd3xzLy50ZXN0KGkpID8gJ0JvdHRvbScgOgoJCQkJCQkvXmUkLy50ZXN0KGkpID8gJ1JpZ2h0JyA6ICdMZWZ0JyBdLmpvaW4oIiIpOwoKCQkJCQl0YXJnZXQuY3NzKHBhZFBvcywgcGFkV3JhcHBlcik7CgoJCQkJCXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7CgoJCQkJfQoKCQkJCS8vVE9ETzogV2hhdCdzIHRoYXQgZ29vZCBmb3I/IFRoZXJlJ3Mgbm90IGFueXRoaW5nIHRvIGJlIGV4ZWN1dGVkIGxlZnQKCQkJCWlmKCEkKHRoaXMuaGFuZGxlc1tpXSkubGVuZ3RoKQoJCQkJCWNvbnRpbnVlOwoKCQkJfQoJCX07CgoJCS8vVE9ETzogbWFrZSByZW5kZXJBeGlzIGEgcHJvdG90eXBlIGZ1bmN0aW9uCgkJdGhpcy5fcmVuZGVyQXhpcyh0aGlzLmVsZW1lbnQpOwoKCQl0aGlzLl9oYW5kbGVzID0gJCgnLnVpLXJlc2l6YWJsZS1oYW5kbGUnLCB0aGlzLmVsZW1lbnQpCgkJCS5kaXNhYmxlU2VsZWN0aW9uKCk7CgoJCS8vTWF0Y2hpbmcgYXhpcyBuYW1lCgkJdGhpcy5faGFuZGxlcy5tb3VzZW92ZXIoZnVuY3Rpb24oKSB7CgkJCWlmICghdGhhdC5yZXNpemluZykgewoJCQkJaWYgKHRoaXMuY2xhc3NOYW1lKQoJCQkJCXZhciBheGlzID0gdGhpcy5jbGFzc05hbWUubWF0Y2goL3VpLXJlc2l6YWJsZS0oc2V8c3d8bmV8bnd8bnxlfHN8dykvaSk7CgkJCQkvL0F4aXMsIGRlZmF1bHQgPSBzZQoJCQkJdGhhdC5heGlzID0gYXhpcyAmJiBheGlzWzFdID8gYXhpc1sxXSA6ICdzZSc7CgkJCX0KCQl9KTsKCgkJLy9JZiB3ZSB3YW50IHRvIGF1dG8gaGlkZSB0aGUgZWxlbWVudHMKCQlpZiAoby5hdXRvSGlkZSkgewoJCQl0aGlzLl9oYW5kbGVzLmhpZGUoKTsKCQkJJCh0aGlzLmVsZW1lbnQpCgkJCQkuYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpCgkJCQkubW91c2VlbnRlcihmdW5jdGlvbigpIHsKCQkJCQlpZiAoby5kaXNhYmxlZCkgcmV0dXJuOwoJCQkJCSQodGhpcykucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpOwoJCQkJCXRoYXQuX2hhbmRsZXMuc2hvdygpOwoJCQkJfSkKCQkJCS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7CgkJCQkJaWYgKG8uZGlzYWJsZWQpIHJldHVybjsKCQkJCQlpZiAoIXRoYXQucmVzaXppbmcpIHsKCQkJCQkJJCh0aGlzKS5hZGRDbGFzcygidWktcmVzaXphYmxlLWF1dG9oaWRlIik7CgkJCQkJCXRoYXQuX2hhbmRsZXMuaGlkZSgpOwoJCQkJCX0KCQkJCX0pOwoJCX0KCgkJLy9Jbml0aWFsaXplIHRoZSBtb3VzZSBpbnRlcmFjdGlvbgoJCXRoaXMuX21vdXNlSW5pdCgpOwoKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoKCQl0aGlzLl9tb3VzZURlc3Ryb3koKTsKCgkJdmFyIF9kZXN0cm95ID0gZnVuY3Rpb24oZXhwKSB7CgkJCSQoZXhwKS5yZW1vdmVDbGFzcygidWktcmVzaXphYmxlIHVpLXJlc2l6YWJsZS1kaXNhYmxlZCB1aS1yZXNpemFibGUtcmVzaXppbmciKQoJCQkJLnJlbW92ZURhdGEoInJlc2l6YWJsZSIpLnJlbW92ZURhdGEoInVpLXJlc2l6YWJsZSIpLnVuYmluZCgiLnJlc2l6YWJsZSIpLmZpbmQoJy51aS1yZXNpemFibGUtaGFuZGxlJykucmVtb3ZlKCk7CgkJfTsKCgkJLy9UT0RPOiBVbndyYXAgYXQgc2FtZSBET00gcG9zaXRpb24KCQlpZiAodGhpcy5lbGVtZW50SXNXcmFwcGVyKSB7CgkJCV9kZXN0cm95KHRoaXMuZWxlbWVudCk7CgkJCXZhciB3cmFwcGVyID0gdGhpcy5lbGVtZW50OwoJCQl0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoewoJCQkJcG9zaXRpb246IHdyYXBwZXIuY3NzKCdwb3NpdGlvbicpLAoJCQkJd2lkdGg6IHdyYXBwZXIub3V0ZXJXaWR0aCgpLAoJCQkJaGVpZ2h0OiB3cmFwcGVyLm91dGVySGVpZ2h0KCksCgkJCQl0b3A6IHdyYXBwZXIuY3NzKCd0b3AnKSwKCQkJCWxlZnQ6IHdyYXBwZXIuY3NzKCdsZWZ0JykKCQkJfSkuaW5zZXJ0QWZ0ZXIoIHdyYXBwZXIgKTsKCQkJd3JhcHBlci5yZW1vdmUoKTsKCQl9CgoJCXRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygncmVzaXplJywgdGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlKTsKCQlfZGVzdHJveSh0aGlzLm9yaWdpbmFsRWxlbWVudCk7CgoJCXJldHVybiB0aGlzOwoJfSwKCglfbW91c2VDYXB0dXJlOiBmdW5jdGlvbihldmVudCkgewoJCXZhciBoYW5kbGUgPSBmYWxzZTsKCQlmb3IgKHZhciBpIGluIHRoaXMuaGFuZGxlcykgewoJCQlpZiAoJCh0aGlzLmhhbmRsZXNbaV0pWzBdID09IGV2ZW50LnRhcmdldCkgewoJCQkJaGFuZGxlID0gdHJ1ZTsKCQkJfQoJCX0KCgkJcmV0dXJuICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgaGFuZGxlOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIGluaVBvcyA9IHRoaXMuZWxlbWVudC5wb3NpdGlvbigpLCBlbCA9IHRoaXMuZWxlbWVudDsKCgkJdGhpcy5yZXNpemluZyA9IHRydWU7CgkJdGhpcy5kb2N1bWVudFNjcm9sbCA9IHsgdG9wOiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSwgbGVmdDogJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpIH07CgoJCS8vIGJ1Z2ZpeCBmb3IgaHR0cDovL2Rldi5qcXVlcnkuY29tL3RpY2tldC8xNzQ5CgkJaWYgKGVsLmlzKCcudWktZHJhZ2dhYmxlJykgfHwgKC9hYnNvbHV0ZS8pLnRlc3QoZWwuY3NzKCdwb3NpdGlvbicpKSkgewoJCQllbC5jc3MoeyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiBpbmlQb3MudG9wLCBsZWZ0OiBpbmlQb3MubGVmdCB9KTsKCQl9CgoJCXRoaXMuX3JlbmRlclByb3h5KCk7CgoJCXZhciBjdXJsZWZ0ID0gbnVtKHRoaXMuaGVscGVyLmNzcygnbGVmdCcpKSwgY3VydG9wID0gbnVtKHRoaXMuaGVscGVyLmNzcygndG9wJykpOwoKCQlpZiAoby5jb250YWlubWVudCkgewoJCQljdXJsZWZ0ICs9ICQoby5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpIHx8IDA7CgkJCWN1cnRvcCArPSAkKG8uY29udGFpbm1lbnQpLnNjcm9sbFRvcCgpIHx8IDA7CgkJfQoKCQkvL1N0b3JlIG5lZWRlZCB2YXJpYWJsZXMKCQl0aGlzLm9mZnNldCA9IHRoaXMuaGVscGVyLm9mZnNldCgpOwoJCXRoaXMucG9zaXRpb24gPSB7IGxlZnQ6IGN1cmxlZnQsIHRvcDogY3VydG9wIH07CgkJdGhpcy5zaXplID0gdGhpcy5faGVscGVyID8geyB3aWR0aDogZWwub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCkgfSA6IHsgd2lkdGg6IGVsLndpZHRoKCksIGhlaWdodDogZWwuaGVpZ2h0KCkgfTsKCQl0aGlzLm9yaWdpbmFsU2l6ZSA9IHRoaXMuX2hlbHBlciA/IHsgd2lkdGg6IGVsLm91dGVyV2lkdGgoKSwgaGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpIH0gOiB7IHdpZHRoOiBlbC53aWR0aCgpLCBoZWlnaHQ6IGVsLmhlaWdodCgpIH07CgkJdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBsZWZ0OiBjdXJsZWZ0LCB0b3A6IGN1cnRvcCB9OwoJCXRoaXMuc2l6ZURpZmYgPSB7IHdpZHRoOiBlbC5vdXRlcldpZHRoKCkgLSBlbC53aWR0aCgpLCBoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCkgLSBlbC5oZWlnaHQoKSB9OwoJCXRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uID0geyBsZWZ0OiBldmVudC5wYWdlWCwgdG9wOiBldmVudC5wYWdlWSB9OwoKCQkvL0FzcGVjdCBSYXRpbwoJCXRoaXMuYXNwZWN0UmF0aW8gPSAodHlwZW9mIG8uYXNwZWN0UmF0aW8gPT0gJ251bWJlcicpID8gby5hc3BlY3RSYXRpbyA6ICgodGhpcy5vcmlnaW5hbFNpemUud2lkdGggLyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQpIHx8IDEpOwoKCQl2YXIgY3Vyc29yID0gJCgnLnVpLXJlc2l6YWJsZS0nICsgdGhpcy5heGlzKS5jc3MoJ2N1cnNvcicpOwoJCSQoJ2JvZHknKS5jc3MoJ2N1cnNvcicsIGN1cnNvciA9PSAnYXV0bycgPyB0aGlzLmF4aXMgKyAnLXJlc2l6ZScgOiBjdXJzb3IpOwoKCQllbC5hZGRDbGFzcygidWktcmVzaXphYmxlLXJlc2l6aW5nIik7CgkJdGhpcy5fcHJvcGFnYXRlKCJzdGFydCIsIGV2ZW50KTsKCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJX21vdXNlRHJhZzogZnVuY3Rpb24oZXZlbnQpIHsKCgkJLy9JbmNyZWFzZSBwZXJmb3JtYW5jZSwgYXZvaWQgcmVnZXgKCQl2YXIgZWwgPSB0aGlzLmhlbHBlciwgbyA9IHRoaXMub3B0aW9ucywgcHJvcHMgPSB7fSwKCQkJdGhhdCA9IHRoaXMsIHNtcCA9IHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uLCBhID0gdGhpcy5heGlzOwoKCQl2YXIgZHggPSAoZXZlbnQucGFnZVgtc21wLmxlZnQpfHwwLCBkeSA9IChldmVudC5wYWdlWS1zbXAudG9wKXx8MDsKCQl2YXIgdHJpZ2dlciA9IHRoaXMuX2NoYW5nZVthXTsKCQlpZiAoIXRyaWdnZXIpIHJldHVybiBmYWxzZTsKCgkJLy8gQ2FsY3VsYXRlIHRoZSBhdHRycyB0aGF0IHdpbGwgYmUgY2hhbmdlCgkJdmFyIGRhdGEgPSB0cmlnZ2VyLmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSk7CgoJCS8vIFB1dCB0aGlzIGluIHRoZSBtb3VzZURyYWcgaGFuZGxlciBzaW5jZSB0aGUgdXNlciBjYW4gc3RhcnQgcHJlc3Npbmcgc2hpZnQgd2hpbGUgcmVzaXppbmcKCQl0aGlzLl91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyhldmVudC5zaGlmdEtleSk7CgkJaWYgKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGV2ZW50LnNoaWZ0S2V5KQoJCQlkYXRhID0gdGhpcy5fdXBkYXRlUmF0aW8oZGF0YSwgZXZlbnQpOwoKCQlkYXRhID0gdGhpcy5fcmVzcGVjdFNpemUoZGF0YSwgZXZlbnQpOwoKCQkvLyBwbHVnaW5zIGNhbGxiYWNrcyBuZWVkIHRvIGJlIGNhbGxlZCBmaXJzdAoJCXRoaXMuX3Byb3BhZ2F0ZSgicmVzaXplIiwgZXZlbnQpOwoKCQllbC5jc3MoewoJCQl0b3A6IHRoaXMucG9zaXRpb24udG9wICsgInB4IiwgbGVmdDogdGhpcy5wb3NpdGlvbi5sZWZ0ICsgInB4IiwKCQkJd2lkdGg6IHRoaXMuc2l6ZS53aWR0aCArICJweCIsIGhlaWdodDogdGhpcy5zaXplLmhlaWdodCArICJweCIKCQl9KTsKCgkJaWYgKCF0aGlzLl9oZWxwZXIgJiYgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGgpCgkJCXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7CgoJCXRoaXMuX3VwZGF0ZUNhY2hlKGRhdGEpOwoKCQkvLyBjYWxsaW5nIHRoZSB1c2VyIGNhbGxiYWNrIGF0IHRoZSBlbmQKCQl0aGlzLl90cmlnZ2VyKCdyZXNpemUnLCBldmVudCwgdGhpcy51aSgpKTsKCgkJcmV0dXJuIGZhbHNlOwoJfSwKCglfbW91c2VTdG9wOiBmdW5jdGlvbihldmVudCkgewoKCQl0aGlzLnJlc2l6aW5nID0gZmFsc2U7CgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIHRoYXQgPSB0aGlzOwoKCQlpZih0aGlzLl9oZWxwZXIpIHsKCQkJdmFyIHByID0gdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cywgaXN0YSA9IHByLmxlbmd0aCAmJiAoL3RleHRhcmVhL2kpLnRlc3QocHJbMF0ubm9kZU5hbWUpLAoJCQkJc29mZnNldGggPSBpc3RhICYmICQudWkuaGFzU2Nyb2xsKHByWzBdLCAnbGVmdCcpIC8qIFRPRE8gLSBqdW1wIGhlaWdodCAqLyA/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodCwKCQkJCXNvZmZzZXR3ID0gaXN0YSA/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoOwoKCQkJdmFyIHMgPSB7IHdpZHRoOiAodGhhdC5oZWxwZXIud2lkdGgoKSAgLSBzb2Zmc2V0dyksIGhlaWdodDogKHRoYXQuaGVscGVyLmhlaWdodCgpIC0gc29mZnNldGgpIH0sCgkJCQlsZWZ0ID0gKHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoJ2xlZnQnKSwgMTApICsgKHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSkgfHwgbnVsbCwKCQkJCXRvcCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCd0b3AnKSwgMTApICsgKHRoYXQucG9zaXRpb24udG9wIC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLnRvcCkpIHx8IG51bGw7CgoJCQlpZiAoIW8uYW5pbWF0ZSkKCQkJCXRoaXMuZWxlbWVudC5jc3MoJC5leHRlbmQocywgeyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9KSk7CgoJCQl0aGF0LmhlbHBlci5oZWlnaHQodGhhdC5zaXplLmhlaWdodCk7CgkJCXRoYXQuaGVscGVyLndpZHRoKHRoYXQuc2l6ZS53aWR0aCk7CgoJCQlpZiAodGhpcy5faGVscGVyICYmICFvLmFuaW1hdGUpIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7CgkJfQoKCQkkKCdib2R5JykuY3NzKCdjdXJzb3InLCAnYXV0bycpOwoKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1yZXNpemluZyIpOwoKCQl0aGlzLl9wcm9wYWdhdGUoInN0b3AiLCBldmVudCk7CgoJCWlmICh0aGlzLl9oZWxwZXIpIHRoaXMuaGVscGVyLnJlbW92ZSgpOwoJCXJldHVybiBmYWxzZTsKCgl9LAoKCV91cGRhdGVWaXJ0dWFsQm91bmRhcmllczogZnVuY3Rpb24oZm9yY2VBc3BlY3RSYXRpbykgewoJCXZhciBvID0gdGhpcy5vcHRpb25zLCBwTWluV2lkdGgsIHBNYXhXaWR0aCwgcE1pbkhlaWdodCwgcE1heEhlaWdodCwgYjsKCgkJYiA9IHsKCQkJbWluV2lkdGg6IGlzTnVtYmVyKG8ubWluV2lkdGgpID8gby5taW5XaWR0aCA6IDAsCgkJCW1heFdpZHRoOiBpc051bWJlcihvLm1heFdpZHRoKSA/IG8ubWF4V2lkdGggOiBJbmZpbml0eSwKCQkJbWluSGVpZ2h0OiBpc051bWJlcihvLm1pbkhlaWdodCkgPyBvLm1pbkhlaWdodCA6IDAsCgkJCW1heEhlaWdodDogaXNOdW1iZXIoby5tYXhIZWlnaHQpID8gby5tYXhIZWlnaHQgOiBJbmZpbml0eQoJCX07CgoJCWlmKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGZvcmNlQXNwZWN0UmF0aW8pIHsKCQkJLy8gV2Ugd2FudCB0byBjcmVhdGUgYW4gZW5jbG9zaW5nIGJveCB3aG9zZSBhc3BlY3QgcmF0aW9uIGlzIHRoZSByZXF1ZXN0ZWQgb25lCgkJCS8vIEZpcnN0LCBjb21wdXRlIHRoZSAicHJvamVjdGVkIiBzaXplIGZvciBlYWNoIGRpbWVuc2lvbiBiYXNlZCBvbiB0aGUgYXNwZWN0IHJhdGlvIGFuZCBvdGhlciBkaW1lbnNpb24KCQkJcE1pbldpZHRoID0gYi5taW5IZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvOwoJCQlwTWluSGVpZ2h0ID0gYi5taW5XaWR0aCAvIHRoaXMuYXNwZWN0UmF0aW87CgkJCXBNYXhXaWR0aCA9IGIubWF4SGVpZ2h0ICogdGhpcy5hc3BlY3RSYXRpbzsKCQkJcE1heEhlaWdodCA9IGIubWF4V2lkdGggLyB0aGlzLmFzcGVjdFJhdGlvOwoKCQkJaWYocE1pbldpZHRoID4gYi5taW5XaWR0aCkgYi5taW5XaWR0aCA9IHBNaW5XaWR0aDsKCQkJaWYocE1pbkhlaWdodCA+IGIubWluSGVpZ2h0KSBiLm1pbkhlaWdodCA9IHBNaW5IZWlnaHQ7CgkJCWlmKHBNYXhXaWR0aCA8IGIubWF4V2lkdGgpIGIubWF4V2lkdGggPSBwTWF4V2lkdGg7CgkJCWlmKHBNYXhIZWlnaHQgPCBiLm1heEhlaWdodCkgYi5tYXhIZWlnaHQgPSBwTWF4SGVpZ2h0OwoJCX0KCQl0aGlzLl92Qm91bmRhcmllcyA9IGI7Cgl9LAoKCV91cGRhdGVDYWNoZTogZnVuY3Rpb24oZGF0YSkgewoJCXZhciBvID0gdGhpcy5vcHRpb25zOwoJCXRoaXMub2Zmc2V0ID0gdGhpcy5oZWxwZXIub2Zmc2V0KCk7CgkJaWYgKGlzTnVtYmVyKGRhdGEubGVmdCkpIHRoaXMucG9zaXRpb24ubGVmdCA9IGRhdGEubGVmdDsKCQlpZiAoaXNOdW1iZXIoZGF0YS50b3ApKSB0aGlzLnBvc2l0aW9uLnRvcCA9IGRhdGEudG9wOwoJCWlmIChpc051bWJlcihkYXRhLmhlaWdodCkpIHRoaXMuc2l6ZS5oZWlnaHQgPSBkYXRhLmhlaWdodDsKCQlpZiAoaXNOdW1iZXIoZGF0YS53aWR0aCkpIHRoaXMuc2l6ZS53aWR0aCA9IGRhdGEud2lkdGg7Cgl9LAoKCV91cGRhdGVSYXRpbzogZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIGNwb3MgPSB0aGlzLnBvc2l0aW9uLCBjc2l6ZSA9IHRoaXMuc2l6ZSwgYSA9IHRoaXMuYXhpczsKCgkJaWYgKGlzTnVtYmVyKGRhdGEuaGVpZ2h0KSkgZGF0YS53aWR0aCA9IChkYXRhLmhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW8pOwoJCWVsc2UgaWYgKGlzTnVtYmVyKGRhdGEud2lkdGgpKSBkYXRhLmhlaWdodCA9IChkYXRhLndpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyk7CgoJCWlmIChhID09ICdzdycpIHsKCQkJZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCk7CgkJCWRhdGEudG9wID0gbnVsbDsKCQl9CgkJaWYgKGEgPT0gJ253JykgewoJCQlkYXRhLnRvcCA9IGNwb3MudG9wICsgKGNzaXplLmhlaWdodCAtIGRhdGEuaGVpZ2h0KTsKCQkJZGF0YS5sZWZ0ID0gY3Bvcy5sZWZ0ICsgKGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCk7CgkJfQoKCQlyZXR1cm4gZGF0YTsKCX0sCgoJX3Jlc3BlY3RTaXplOiBmdW5jdGlvbihkYXRhLCBldmVudCkgewoKCQl2YXIgZWwgPSB0aGlzLmhlbHBlciwgbyA9IHRoaXMuX3ZCb3VuZGFyaWVzLCBwUmF0aW8gPSB0aGlzLl9hc3BlY3RSYXRpbyB8fCBldmVudC5zaGlmdEtleSwgYSA9IHRoaXMuYXhpcywKCQkJCWlzbWF4dyA9IGlzTnVtYmVyKGRhdGEud2lkdGgpICYmIG8ubWF4V2lkdGggJiYgKG8ubWF4V2lkdGggPCBkYXRhLndpZHRoKSwgaXNtYXhoID0gaXNOdW1iZXIoZGF0YS5oZWlnaHQpICYmIG8ubWF4SGVpZ2h0ICYmIChvLm1heEhlaWdodCA8IGRhdGEuaGVpZ2h0KSwKCQkJCQlpc21pbncgPSBpc051bWJlcihkYXRhLndpZHRoKSAmJiBvLm1pbldpZHRoICYmIChvLm1pbldpZHRoID4gZGF0YS53aWR0aCksIGlzbWluaCA9IGlzTnVtYmVyKGRhdGEuaGVpZ2h0KSAmJiBvLm1pbkhlaWdodCAmJiAoby5taW5IZWlnaHQgPiBkYXRhLmhlaWdodCk7CgoJCWlmIChpc21pbncpIGRhdGEud2lkdGggPSBvLm1pbldpZHRoOwoJCWlmIChpc21pbmgpIGRhdGEuaGVpZ2h0ID0gby5taW5IZWlnaHQ7CgkJaWYgKGlzbWF4dykgZGF0YS53aWR0aCA9IG8ubWF4V2lkdGg7CgkJaWYgKGlzbWF4aCkgZGF0YS5oZWlnaHQgPSBvLm1heEhlaWdodDsKCgkJdmFyIGR3ID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgKyB0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCwgZGggPSB0aGlzLnBvc2l0aW9uLnRvcCArIHRoaXMuc2l6ZS5oZWlnaHQ7CgkJdmFyIGN3ID0gL3N3fG53fHcvLnRlc3QoYSksIGNoID0gL253fG5lfG4vLnRlc3QoYSk7CgoJCWlmIChpc21pbncgJiYgY3cpIGRhdGEubGVmdCA9IGR3IC0gby5taW5XaWR0aDsKCQlpZiAoaXNtYXh3ICYmIGN3KSBkYXRhLmxlZnQgPSBkdyAtIG8ubWF4V2lkdGg7CgkJaWYgKGlzbWluaCAmJiBjaCkJZGF0YS50b3AgPSBkaCAtIG8ubWluSGVpZ2h0OwoJCWlmIChpc21heGggJiYgY2gpCWRhdGEudG9wID0gZGggLSBvLm1heEhlaWdodDsKCgkJLy8gZml4aW5nIGp1bXAgZXJyb3Igb24gdG9wL2xlZnQgLSBidWcgIzIzMzAKCQl2YXIgaXNOb3R3aCA9ICFkYXRhLndpZHRoICYmICFkYXRhLmhlaWdodDsKCQlpZiAoaXNOb3R3aCAmJiAhZGF0YS5sZWZ0ICYmIGRhdGEudG9wKSBkYXRhLnRvcCA9IG51bGw7CgkJZWxzZSBpZiAoaXNOb3R3aCAmJiAhZGF0YS50b3AgJiYgZGF0YS5sZWZ0KSBkYXRhLmxlZnQgPSBudWxsOwoKCQlyZXR1cm4gZGF0YTsKCX0sCgoJX3Byb3BvcnRpb25hbGx5UmVzaXplOiBmdW5jdGlvbigpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgkJaWYgKCF0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCkgcmV0dXJuOwoJCXZhciBlbGVtZW50ID0gdGhpcy5oZWxwZXIgfHwgdGhpcy5lbGVtZW50OwoKCQlmb3IgKHZhciBpPTA7IGkgPCB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CgoJCQl2YXIgcHJlbCA9IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHNbaV07CgoJCQlpZiAoIXRoaXMuYm9yZGVyRGlmKSB7CgkJCQl2YXIgYiA9IFtwcmVsLmNzcygnYm9yZGVyVG9wV2lkdGgnKSwgcHJlbC5jc3MoJ2JvcmRlclJpZ2h0V2lkdGgnKSwgcHJlbC5jc3MoJ2JvcmRlckJvdHRvbVdpZHRoJyksIHByZWwuY3NzKCdib3JkZXJMZWZ0V2lkdGgnKV0sCgkJCQkJcCA9IFtwcmVsLmNzcygncGFkZGluZ1RvcCcpLCBwcmVsLmNzcygncGFkZGluZ1JpZ2h0JyksIHByZWwuY3NzKCdwYWRkaW5nQm90dG9tJyksIHByZWwuY3NzKCdwYWRkaW5nTGVmdCcpXTsKCgkJCQl0aGlzLmJvcmRlckRpZiA9ICQubWFwKGIsIGZ1bmN0aW9uKHYsIGkpIHsKCQkJCQl2YXIgYm9yZGVyID0gcGFyc2VJbnQodiwxMCl8fDAsIHBhZGRpbmcgPSBwYXJzZUludChwW2ldLDEwKXx8MDsKCQkJCQlyZXR1cm4gYm9yZGVyICsgcGFkZGluZzsKCQkJCX0pOwoJCQl9CgoJCQlwcmVsLmNzcyh7CgkJCQloZWlnaHQ6IChlbGVtZW50LmhlaWdodCgpIC0gdGhpcy5ib3JkZXJEaWZbMF0gLSB0aGlzLmJvcmRlckRpZlsyXSkgfHwgMCwKCQkJCXdpZHRoOiAoZWxlbWVudC53aWR0aCgpIC0gdGhpcy5ib3JkZXJEaWZbMV0gLSB0aGlzLmJvcmRlckRpZlszXSkgfHwgMAoJCQl9KTsKCgkJfTsKCgl9LAoKCV9yZW5kZXJQcm94eTogZnVuY3Rpb24oKSB7CgoJCXZhciBlbCA9IHRoaXMuZWxlbWVudCwgbyA9IHRoaXMub3B0aW9uczsKCQl0aGlzLmVsZW1lbnRPZmZzZXQgPSBlbC5vZmZzZXQoKTsKCgkJaWYodGhpcy5faGVscGVyKSB7CgoJCQl0aGlzLmhlbHBlciA9IHRoaXMuaGVscGVyIHx8ICQoJzxkaXYgc3R5bGU9Im92ZXJmbG93OmhpZGRlbjsiPjwvZGl2PicpOwoKCQkJLy8gZml4IGllNiBvZmZzZXQgVE9ETzogVGhpcyBzZWVtcyBicm9rZW4KCQkJdmFyIGllNm9mZnNldCA9ICgkLnVpLmllNiA/IDEgOiAwKSwKCQkJcHh5b2Zmc2V0ID0gKCAkLnVpLmllNiA/IDIgOiAtMSApOwoKCQkJdGhpcy5oZWxwZXIuYWRkQ2xhc3ModGhpcy5faGVscGVyKS5jc3MoewoJCQkJd2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCkgKyBweHlvZmZzZXQsCgkJCQloZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpICsgcHh5b2Zmc2V0LAoJCQkJcG9zaXRpb246ICdhYnNvbHV0ZScsCgkJCQlsZWZ0OiB0aGlzLmVsZW1lbnRPZmZzZXQubGVmdCAtIGllNm9mZnNldCArJ3B4JywKCQkJCXRvcDogdGhpcy5lbGVtZW50T2Zmc2V0LnRvcCAtIGllNm9mZnNldCArJ3B4JywKCQkJCXpJbmRleDogKytvLnpJbmRleCAvL1RPRE86IERvbid0IG1vZGlmeSBvcHRpb24KCQkJfSk7CgoJCQl0aGlzLmhlbHBlcgoJCQkJLmFwcGVuZFRvKCJib2R5IikKCQkJCS5kaXNhYmxlU2VsZWN0aW9uKCk7CgoJCX0gZWxzZSB7CgkJCXRoaXMuaGVscGVyID0gdGhpcy5lbGVtZW50OwoJCX0KCgl9LAoKCV9jaGFuZ2U6IHsKCQllOiBmdW5jdGlvbihldmVudCwgZHgsIGR5KSB7CgkJCXJldHVybiB7IHdpZHRoOiB0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCArIGR4IH07CgkJfSwKCQl3OiBmdW5jdGlvbihldmVudCwgZHgsIGR5KSB7CgkJCXZhciBvID0gdGhpcy5vcHRpb25zLCBjcyA9IHRoaXMub3JpZ2luYWxTaXplLCBzcCA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbjsKCQkJcmV0dXJuIHsgbGVmdDogc3AubGVmdCArIGR4LCB3aWR0aDogY3Mud2lkdGggLSBkeCB9OwoJCX0sCgkJbjogZnVuY3Rpb24oZXZlbnQsIGR4LCBkeSkgewoJCQl2YXIgbyA9IHRoaXMub3B0aW9ucywgY3MgPSB0aGlzLm9yaWdpbmFsU2l6ZSwgc3AgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247CgkJCXJldHVybiB7IHRvcDogc3AudG9wICsgZHksIGhlaWdodDogY3MuaGVpZ2h0IC0gZHkgfTsKCQl9LAoJCXM6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHsKCQkJcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQgKyBkeSB9OwoJCX0sCgkJc2U6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHsKCQkJcmV0dXJuICQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSkpOwoJCX0sCgkJc3c6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHsKCQkJcmV0dXJuICQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS53LmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSkpOwoJCX0sCgkJbmU6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHsKCQkJcmV0dXJuICQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSkpOwoJCX0sCgkJbnc6IGZ1bmN0aW9uKGV2ZW50LCBkeCwgZHkpIHsKCQkJcmV0dXJuICQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS53LmFwcGx5KHRoaXMsIFtldmVudCwgZHgsIGR5XSkpOwoJCX0KCX0sCgoJX3Byb3BhZ2F0ZTogZnVuY3Rpb24obiwgZXZlbnQpIHsKCQkkLnVpLnBsdWdpbi5jYWxsKHRoaXMsIG4sIFtldmVudCwgdGhpcy51aSgpXSk7CgkJKG4gIT0gInJlc2l6ZSIgJiYgdGhpcy5fdHJpZ2dlcihuLCBldmVudCwgdGhpcy51aSgpKSk7Cgl9LAoKCXBsdWdpbnM6IHt9LAoKCXVpOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gewoJCQlvcmlnaW5hbEVsZW1lbnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LAoJCQllbGVtZW50OiB0aGlzLmVsZW1lbnQsCgkJCWhlbHBlcjogdGhpcy5oZWxwZXIsCgkJCXBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLAoJCQlzaXplOiB0aGlzLnNpemUsCgkJCW9yaWdpbmFsU2l6ZTogdGhpcy5vcmlnaW5hbFNpemUsCgkJCW9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbgoJCX07Cgl9Cgp9KTsKCi8qCiAqIFJlc2l6YWJsZSBFeHRlbnNpb25zCiAqLwoKJC51aS5wbHVnaW4uYWRkKCJyZXNpemFibGUiLCAiYWxzb1Jlc2l6ZSIsIHsKCglzdGFydDogZnVuY3Rpb24gKGV2ZW50LCB1aSkgewoJCXZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCJyZXNpemFibGUiKSwgbyA9IHRoYXQub3B0aW9uczsKCgkJdmFyIF9zdG9yZSA9IGZ1bmN0aW9uIChleHApIHsKCQkJJChleHApLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgZWwgPSAkKHRoaXMpOwoJCQkJZWwuZGF0YSgicmVzaXphYmxlLWFsc29yZXNpemUiLCB7CgkJCQkJd2lkdGg6IHBhcnNlSW50KGVsLndpZHRoKCksIDEwKSwgaGVpZ2h0OiBwYXJzZUludChlbC5oZWlnaHQoKSwgMTApLAoJCQkJCWxlZnQ6IHBhcnNlSW50KGVsLmNzcygnbGVmdCcpLCAxMCksIHRvcDogcGFyc2VJbnQoZWwuY3NzKCd0b3AnKSwgMTApCgkJCQl9KTsKCQkJfSk7CgkJfTsKCgkJaWYgKHR5cGVvZihvLmFsc29SZXNpemUpID09ICdvYmplY3QnICYmICFvLmFsc29SZXNpemUucGFyZW50Tm9kZSkgewoJCQlpZiAoby5hbHNvUmVzaXplLmxlbmd0aCkgeyBvLmFsc29SZXNpemUgPSBvLmFsc29SZXNpemVbMF07IF9zdG9yZShvLmFsc29SZXNpemUpOyB9CgkJCWVsc2UgeyAkLmVhY2goby5hbHNvUmVzaXplLCBmdW5jdGlvbiAoZXhwKSB7IF9zdG9yZShleHApOyB9KTsgfQoJCX1lbHNlewoJCQlfc3RvcmUoby5hbHNvUmVzaXplKTsKCQl9Cgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24gKGV2ZW50LCB1aSkgewoJCXZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCJyZXNpemFibGUiKSwgbyA9IHRoYXQub3B0aW9ucywgb3MgPSB0aGF0Lm9yaWdpbmFsU2l6ZSwgb3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb247CgoJCXZhciBkZWx0YSA9IHsKCQkJaGVpZ2h0OiAodGhhdC5zaXplLmhlaWdodCAtIG9zLmhlaWdodCkgfHwgMCwgd2lkdGg6ICh0aGF0LnNpemUud2lkdGggLSBvcy53aWR0aCkgfHwgMCwKCQkJdG9wOiAodGhhdC5wb3NpdGlvbi50b3AgLSBvcC50b3ApIHx8IDAsIGxlZnQ6ICh0aGF0LnBvc2l0aW9uLmxlZnQgLSBvcC5sZWZ0KSB8fCAwCgkJfSwKCgkJX2Fsc29SZXNpemUgPSBmdW5jdGlvbiAoZXhwLCBjKSB7CgkJCSQoZXhwKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGVsID0gJCh0aGlzKSwgc3RhcnQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZS1hbHNvcmVzaXplIiksIHN0eWxlID0ge30sCgkJCQkJY3NzID0gYyAmJiBjLmxlbmd0aCA/IGMgOiBlbC5wYXJlbnRzKHVpLm9yaWdpbmFsRWxlbWVudFswXSkubGVuZ3RoID8gWyd3aWR0aCcsICdoZWlnaHQnXSA6IFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdsZWZ0J107CgoJCQkJJC5lYWNoKGNzcywgZnVuY3Rpb24gKGksIHByb3ApIHsKCQkJCQl2YXIgc3VtID0gKHN0YXJ0W3Byb3BdfHwwKSArIChkZWx0YVtwcm9wXXx8MCk7CgkJCQkJaWYgKHN1bSAmJiBzdW0gPj0gMCkKCQkJCQkJc3R5bGVbcHJvcF0gPSBzdW0gfHwgbnVsbDsKCQkJCX0pOwoKCQkJCWVsLmNzcyhzdHlsZSk7CgkJCX0pOwoJCX07CgoJCWlmICh0eXBlb2Yoby5hbHNvUmVzaXplKSA9PSAnb2JqZWN0JyAmJiAhby5hbHNvUmVzaXplLm5vZGVUeXBlKSB7CgkJCSQuZWFjaChvLmFsc29SZXNpemUsIGZ1bmN0aW9uIChleHAsIGMpIHsgX2Fsc29SZXNpemUoZXhwLCBjKTsgfSk7CgkJfWVsc2V7CgkJCV9hbHNvUmVzaXplKG8uYWxzb1Jlc2l6ZSk7CgkJfQoJfSwKCglzdG9wOiBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7CgkJJCh0aGlzKS5yZW1vdmVEYXRhKCJyZXNpemFibGUtYWxzb3Jlc2l6ZSIpOwoJfQp9KTsKCiQudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwgImFuaW1hdGUiLCB7CgoJc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLCBvID0gdGhhdC5vcHRpb25zOwoKCQl2YXIgcHIgPSB0aGF0Ll9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLCBpc3RhID0gcHIubGVuZ3RoICYmICgvdGV4dGFyZWEvaSkudGVzdChwclswXS5ub2RlTmFtZSksCgkJCQkJc29mZnNldGggPSBpc3RhICYmICQudWkuaGFzU2Nyb2xsKHByWzBdLCAnbGVmdCcpIC8qIFRPRE8gLSBqdW1wIGhlaWdodCAqLyA/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodCwKCQkJCQkJc29mZnNldHcgPSBpc3RhID8gMCA6IHRoYXQuc2l6ZURpZmYud2lkdGg7CgoJCXZhciBzdHlsZSA9IHsgd2lkdGg6ICh0aGF0LnNpemUud2lkdGggLSBzb2Zmc2V0dyksIGhlaWdodDogKHRoYXQuc2l6ZS5oZWlnaHQgLSBzb2Zmc2V0aCkgfSwKCQkJCQlsZWZ0ID0gKHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoJ2xlZnQnKSwgMTApICsgKHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSkgfHwgbnVsbCwKCQkJCQkJdG9wID0gKHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoJ3RvcCcpLCAxMCkgKyAodGhhdC5wb3NpdGlvbi50b3AgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24udG9wKSkgfHwgbnVsbDsKCgkJdGhhdC5lbGVtZW50LmFuaW1hdGUoCgkJCSQuZXh0ZW5kKHN0eWxlLCB0b3AgJiYgbGVmdCA/IHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSA6IHt9KSwgewoJCQkJZHVyYXRpb246IG8uYW5pbWF0ZUR1cmF0aW9uLAoJCQkJZWFzaW5nOiBvLmFuaW1hdGVFYXNpbmcsCgkJCQlzdGVwOiBmdW5jdGlvbigpIHsKCgkJCQkJdmFyIGRhdGEgPSB7CgkJCQkJCXdpZHRoOiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCd3aWR0aCcpLCAxMCksCgkJCQkJCWhlaWdodDogcGFyc2VJbnQodGhhdC5lbGVtZW50LmNzcygnaGVpZ2h0JyksIDEwKSwKCQkJCQkJdG9wOiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCd0b3AnKSwgMTApLAoJCQkJCQlsZWZ0OiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCdsZWZ0JyksIDEwKQoJCQkJCX07CgoJCQkJCWlmIChwciAmJiBwci5sZW5ndGgpICQocHJbMF0pLmNzcyh7IHdpZHRoOiBkYXRhLndpZHRoLCBoZWlnaHQ6IGRhdGEuaGVpZ2h0IH0pOwoKCQkJCQkvLyBwcm9wYWdhdGluZyByZXNpemUsIGFuZCB1cGRhdGluZyB2YWx1ZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHN0ZXAKCQkJCQl0aGF0Ll91cGRhdGVDYWNoZShkYXRhKTsKCQkJCQl0aGF0Ll9wcm9wYWdhdGUoInJlc2l6ZSIsIGV2ZW50KTsKCgkJCQl9CgkJCX0KCQkpOwoJfQoKfSk7CgokLnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsICJjb250YWlubWVudCIsIHsKCglzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLCBvID0gdGhhdC5vcHRpb25zLCBlbCA9IHRoYXQuZWxlbWVudDsKCQl2YXIgb2MgPSBvLmNvbnRhaW5tZW50LAljZSA9IChvYyBpbnN0YW5jZW9mICQpID8gb2MuZ2V0KDApIDogKC9wYXJlbnQvLnRlc3Qob2MpKSA/IGVsLnBhcmVudCgpLmdldCgwKSA6IG9jOwoJCWlmICghY2UpIHJldHVybjsKCgkJdGhhdC5jb250YWluZXJFbGVtZW50ID0gJChjZSk7CgoJCWlmICgvZG9jdW1lbnQvLnRlc3Qob2MpIHx8IG9jID09IGRvY3VtZW50KSB7CgkJCXRoYXQuY29udGFpbmVyT2Zmc2V0ID0geyBsZWZ0OiAwLCB0b3A6IDAgfTsKCQkJdGhhdC5jb250YWluZXJQb3NpdGlvbiA9IHsgbGVmdDogMCwgdG9wOiAwIH07CgoJCQl0aGF0LnBhcmVudERhdGEgPSB7CgkJCQllbGVtZW50OiAkKGRvY3VtZW50KSwgbGVmdDogMCwgdG9wOiAwLAoJCQkJd2lkdGg6ICQoZG9jdW1lbnQpLndpZHRoKCksIGhlaWdodDogJChkb2N1bWVudCkuaGVpZ2h0KCkgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodAoJCQl9OwoJCX0KCgkJLy8gaSdtIGEgbm9kZSwgc28gY29tcHV0ZSB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20KCQllbHNlIHsKCQkJdmFyIGVsZW1lbnQgPSAkKGNlKSwgcCA9IFtdOwoJCQkkKFsgIlRvcCIsICJSaWdodCIsICJMZWZ0IiwgIkJvdHRvbSIgXSkuZWFjaChmdW5jdGlvbihpLCBuYW1lKSB7IHBbaV0gPSBudW0oZWxlbWVudC5jc3MoInBhZGRpbmciICsgbmFtZSkpOyB9KTsKCgkJCXRoYXQuY29udGFpbmVyT2Zmc2V0ID0gZWxlbWVudC5vZmZzZXQoKTsKCQkJdGhhdC5jb250YWluZXJQb3NpdGlvbiA9IGVsZW1lbnQucG9zaXRpb24oKTsKCQkJdGhhdC5jb250YWluZXJTaXplID0geyBoZWlnaHQ6IChlbGVtZW50LmlubmVySGVpZ2h0KCkgLSBwWzNdKSwgd2lkdGg6IChlbGVtZW50LmlubmVyV2lkdGgoKSAtIHBbMV0pIH07CgoJCQl2YXIgY28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCwgY2ggPSB0aGF0LmNvbnRhaW5lclNpemUuaGVpZ2h0LAljdyA9IHRoYXQuY29udGFpbmVyU2l6ZS53aWR0aCwKCQkJCQkJd2lkdGggPSAoJC51aS5oYXNTY3JvbGwoY2UsICJsZWZ0IikgPyBjZS5zY3JvbGxXaWR0aCA6IGN3ICksIGhlaWdodCA9ICgkLnVpLmhhc1Njcm9sbChjZSkgPyBjZS5zY3JvbGxIZWlnaHQgOiBjaCk7CgoJCQl0aGF0LnBhcmVudERhdGEgPSB7CgkJCQllbGVtZW50OiBjZSwgbGVmdDogY28ubGVmdCwgdG9wOiBjby50b3AsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQKCQkJfTsKCQl9Cgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLCBvID0gdGhhdC5vcHRpb25zLAoJCQkJcHMgPSB0aGF0LmNvbnRhaW5lclNpemUsIGNvID0gdGhhdC5jb250YWluZXJPZmZzZXQsIGNzID0gdGhhdC5zaXplLCBjcCA9IHRoYXQucG9zaXRpb24sCgkJCQlwUmF0aW8gPSB0aGF0Ll9hc3BlY3RSYXRpbyB8fCBldmVudC5zaGlmdEtleSwgY29wID0geyB0b3A6MCwgbGVmdDowIH0sIGNlID0gdGhhdC5jb250YWluZXJFbGVtZW50OwoKCQlpZiAoY2VbMF0gIT0gZG9jdW1lbnQgJiYgKC9zdGF0aWMvKS50ZXN0KGNlLmNzcygncG9zaXRpb24nKSkpIGNvcCA9IGNvOwoKCQlpZiAoY3AubGVmdCA8ICh0aGF0Ll9oZWxwZXIgPyBjby5sZWZ0IDogMCkpIHsKCQkJdGhhdC5zaXplLndpZHRoID0gdGhhdC5zaXplLndpZHRoICsgKHRoYXQuX2hlbHBlciA/ICh0aGF0LnBvc2l0aW9uLmxlZnQgLSBjby5sZWZ0KSA6ICh0aGF0LnBvc2l0aW9uLmxlZnQgLSBjb3AubGVmdCkpOwoJCQlpZiAocFJhdGlvKSB0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbzsKCQkJdGhhdC5wb3NpdGlvbi5sZWZ0ID0gby5oZWxwZXIgPyBjby5sZWZ0IDogMDsKCQl9CgoJCWlmIChjcC50b3AgPCAodGhhdC5faGVscGVyID8gY28udG9wIDogMCkpIHsKCQkJdGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS5oZWlnaHQgKyAodGhhdC5faGVscGVyID8gKHRoYXQucG9zaXRpb24udG9wIC0gY28udG9wKSA6IHRoYXQucG9zaXRpb24udG9wKTsKCQkJaWYgKHBSYXRpbykgdGhhdC5zaXplLndpZHRoID0gdGhhdC5zaXplLmhlaWdodCAqIHRoYXQuYXNwZWN0UmF0aW87CgkJCXRoYXQucG9zaXRpb24udG9wID0gdGhhdC5faGVscGVyID8gY28udG9wIDogMDsKCQl9CgoJCXRoYXQub2Zmc2V0LmxlZnQgPSB0aGF0LnBhcmVudERhdGEubGVmdCt0aGF0LnBvc2l0aW9uLmxlZnQ7CgkJdGhhdC5vZmZzZXQudG9wID0gdGhhdC5wYXJlbnREYXRhLnRvcCt0aGF0LnBvc2l0aW9uLnRvcDsKCgkJdmFyIHdvc2V0ID0gTWF0aC5hYnMoICh0aGF0Ll9oZWxwZXIgPyB0aGF0Lm9mZnNldC5sZWZ0IC0gY29wLmxlZnQgOiAodGhhdC5vZmZzZXQubGVmdCAtIGNvcC5sZWZ0KSkgKyB0aGF0LnNpemVEaWZmLndpZHRoICksCgkJCQkJaG9zZXQgPSBNYXRoLmFicyggKHRoYXQuX2hlbHBlciA/IHRoYXQub2Zmc2V0LnRvcCAtIGNvcC50b3AgOiAodGhhdC5vZmZzZXQudG9wIC0gY28udG9wKSkgKyB0aGF0LnNpemVEaWZmLmhlaWdodCApOwoKCQl2YXIgaXNQYXJlbnQgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQuZ2V0KDApID09IHRoYXQuZWxlbWVudC5wYXJlbnQoKS5nZXQoMCksCgkJCWlzT2Zmc2V0UmVsYXRpdmUgPSAvcmVsYXRpdmV8YWJzb2x1dGUvLnRlc3QodGhhdC5jb250YWluZXJFbGVtZW50LmNzcygncG9zaXRpb24nKSk7CgoJCWlmKGlzUGFyZW50ICYmIGlzT2Zmc2V0UmVsYXRpdmUpIHdvc2V0IC09IHRoYXQucGFyZW50RGF0YS5sZWZ0OwoKCQlpZiAod29zZXQgKyB0aGF0LnNpemUud2lkdGggPj0gdGhhdC5wYXJlbnREYXRhLndpZHRoKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQucGFyZW50RGF0YS53aWR0aCAtIHdvc2V0OwoJCQlpZiAocFJhdGlvKSB0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbzsKCQl9CgoJCWlmIChob3NldCArIHRoYXQuc2l6ZS5oZWlnaHQgPj0gdGhhdC5wYXJlbnREYXRhLmhlaWdodCkgewoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wYXJlbnREYXRhLmhlaWdodCAtIGhvc2V0OwoJCQlpZiAocFJhdGlvKSB0aGF0LnNpemUud2lkdGggPSB0aGF0LnNpemUuaGVpZ2h0ICogdGhhdC5hc3BlY3RSYXRpbzsKCQl9Cgl9LAoKCXN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSl7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLCBvID0gdGhhdC5vcHRpb25zLCBjcCA9IHRoYXQucG9zaXRpb24sCgkJCQljbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0LCBjb3AgPSB0aGF0LmNvbnRhaW5lclBvc2l0aW9uLCBjZSA9IHRoYXQuY29udGFpbmVyRWxlbWVudDsKCgkJdmFyIGhlbHBlciA9ICQodGhhdC5oZWxwZXIpLCBobyA9IGhlbHBlci5vZmZzZXQoKSwgdyA9IGhlbHBlci5vdXRlcldpZHRoKCkgLSB0aGF0LnNpemVEaWZmLndpZHRoLCBoID0gaGVscGVyLm91dGVySGVpZ2h0KCkgLSB0aGF0LnNpemVEaWZmLmhlaWdodDsKCgkJaWYgKHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICgvcmVsYXRpdmUvKS50ZXN0KGNlLmNzcygncG9zaXRpb24nKSkpCgkJCSQodGhpcykuY3NzKHsgbGVmdDogaG8ubGVmdCAtIGNvcC5sZWZ0IC0gY28ubGVmdCwgd2lkdGg6IHcsIGhlaWdodDogaCB9KTsKCgkJaWYgKHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICgvc3RhdGljLykudGVzdChjZS5jc3MoJ3Bvc2l0aW9uJykpKQoJCQkkKHRoaXMpLmNzcyh7IGxlZnQ6IGhvLmxlZnQgLSBjb3AubGVmdCAtIGNvLmxlZnQsIHdpZHRoOiB3LCBoZWlnaHQ6IGggfSk7CgoJfQp9KTsKCiQudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwgImdob3N0IiwgewoKCXN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHsKCgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInJlc2l6YWJsZSIpLCBvID0gdGhhdC5vcHRpb25zLCBjcyA9IHRoYXQuc2l6ZTsKCgkJdGhhdC5naG9zdCA9IHRoYXQub3JpZ2luYWxFbGVtZW50LmNsb25lKCk7CgkJdGhhdC5naG9zdAoJCQkuY3NzKHsgb3BhY2l0eTogLjI1LCBkaXNwbGF5OiAnYmxvY2snLCBwb3NpdGlvbjogJ3JlbGF0aXZlJywgaGVpZ2h0OiBjcy5oZWlnaHQsIHdpZHRoOiBjcy53aWR0aCwgbWFyZ2luOiAwLCBsZWZ0OiAwLCB0b3A6IDAgfSkKCQkJLmFkZENsYXNzKCd1aS1yZXNpemFibGUtZ2hvc3QnKQoJCQkuYWRkQ2xhc3ModHlwZW9mIG8uZ2hvc3QgPT0gJ3N0cmluZycgPyBvLmdob3N0IDogJycpOwoKCQl0aGF0Lmdob3N0LmFwcGVuZFRvKHRoYXQuaGVscGVyKTsKCgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24oZXZlbnQsIHVpKXsKCQl2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgicmVzaXphYmxlIiksIG8gPSB0aGF0Lm9wdGlvbnM7CgkJaWYgKHRoYXQuZ2hvc3QpIHRoYXQuZ2hvc3QuY3NzKHsgcG9zaXRpb246ICdyZWxhdGl2ZScsIGhlaWdodDogdGhhdC5zaXplLmhlaWdodCwgd2lkdGg6IHRoYXQuc2l6ZS53aWR0aCB9KTsKCX0sCgoJc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKXsKCQl2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgicmVzaXphYmxlIiksIG8gPSB0aGF0Lm9wdGlvbnM7CgkJaWYgKHRoYXQuZ2hvc3QgJiYgdGhhdC5oZWxwZXIpIHRoYXQuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZCh0aGF0Lmdob3N0LmdldCgwKSk7Cgl9Cgp9KTsKCiQudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwgImdyaWQiLCB7CgoJcmVzaXplOiBmdW5jdGlvbihldmVudCwgdWkpIHsKCQl2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgicmVzaXphYmxlIiksIG8gPSB0aGF0Lm9wdGlvbnMsIGNzID0gdGhhdC5zaXplLCBvcyA9IHRoYXQub3JpZ2luYWxTaXplLCBvcCA9IHRoYXQub3JpZ2luYWxQb3NpdGlvbiwgYSA9IHRoYXQuYXhpcywgcmF0aW8gPSBvLl9hc3BlY3RSYXRpbyB8fCBldmVudC5zaGlmdEtleTsKCQlvLmdyaWQgPSB0eXBlb2Ygby5ncmlkID09ICJudW1iZXIiID8gW28uZ3JpZCwgby5ncmlkXSA6IG8uZ3JpZDsKCQl2YXIgb3ggPSBNYXRoLnJvdW5kKChjcy53aWR0aCAtIG9zLndpZHRoKSAvIChvLmdyaWRbMF18fDEpKSAqIChvLmdyaWRbMF18fDEpLCBveSA9IE1hdGgucm91bmQoKGNzLmhlaWdodCAtIG9zLmhlaWdodCkgLyAoby5ncmlkWzFdfHwxKSkgKiAoby5ncmlkWzFdfHwxKTsKCgkJaWYgKC9eKHNlfHN8ZSkkLy50ZXN0KGEpKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IG9zLndpZHRoICsgb3g7CgkJCXRoYXQuc2l6ZS5oZWlnaHQgPSBvcy5oZWlnaHQgKyBveTsKCQl9CgkJZWxzZSBpZiAoL14obmUpJC8udGVzdChhKSkgewoJCQl0aGF0LnNpemUud2lkdGggPSBvcy53aWR0aCArIG94OwoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gb3MuaGVpZ2h0ICsgb3k7CgkJCXRoYXQucG9zaXRpb24udG9wID0gb3AudG9wIC0gb3k7CgkJfQoJCWVsc2UgaWYgKC9eKHN3KSQvLnRlc3QoYSkpIHsKCQkJdGhhdC5zaXplLndpZHRoID0gb3Mud2lkdGggKyBveDsKCQkJdGhhdC5zaXplLmhlaWdodCA9IG9zLmhlaWdodCArIG95OwoJCQl0aGF0LnBvc2l0aW9uLmxlZnQgPSBvcC5sZWZ0IC0gb3g7CgkJfQoJCWVsc2UgewoJCQl0aGF0LnNpemUud2lkdGggPSBvcy53aWR0aCArIG94OwoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gb3MuaGVpZ2h0ICsgb3k7CgkJCXRoYXQucG9zaXRpb24udG9wID0gb3AudG9wIC0gb3k7CgkJCXRoYXQucG9zaXRpb24ubGVmdCA9IG9wLmxlZnQgLSBveDsKCQl9Cgl9Cgp9KTsKCnZhciBudW0gPSBmdW5jdGlvbih2KSB7CglyZXR1cm4gcGFyc2VJbnQodiwgMTApIHx8IDA7Cn07Cgp2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbih2YWx1ZSkgewoJcmV0dXJuICFpc05hTihwYXJzZUludCh2YWx1ZSwgMTApKTsKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoInVpLnNlbGVjdGFibGUiLCAkLnVpLm1vdXNlLCB7Cgl2ZXJzaW9uOiAiMS45LjIiLAoJb3B0aW9uczogewoJCWFwcGVuZFRvOiAnYm9keScsCgkJYXV0b1JlZnJlc2g6IHRydWUsCgkJZGlzdGFuY2U6IDAsCgkJZmlsdGVyOiAnKicsCgkJdG9sZXJhbmNlOiAndG91Y2gnCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoKCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoInVpLXNlbGVjdGFibGUiKTsKCgkJdGhpcy5kcmFnZ2VkID0gZmFsc2U7CgoJCS8vIGNhY2hlIHNlbGVjdGVlIGNoaWxkcmVuIGJhc2VkIG9uIGZpbHRlcgoJCXZhciBzZWxlY3RlZXM7CgkJdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7CgkJCXNlbGVjdGVlcyA9ICQodGhhdC5vcHRpb25zLmZpbHRlciwgdGhhdC5lbGVtZW50WzBdKTsKCQkJc2VsZWN0ZWVzLmFkZENsYXNzKCJ1aS1zZWxlY3RlZSIpOwoJCQlzZWxlY3RlZXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkdGhpcyA9ICQodGhpcyk7CgkJCQl2YXIgcG9zID0gJHRoaXMub2Zmc2V0KCk7CgkJCQkkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIsIHsKCQkJCQllbGVtZW50OiB0aGlzLAoJCQkJCSRlbGVtZW50OiAkdGhpcywKCQkJCQlsZWZ0OiBwb3MubGVmdCwKCQkJCQl0b3A6IHBvcy50b3AsCgkJCQkJcmlnaHQ6IHBvcy5sZWZ0ICsgJHRoaXMub3V0ZXJXaWR0aCgpLAoJCQkJCWJvdHRvbTogcG9zLnRvcCArICR0aGlzLm91dGVySGVpZ2h0KCksCgkJCQkJc3RhcnRzZWxlY3RlZDogZmFsc2UsCgkJCQkJc2VsZWN0ZWQ6ICR0aGlzLmhhc0NsYXNzKCd1aS1zZWxlY3RlZCcpLAoJCQkJCXNlbGVjdGluZzogJHRoaXMuaGFzQ2xhc3MoJ3VpLXNlbGVjdGluZycpLAoJCQkJCXVuc2VsZWN0aW5nOiAkdGhpcy5oYXNDbGFzcygndWktdW5zZWxlY3RpbmcnKQoJCQkJfSk7CgkJCX0pOwoJCX07CgkJdGhpcy5yZWZyZXNoKCk7CgoJCXRoaXMuc2VsZWN0ZWVzID0gc2VsZWN0ZWVzLmFkZENsYXNzKCJ1aS1zZWxlY3RlZSIpOwoKCQl0aGlzLl9tb3VzZUluaXQoKTsKCgkJdGhpcy5oZWxwZXIgPSAkKCI8ZGl2IGNsYXNzPSd1aS1zZWxlY3RhYmxlLWhlbHBlcic+PC9kaXY+Iik7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLnNlbGVjdGVlcwoJCQkucmVtb3ZlQ2xhc3MoInVpLXNlbGVjdGVlIikKCQkJLnJlbW92ZURhdGEoInNlbGVjdGFibGUtaXRlbSIpOwoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoInVpLXNlbGVjdGFibGUgdWktc2VsZWN0YWJsZS1kaXNhYmxlZCIpOwoJCXRoaXMuX21vdXNlRGVzdHJveSgpOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMub3BvcyA9IFtldmVudC5wYWdlWCwgZXZlbnQucGFnZVldOwoKCQlpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkKQoJCQlyZXR1cm47CgoJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQl0aGlzLnNlbGVjdGVlcyA9ICQob3B0aW9ucy5maWx0ZXIsIHRoaXMuZWxlbWVudFswXSk7CgoJCXRoaXMuX3RyaWdnZXIoInN0YXJ0IiwgZXZlbnQpOwoKCQkkKG9wdGlvbnMuYXBwZW5kVG8pLmFwcGVuZCh0aGlzLmhlbHBlcik7CgkJLy8gcG9zaXRpb24gaGVscGVyIChsYXNzbykKCQl0aGlzLmhlbHBlci5jc3MoewoJCQkibGVmdCI6IGV2ZW50LmNsaWVudFgsCgkJCSJ0b3AiOiBldmVudC5jbGllbnRZLAoJCQkid2lkdGgiOiAwLAoJCQkiaGVpZ2h0IjogMAoJCX0pOwoKCQlpZiAob3B0aW9ucy5hdXRvUmVmcmVzaCkgewoJCQl0aGlzLnJlZnJlc2goKTsKCQl9CgoJCXRoaXMuc2VsZWN0ZWVzLmZpbHRlcignLnVpLXNlbGVjdGVkJykuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGVjdGVlID0gJC5kYXRhKHRoaXMsICJzZWxlY3RhYmxlLWl0ZW0iKTsKCQkJc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCA9IHRydWU7CgkJCWlmICghZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuY3RybEtleSkgewoJCQkJc2VsZWN0ZWUuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3VpLXNlbGVjdGVkJyk7CgkJCQlzZWxlY3RlZS5zZWxlY3RlZCA9IGZhbHNlOwoJCQkJc2VsZWN0ZWUuJGVsZW1lbnQuYWRkQ2xhc3MoJ3VpLXVuc2VsZWN0aW5nJyk7CgkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IHRydWU7CgkJCQkvLyBzZWxlY3RhYmxlIFVOU0VMRUNUSU5HIGNhbGxiYWNrCgkJCQl0aGF0Ll90cmlnZ2VyKCJ1bnNlbGVjdGluZyIsIGV2ZW50LCB7CgkJCQkJdW5zZWxlY3Rpbmc6IHNlbGVjdGVlLmVsZW1lbnQKCQkJCX0pOwoJCQl9CgkJfSk7CgoJCSQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCkuYW5kU2VsZigpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxlY3RlZSA9ICQuZGF0YSh0aGlzLCAic2VsZWN0YWJsZS1pdGVtIik7CgkJCWlmIChzZWxlY3RlZSkgewoJCQkJdmFyIGRvU2VsZWN0ID0gKCFldmVudC5tZXRhS2V5ICYmICFldmVudC5jdHJsS2V5KSB8fCAhc2VsZWN0ZWUuJGVsZW1lbnQuaGFzQ2xhc3MoJ3VpLXNlbGVjdGVkJyk7CgkJCQlzZWxlY3RlZS4kZWxlbWVudAoJCQkJCS5yZW1vdmVDbGFzcyhkb1NlbGVjdCA/ICJ1aS11bnNlbGVjdGluZyIgOiAidWktc2VsZWN0ZWQiKQoJCQkJCS5hZGRDbGFzcyhkb1NlbGVjdCA/ICJ1aS1zZWxlY3RpbmciIDogInVpLXVuc2VsZWN0aW5nIik7CgkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9ICFkb1NlbGVjdDsKCQkJCXNlbGVjdGVlLnNlbGVjdGluZyA9IGRvU2VsZWN0OwoJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSBkb1NlbGVjdDsKCQkJCS8vIHNlbGVjdGFibGUgKFVOKVNFTEVDVElORyBjYWxsYmFjawoJCQkJaWYgKGRvU2VsZWN0KSB7CgkJCQkJdGhhdC5fdHJpZ2dlcigic2VsZWN0aW5nIiwgZXZlbnQsIHsKCQkJCQkJc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50CgkJCQkJfSk7CgkJCQl9IGVsc2UgewoJCQkJCXRoYXQuX3RyaWdnZXIoInVuc2VsZWN0aW5nIiwgZXZlbnQsIHsKCQkJCQkJdW5zZWxlY3Rpbmc6IHNlbGVjdGVlLmVsZW1lbnQKCQkJCQl9KTsKCQkJCX0KCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0pOwoKCX0sCgoJX21vdXNlRHJhZzogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgkJdGhpcy5kcmFnZ2VkID0gdHJ1ZTsKCgkJaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkKCQkJcmV0dXJuOwoKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJdmFyIHgxID0gdGhpcy5vcG9zWzBdLCB5MSA9IHRoaXMub3Bvc1sxXSwgeDIgPSBldmVudC5wYWdlWCwgeTIgPSBldmVudC5wYWdlWTsKCQlpZiAoeDEgPiB4MikgeyB2YXIgdG1wID0geDI7IHgyID0geDE7IHgxID0gdG1wOyB9CgkJaWYgKHkxID4geTIpIHsgdmFyIHRtcCA9IHkyOyB5MiA9IHkxOyB5MSA9IHRtcDsgfQoJCXRoaXMuaGVscGVyLmNzcyh7bGVmdDogeDEsIHRvcDogeTEsIHdpZHRoOiB4Mi14MSwgaGVpZ2h0OiB5Mi15MX0pOwoKCQl0aGlzLnNlbGVjdGVlcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIpOwoJCQkvL3ByZXZlbnQgaGVscGVyIGZyb20gYmVpbmcgc2VsZWN0ZWQgaWYgYXBwZW5kVG86IHNlbGVjdGFibGUKCQkJaWYgKCFzZWxlY3RlZSB8fCBzZWxlY3RlZS5lbGVtZW50ID09IHRoYXQuZWxlbWVudFswXSkKCQkJCXJldHVybjsKCQkJdmFyIGhpdCA9IGZhbHNlOwoJCQlpZiAob3B0aW9ucy50b2xlcmFuY2UgPT0gJ3RvdWNoJykgewoJCQkJaGl0ID0gKCAhKHNlbGVjdGVlLmxlZnQgPiB4MiB8fCBzZWxlY3RlZS5yaWdodCA8IHgxIHx8IHNlbGVjdGVlLnRvcCA+IHkyIHx8IHNlbGVjdGVlLmJvdHRvbSA8IHkxKSApOwoJCQl9IGVsc2UgaWYgKG9wdGlvbnMudG9sZXJhbmNlID09ICdmaXQnKSB7CgkJCQloaXQgPSAoc2VsZWN0ZWUubGVmdCA+IHgxICYmIHNlbGVjdGVlLnJpZ2h0IDwgeDIgJiYgc2VsZWN0ZWUudG9wID4geTEgJiYgc2VsZWN0ZWUuYm90dG9tIDwgeTIpOwoJCQl9CgoJCQlpZiAoaGl0KSB7CgkJCQkvLyBTRUxFQ1QKCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RlZCkgewoJCQkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCd1aS1zZWxlY3RlZCcpOwoJCQkJCXNlbGVjdGVlLnNlbGVjdGVkID0gZmFsc2U7CgkJCQl9CgkJCQlpZiAoc2VsZWN0ZWUudW5zZWxlY3RpbmcpIHsKCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygndWktdW5zZWxlY3RpbmcnKTsKCQkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IGZhbHNlOwoJCQkJfQoJCQkJaWYgKCFzZWxlY3RlZS5zZWxlY3RpbmcpIHsKCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygndWktc2VsZWN0aW5nJyk7CgkJCQkJc2VsZWN0ZWUuc2VsZWN0aW5nID0gdHJ1ZTsKCQkJCQkvLyBzZWxlY3RhYmxlIFNFTEVDVElORyBjYWxsYmFjawoJCQkJCXRoYXQuX3RyaWdnZXIoInNlbGVjdGluZyIsIGV2ZW50LCB7CgkJCQkJCXNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudAoJCQkJCX0pOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJLy8gVU5TRUxFQ1QKCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RpbmcpIHsKCQkJCQlpZiAoKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkgJiYgc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCkgewoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygndWktc2VsZWN0aW5nJyk7CgkJCQkJCXNlbGVjdGVlLnNlbGVjdGluZyA9IGZhbHNlOwoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygndWktc2VsZWN0ZWQnKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSB0cnVlOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCd1aS1zZWxlY3RpbmcnKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0aW5nID0gZmFsc2U7CgkJCQkJCWlmIChzZWxlY3RlZS5zdGFydHNlbGVjdGVkKSB7CgkJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygndWktdW5zZWxlY3RpbmcnKTsKCQkJCQkJCXNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTsKCQkJCQkJfQoJCQkJCQkvLyBzZWxlY3RhYmxlIFVOU0VMRUNUSU5HIGNhbGxiYWNrCgkJCQkJCXRoYXQuX3RyaWdnZXIoInVuc2VsZWN0aW5nIiwgZXZlbnQsIHsKCQkJCQkJCXVuc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50CgkJCQkJCX0pOwoJCQkJCX0KCQkJCX0KCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RlZCkgewoJCQkJCWlmICghZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuY3RybEtleSAmJiAhc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCkgewoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygndWktc2VsZWN0ZWQnKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTsKCgkJCQkJCXNlbGVjdGVlLiRlbGVtZW50LmFkZENsYXNzKCd1aS11bnNlbGVjdGluZycpOwoJCQkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IHRydWU7CgkJCQkJCS8vIHNlbGVjdGFibGUgVU5TRUxFQ1RJTkcgY2FsbGJhY2sKCQkJCQkJdGhhdC5fdHJpZ2dlcigidW5zZWxlY3RpbmciLCBldmVudCwgewoJCQkJCQkJdW5zZWxlY3Rpbmc6IHNlbGVjdGVlLmVsZW1lbnQKCQkJCQkJfSk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfSk7CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMuZHJhZ2dlZCA9IGZhbHNlOwoKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJJCgnLnVpLXVuc2VsZWN0aW5nJywgdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIpOwoJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygndWktdW5zZWxlY3RpbmcnKTsKCQkJc2VsZWN0ZWUudW5zZWxlY3RpbmcgPSBmYWxzZTsKCQkJc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCA9IGZhbHNlOwoJCQl0aGF0Ll90cmlnZ2VyKCJ1bnNlbGVjdGVkIiwgZXZlbnQsIHsKCQkJCXVuc2VsZWN0ZWQ6IHNlbGVjdGVlLmVsZW1lbnQKCQkJfSk7CgkJfSk7CgkJJCgnLnVpLXNlbGVjdGluZycsIHRoaXMuZWxlbWVudFswXSkuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGVjdGVlID0gJC5kYXRhKHRoaXMsICJzZWxlY3RhYmxlLWl0ZW0iKTsKCQkJc2VsZWN0ZWUuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3VpLXNlbGVjdGluZycpLmFkZENsYXNzKCd1aS1zZWxlY3RlZCcpOwoJCQlzZWxlY3RlZS5zZWxlY3RpbmcgPSBmYWxzZTsKCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSB0cnVlOwoJCQlzZWxlY3RlZS5zdGFydHNlbGVjdGVkID0gdHJ1ZTsKCQkJdGhhdC5fdHJpZ2dlcigic2VsZWN0ZWQiLCBldmVudCwgewoJCQkJc2VsZWN0ZWQ6IHNlbGVjdGVlLmVsZW1lbnQKCQkJfSk7CgkJfSk7CgkJdGhpcy5fdHJpZ2dlcigic3RvcCIsIGV2ZW50KTsKCgkJdGhpcy5oZWxwZXIucmVtb3ZlKCk7CgoJCXJldHVybiBmYWxzZTsKCX0KCn0pOwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCgidWkuc29ydGFibGUiLCAkLnVpLm1vdXNlLCB7Cgl2ZXJzaW9uOiAiMS45LjIiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICJzb3J0IiwKCXJlYWR5OiBmYWxzZSwKCW9wdGlvbnM6IHsKCQlhcHBlbmRUbzogInBhcmVudCIsCgkJYXhpczogZmFsc2UsCgkJY29ubmVjdFdpdGg6IGZhbHNlLAoJCWNvbnRhaW5tZW50OiBmYWxzZSwKCQljdXJzb3I6ICdhdXRvJywKCQljdXJzb3JBdDogZmFsc2UsCgkJZHJvcE9uRW1wdHk6IHRydWUsCgkJZm9yY2VQbGFjZWhvbGRlclNpemU6IGZhbHNlLAoJCWZvcmNlSGVscGVyU2l6ZTogZmFsc2UsCgkJZ3JpZDogZmFsc2UsCgkJaGFuZGxlOiBmYWxzZSwKCQloZWxwZXI6ICJvcmlnaW5hbCIsCgkJaXRlbXM6ICc+IConLAoJCW9wYWNpdHk6IGZhbHNlLAoJCXBsYWNlaG9sZGVyOiBmYWxzZSwKCQlyZXZlcnQ6IGZhbHNlLAoJCXNjcm9sbDogdHJ1ZSwKCQlzY3JvbGxTZW5zaXRpdml0eTogMjAsCgkJc2Nyb2xsU3BlZWQ6IDIwLAoJCXNjb3BlOiAiZGVmYXVsdCIsCgkJdG9sZXJhbmNlOiAiaW50ZXJzZWN0IiwKCQl6SW5kZXg6IDEwMDAKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgkJdGhpcy5jb250YWluZXJDYWNoZSA9IHt9OwoJCXRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktc29ydGFibGUiKTsKCgkJLy9HZXQgdGhlIGl0ZW1zCgkJdGhpcy5yZWZyZXNoKCk7CgoJCS8vTGV0J3MgZGV0ZXJtaW5lIGlmIHRoZSBpdGVtcyBhcmUgYmVpbmcgZGlzcGxheWVkIGhvcml6b250YWxseQoJCXRoaXMuZmxvYXRpbmcgPSB0aGlzLml0ZW1zLmxlbmd0aCA/IG8uYXhpcyA9PT0gJ3gnIHx8ICgvbGVmdHxyaWdodC8pLnRlc3QodGhpcy5pdGVtc1swXS5pdGVtLmNzcygnZmxvYXQnKSkgfHwgKC9pbmxpbmV8dGFibGUtY2VsbC8pLnRlc3QodGhpcy5pdGVtc1swXS5pdGVtLmNzcygnZGlzcGxheScpKSA6IGZhbHNlOwoKCQkvL0xldCdzIGRldGVybWluZSB0aGUgcGFyZW50J3Mgb2Zmc2V0CgkJdGhpcy5vZmZzZXQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCk7CgoJCS8vSW5pdGlhbGl6ZSBtb3VzZSBldmVudHMgZm9yIGludGVyYWN0aW9uCgkJdGhpcy5fbW91c2VJbml0KCk7CgoJCS8vV2UncmUgcmVhZHkgdG8gZ28KCQl0aGlzLnJlYWR5ID0gdHJ1ZQoKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoInVpLXNvcnRhYmxlIHVpLXNvcnRhYmxlLWRpc2FibGVkIik7CgkJdGhpcy5fbW91c2VEZXN0cm95KCk7CgoJCWZvciAoIHZhciBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApCgkJCXRoaXMuaXRlbXNbaV0uaXRlbS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0TmFtZSArICItaXRlbSIpOwoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCgkJCXRoaXMud2lkZ2V0KCkudG9nZ2xlQ2xhc3MoICJ1aS1zb3J0YWJsZS1kaXNhYmxlZCIsICEhdmFsdWUgKTsKCQl9IGVsc2UgewoJCQkvLyBEb24ndCBjYWxsIHdpZGdldCBiYXNlIF9zZXRPcHRpb24gZm9yIGRpc2FibGUgYXMgaXQgYWRkcyB1aS1zdGF0ZS1kaXNhYmxlZCBjbGFzcwoJCQkkLldpZGdldC5wcm90b3R5cGUuX3NldE9wdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCX0KCX0sCgoJX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oZXZlbnQsIG92ZXJyaWRlSGFuZGxlKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoKCQlpZiAodGhpcy5yZXZlcnRpbmcpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYodGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMub3B0aW9ucy50eXBlID09ICdzdGF0aWMnKSByZXR1cm4gZmFsc2U7CgoJCS8vV2UgaGF2ZSB0byByZWZyZXNoIHRoZSBpdGVtcyBkYXRhIG9uY2UgZmlyc3QKCQl0aGlzLl9yZWZyZXNoSXRlbXMoZXZlbnQpOwoKCQkvL0ZpbmQgb3V0IGlmIHRoZSBjbGlja2VkIG5vZGUgKG9yIG9uZSBvZiBpdHMgcGFyZW50cykgaXMgYSBhY3R1YWwgaXRlbSBpbiB0aGlzLml0ZW1zCgkJdmFyIGN1cnJlbnRJdGVtID0gbnVsbCwgbm9kZXMgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKSB7CgkJCWlmKCQuZGF0YSh0aGlzLCB0aGF0LndpZGdldE5hbWUgKyAnLWl0ZW0nKSA9PSB0aGF0KSB7CgkJCQljdXJyZW50SXRlbSA9ICQodGhpcyk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9KTsKCQlpZigkLmRhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyAnLWl0ZW0nKSA9PSB0aGF0KSBjdXJyZW50SXRlbSA9ICQoZXZlbnQudGFyZ2V0KTsKCgkJaWYoIWN1cnJlbnRJdGVtKSByZXR1cm4gZmFsc2U7CgkJaWYodGhpcy5vcHRpb25zLmhhbmRsZSAmJiAhb3ZlcnJpZGVIYW5kbGUpIHsKCQkJdmFyIHZhbGlkSGFuZGxlID0gZmFsc2U7CgoJCQkkKHRoaXMub3B0aW9ucy5oYW5kbGUsIGN1cnJlbnRJdGVtKS5maW5kKCIqIikuYW5kU2VsZigpLmVhY2goZnVuY3Rpb24oKSB7IGlmKHRoaXMgPT0gZXZlbnQudGFyZ2V0KSB2YWxpZEhhbmRsZSA9IHRydWU7IH0pOwoJCQlpZighdmFsaWRIYW5kbGUpIHJldHVybiBmYWxzZTsKCQl9CgoJCXRoaXMuY3VycmVudEl0ZW0gPSBjdXJyZW50SXRlbTsKCQl0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpOwoJCXJldHVybiB0cnVlOwoKCX0sCgoJX21vdXNlU3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCBvdmVycmlkZUhhbmRsZSwgbm9BY3RpdmF0aW9uKSB7CgoJCXZhciBvID0gdGhpcy5vcHRpb25zOwoJCXRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXM7CgoJCS8vV2Ugb25seSBuZWVkIHRvIGNhbGwgcmVmcmVzaFBvc2l0aW9ucywgYmVjYXVzZSB0aGUgcmVmcmVzaEl0ZW1zIGNhbGwgaGFzIGJlZW4gbW92ZWQgdG8gbW91c2VDYXB0dXJlCgkJdGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7CgoJCS8vQ3JlYXRlIGFuZCBhcHBlbmQgdGhlIHZpc2libGUgaGVscGVyCgkJdGhpcy5oZWxwZXIgPSB0aGlzLl9jcmVhdGVIZWxwZXIoZXZlbnQpOwoKCQkvL0NhY2hlIHRoZSBoZWxwZXIgc2l6ZQoJCXRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTsKCgkJLyoKCQkgKiAtIFBvc2l0aW9uIGdlbmVyYXRpb24gLQoJCSAqIFRoaXMgYmxvY2sgZ2VuZXJhdGVzIGV2ZXJ5dGhpbmcgcG9zaXRpb24gcmVsYXRlZCAtIGl0J3MgdGhlIGNvcmUgb2YgZHJhZ2dhYmxlcy4KCQkgKi8KCgkJLy9DYWNoZSB0aGUgbWFyZ2lucyBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudAoJCXRoaXMuX2NhY2hlTWFyZ2lucygpOwoKCQkvL0dldCB0aGUgbmV4dCBzY3JvbGxpbmcgcGFyZW50CgkJdGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoKTsKCgkJLy9UaGUgZWxlbWVudCdzIGFic29sdXRlIHBvc2l0aW9uIG9uIHRoZSBwYWdlIG1pbnVzIG1hcmdpbnMKCQl0aGlzLm9mZnNldCA9IHRoaXMuY3VycmVudEl0ZW0ub2Zmc2V0KCk7CgkJdGhpcy5vZmZzZXQgPSB7CgkJCXRvcDogdGhpcy5vZmZzZXQudG9wIC0gdGhpcy5tYXJnaW5zLnRvcCwKCQkJbGVmdDogdGhpcy5vZmZzZXQubGVmdCAtIHRoaXMubWFyZ2lucy5sZWZ0CgkJfTsKCgkJJC5leHRlbmQodGhpcy5vZmZzZXQsIHsKCQkJY2xpY2s6IHsgLy9XaGVyZSB0aGUgY2xpY2sgaGFwcGVuZWQsIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50CgkJCQlsZWZ0OiBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmxlZnQsCgkJCQl0b3A6IGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQudG9wCgkJCX0sCgkJCXBhcmVudDogdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCksCgkJCXJlbGF0aXZlOiB0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpIC8vVGhpcyBpcyBhIHJlbGF0aXZlIHRvIGFic29sdXRlIHBvc2l0aW9uIG1pbnVzIHRoZSBhY3R1YWwgcG9zaXRpb24gY2FsY3VsYXRpb24gLSBvbmx5IHVzZWQgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgaGVscGVyCgkJfSk7CgoJCS8vIE9ubHkgYWZ0ZXIgd2UgZ290IHRoZSBvZmZzZXQsIHdlIGNhbiBjaGFuZ2UgdGhlIGhlbHBlcidzIHBvc2l0aW9uIHRvIGFic29sdXRlCgkJLy8gVE9ETzogU3RpbGwgbmVlZCB0byBmaWd1cmUgb3V0IGEgd2F5IHRvIG1ha2UgcmVsYXRpdmUgc29ydGluZyBwb3NzaWJsZQoJCXRoaXMuaGVscGVyLmNzcygicG9zaXRpb24iLCAiYWJzb2x1dGUiKTsKCQl0aGlzLmNzc1Bvc2l0aW9uID0gdGhpcy5oZWxwZXIuY3NzKCJwb3NpdGlvbiIpOwoKCQkvL0dlbmVyYXRlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbgoJCXRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpOwoJCXRoaXMub3JpZ2luYWxQYWdlWCA9IGV2ZW50LnBhZ2VYOwoJCXRoaXMub3JpZ2luYWxQYWdlWSA9IGV2ZW50LnBhZ2VZOwoKCQkvL0FkanVzdCB0aGUgbW91c2Ugb2Zmc2V0IHJlbGF0aXZlIHRvIHRoZSBoZWxwZXIgaWYgJ2N1cnNvckF0JyBpcyBzdXBwbGllZAoJCShvLmN1cnNvckF0ICYmIHRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoby5jdXJzb3JBdCkpOwoKCQkvL0NhY2hlIHRoZSBmb3JtZXIgRE9NIHBvc2l0aW9uCgkJdGhpcy5kb21Qb3NpdGlvbiA9IHsgcHJldjogdGhpcy5jdXJyZW50SXRlbS5wcmV2KClbMF0sIHBhcmVudDogdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXSB9OwoKCQkvL0lmIHRoZSBoZWxwZXIgaXMgbm90IHRoZSBvcmlnaW5hbCwgaGlkZSB0aGUgb3JpZ2luYWwgc28gaXQncyBub3QgcGxheWluZyBhbnkgcm9sZSBkdXJpbmcgdGhlIGRyYWcsIHdvbid0IGNhdXNlIGFueXRoaW5nIGJhZCB0aGlzIHdheQoJCWlmKHRoaXMuaGVscGVyWzBdICE9IHRoaXMuY3VycmVudEl0ZW1bMF0pIHsKCQkJdGhpcy5jdXJyZW50SXRlbS5oaWRlKCk7CgkJfQoKCQkvL0NyZWF0ZSB0aGUgcGxhY2Vob2xkZXIKCQl0aGlzLl9jcmVhdGVQbGFjZWhvbGRlcigpOwoKCQkvL1NldCBhIGNvbnRhaW5tZW50IGlmIGdpdmVuIGluIHRoZSBvcHRpb25zCgkJaWYoby5jb250YWlubWVudCkKCQkJdGhpcy5fc2V0Q29udGFpbm1lbnQoKTsKCgkJaWYoby5jdXJzb3IpIHsgLy8gY3Vyc29yIG9wdGlvbgoJCQlpZiAoJCgnYm9keScpLmNzcygiY3Vyc29yIikpIHRoaXMuX3N0b3JlZEN1cnNvciA9ICQoJ2JvZHknKS5jc3MoImN1cnNvciIpOwoJCQkkKCdib2R5JykuY3NzKCJjdXJzb3IiLCBvLmN1cnNvcik7CgkJfQoKCQlpZihvLm9wYWNpdHkpIHsgLy8gb3BhY2l0eSBvcHRpb24KCQkJaWYgKHRoaXMuaGVscGVyLmNzcygib3BhY2l0eSIpKSB0aGlzLl9zdG9yZWRPcGFjaXR5ID0gdGhpcy5oZWxwZXIuY3NzKCJvcGFjaXR5Iik7CgkJCXRoaXMuaGVscGVyLmNzcygib3BhY2l0eSIsIG8ub3BhY2l0eSk7CgkJfQoKCQlpZihvLnpJbmRleCkgeyAvLyB6SW5kZXggb3B0aW9uCgkJCWlmICh0aGlzLmhlbHBlci5jc3MoInpJbmRleCIpKSB0aGlzLl9zdG9yZWRaSW5kZXggPSB0aGlzLmhlbHBlci5jc3MoInpJbmRleCIpOwoJCQl0aGlzLmhlbHBlci5jc3MoInpJbmRleCIsIG8uekluZGV4KTsKCQl9CgoJCS8vUHJlcGFyZSBzY3JvbGxpbmcKCQlpZih0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJiB0aGlzLnNjcm9sbFBhcmVudFswXS50YWdOYW1lICE9ICdIVE1MJykKCQkJdGhpcy5vdmVyZmxvd09mZnNldCA9IHRoaXMuc2Nyb2xsUGFyZW50Lm9mZnNldCgpOwoKCQkvL0NhbGwgY2FsbGJhY2tzCgkJdGhpcy5fdHJpZ2dlcigic3RhcnQiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoKCQkvL1JlY2FjaGUgdGhlIGhlbHBlciBzaXplCgkJaWYoIXRoaXMuX3ByZXNlcnZlSGVscGVyUHJvcG9ydGlvbnMpCgkJCXRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTsKCgoJCS8vUG9zdCAnYWN0aXZhdGUnIGV2ZW50cyB0byBwb3NzaWJsZSBjb250YWluZXJzCgkJaWYoIW5vQWN0aXZhdGlvbikgewoJCQkgZm9yICh2YXIgaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyB0aGlzLmNvbnRhaW5lcnNbaV0uX3RyaWdnZXIoImFjdGl2YXRlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7IH0KCQl9CgoJCS8vUHJlcGFyZSBwb3NzaWJsZSBkcm9wcGFibGVzCgkJaWYoJC51aS5kZG1hbmFnZXIpCgkJCSQudWkuZGRtYW5hZ2VyLmN1cnJlbnQgPSB0aGlzOwoKCQlpZiAoJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikKCQkJJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpOwoKCQl0aGlzLmRyYWdnaW5nID0gdHJ1ZTsKCgkJdGhpcy5oZWxwZXIuYWRkQ2xhc3MoInVpLXNvcnRhYmxlLWhlbHBlciIpOwoJCXRoaXMuX21vdXNlRHJhZyhldmVudCk7IC8vRXhlY3V0ZSB0aGUgZHJhZyBvbmNlIC0gdGhpcyBjYXVzZXMgdGhlIGhlbHBlciBub3QgdG8gYmUgdmlzaWJsZSBiZWZvcmUgZ2V0dGluZyBpdHMgY29ycmVjdCBwb3NpdGlvbgoJCXJldHVybiB0cnVlOwoKCX0sCgoJX21vdXNlRHJhZzogZnVuY3Rpb24oZXZlbnQpIHsKCgkJLy9Db21wdXRlIHRoZSBoZWxwZXJzIHBvc2l0aW9uCgkJdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpOwoJCXRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKTsKCgkJaWYgKCF0aGlzLmxhc3RQb3NpdGlvbkFicykgewoJCQl0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7CgkJfQoKCQkvL0RvIHNjcm9sbGluZwoJCWlmKHRoaXMub3B0aW9ucy5zY3JvbGwpIHsKCQkJdmFyIG8gPSB0aGlzLm9wdGlvbnMsIHNjcm9sbGVkID0gZmFsc2U7CgkJCWlmKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUgIT0gJ0hUTUwnKSB7CgoJCQkJaWYoKHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wICsgdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0SGVpZ2h0KSAtIGV2ZW50LnBhZ2VZIDwgby5zY3JvbGxTZW5zaXRpdml0eSkKCQkJCQl0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCArIG8uc2Nyb2xsU3BlZWQ7CgkJCQllbHNlIGlmKGV2ZW50LnBhZ2VZIC0gdGhpcy5vdmVyZmxvd09mZnNldC50b3AgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCA9IHNjcm9sbGVkID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wIC0gby5zY3JvbGxTcGVlZDsKCgkJCQlpZigodGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0ICsgdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0V2lkdGgpIC0gZXZlbnQucGFnZVggPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgKyBvLnNjcm9sbFNwZWVkOwoJCQkJZWxzZSBpZihldmVudC5wYWdlWCAtIHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpCgkJCQkJdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCAtIG8uc2Nyb2xsU3BlZWQ7CgoJCQl9IGVsc2UgewoKCQkJCWlmKGV2ZW50LnBhZ2VZIC0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIC0gby5zY3JvbGxTcGVlZCk7CgkJCQllbHNlIGlmKCQod2luZG93KS5oZWlnaHQoKSAtIChldmVudC5wYWdlWSAtICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpCgkJCQkJc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgKyBvLnNjcm9sbFNwZWVkKTsKCgkJCQlpZihldmVudC5wYWdlWCAtICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpCgkJCQkJc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWQpOwoJCQkJZWxzZSBpZigkKHdpbmRvdykud2lkdGgoKSAtIChldmVudC5wYWdlWCAtICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KQoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkKTsKCgkJCX0KCgkJCWlmKHNjcm9sbGVkICE9PSBmYWxzZSAmJiAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyKQoJCQkJJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpOwoJCX0KCgkJLy9SZWdlbmVyYXRlIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiB1c2VkIGZvciBwb3NpdGlvbiBjaGVja3MKCQl0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oImFic29sdXRlIik7CgoJCS8vU2V0IHRoZSBoZWxwZXIgcG9zaXRpb24KCQlpZighdGhpcy5vcHRpb25zLmF4aXMgfHwgdGhpcy5vcHRpb25zLmF4aXMgIT0gInkiKSB0aGlzLmhlbHBlclswXS5zdHlsZS5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0KydweCc7CgkJaWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9ICJ4IikgdGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wID0gdGhpcy5wb3NpdGlvbi50b3ArJ3B4JzsKCgkJLy9SZWFycmFuZ2UKCQlmb3IgKHZhciBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewoKCQkJLy9DYWNoZSB2YXJpYWJsZXMgYW5kIGludGVyc2VjdGlvbiwgY29udGludWUgaWYgbm8gaW50ZXJzZWN0aW9uCgkJCXZhciBpdGVtID0gdGhpcy5pdGVtc1tpXSwgaXRlbUVsZW1lbnQgPSBpdGVtLml0ZW1bMF0sIGludGVyc2VjdGlvbiA9IHRoaXMuX2ludGVyc2VjdHNXaXRoUG9pbnRlcihpdGVtKTsKCQkJaWYgKCFpbnRlcnNlY3Rpb24pIGNvbnRpbnVlOwoKCQkJLy8gT25seSBwdXQgdGhlIHBsYWNlaG9sZGVyIGluc2lkZSB0aGUgY3VycmVudCBDb250YWluZXIsIHNraXAgYWxsCgkJCS8vIGl0ZW1zIGZvcm0gb3RoZXIgY29udGFpbmVycy4gVGhpcyB3b3JrcyBiZWNhdXNlIHdoZW4gbW92aW5nCgkJCS8vIGFuIGl0ZW0gZnJvbSBvbmUgY29udGFpbmVyIHRvIGFub3RoZXIgdGhlCgkJCS8vIGN1cnJlbnRDb250YWluZXIgaXMgc3dpdGNoZWQgYmVmb3JlIHRoZSBwbGFjZWhvbGRlciBpcyBtb3ZlZC4KCQkJLy8KCQkJLy8gV2l0aG91dCB0aGlzIG1vdmluZyBpdGVtcyBpbiAic3ViLXNvcnRhYmxlcyIgY2FuIGNhdXNlIHRoZSBwbGFjZWhvbGRlciB0byBqaXR0ZXIKCQkJLy8gYmVldHdlZW4gdGhlIG91dGVyIGFuZCBpbm5lciBjb250YWluZXIuCgkJCWlmIChpdGVtLmluc3RhbmNlICE9PSB0aGlzLmN1cnJlbnRDb250YWluZXIpIGNvbnRpbnVlOwoKCQkJaWYgKGl0ZW1FbGVtZW50ICE9IHRoaXMuY3VycmVudEl0ZW1bMF0gLy9jYW5ub3QgaW50ZXJzZWN0IHdpdGggaXRzZWxmCgkJCQkmJgl0aGlzLnBsYWNlaG9sZGVyW2ludGVyc2VjdGlvbiA9PSAxID8gIm5leHQiIDogInByZXYiXSgpWzBdICE9IGl0ZW1FbGVtZW50IC8vbm8gdXNlbGVzcyBhY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGRvbmUgYmVmb3JlCgkJCQkmJgkhJC5jb250YWlucyh0aGlzLnBsYWNlaG9sZGVyWzBdLCBpdGVtRWxlbWVudCkgLy9ubyBhY3Rpb24gaWYgdGhlIGl0ZW0gbW92ZWQgaXMgdGhlIHBhcmVudCBvZiB0aGUgaXRlbSBjaGVja2VkCgkJCQkmJiAodGhpcy5vcHRpb25zLnR5cGUgPT0gJ3NlbWktZHluYW1pYycgPyAhJC5jb250YWlucyh0aGlzLmVsZW1lbnRbMF0sIGl0ZW1FbGVtZW50KSA6IHRydWUpCgkJCQkvLyYmIGl0ZW1FbGVtZW50LnBhcmVudE5vZGUgPT0gdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlIC8vIG9ubHkgcmVhcnJhbmdlIGl0ZW1zIHdpdGhpbiB0aGUgc2FtZSBjb250YWluZXIKCQkJKSB7CgoJCQkJdGhpcy5kaXJlY3Rpb24gPSBpbnRlcnNlY3Rpb24gPT0gMSA/ICJkb3duIiA6ICJ1cCI7CgoJCQkJaWYgKHRoaXMub3B0aW9ucy50b2xlcmFuY2UgPT0gInBvaW50ZXIiIHx8IHRoaXMuX2ludGVyc2VjdHNXaXRoU2lkZXMoaXRlbSkpIHsKCQkJCQl0aGlzLl9yZWFycmFuZ2UoZXZlbnQsIGl0ZW0pOwoJCQkJfSBlbHNlIHsKCQkJCQlicmVhazsKCQkJCX0KCgkJCQl0aGlzLl90cmlnZ2VyKCJjaGFuZ2UiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoJCQkJYnJlYWs7CgkJCX0KCQl9CgoJCS8vUG9zdCBldmVudHMgdG8gY29udGFpbmVycwoJCXRoaXMuX2NvbnRhY3RDb250YWluZXJzKGV2ZW50KTsKCgkJLy9JbnRlcmNvbm5lY3Qgd2l0aCBkcm9wcGFibGVzCgkJaWYoJC51aS5kZG1hbmFnZXIpICQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcywgZXZlbnQpOwoKCQkvL0NhbGwgY2FsbGJhY2tzCgkJdGhpcy5fdHJpZ2dlcignc29ydCcsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7CgoJCXRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFiczsKCQlyZXR1cm4gZmFsc2U7CgoJfSwKCglfbW91c2VTdG9wOiBmdW5jdGlvbihldmVudCwgbm9Qcm9wYWdhdGlvbikgewoKCQlpZighZXZlbnQpIHJldHVybjsKCgkJLy9JZiB3ZSBhcmUgdXNpbmcgZHJvcHBhYmxlcywgaW5mb3JtIHRoZSBtYW5hZ2VyIGFib3V0IHRoZSBkcm9wCgkJaWYgKCQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91cikKCQkJJC51aS5kZG1hbmFnZXIuZHJvcCh0aGlzLCBldmVudCk7CgoJCWlmKHRoaXMub3B0aW9ucy5yZXZlcnQpIHsKCQkJdmFyIHRoYXQgPSB0aGlzOwoJCQl2YXIgY3VyID0gdGhpcy5wbGFjZWhvbGRlci5vZmZzZXQoKTsKCgkJCXRoaXMucmV2ZXJ0aW5nID0gdHJ1ZTsKCgkJCSQodGhpcy5oZWxwZXIpLmFuaW1hdGUoewoJCQkJbGVmdDogY3VyLmxlZnQgLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAtIHRoaXMubWFyZ2lucy5sZWZ0ICsgKHRoaXMub2Zmc2V0UGFyZW50WzBdID09IGRvY3VtZW50LmJvZHkgPyAwIDogdGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsTGVmdCksCgkJCQl0b3A6IGN1ci50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wIC0gdGhpcy5tYXJnaW5zLnRvcCArICh0aGlzLm9mZnNldFBhcmVudFswXSA9PSBkb2N1bWVudC5ib2R5ID8gMCA6IHRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbFRvcCkKCQkJfSwgcGFyc2VJbnQodGhpcy5vcHRpb25zLnJldmVydCwgMTApIHx8IDUwMCwgZnVuY3Rpb24oKSB7CgkJCQl0aGF0Ll9jbGVhcihldmVudCk7CgkJCX0pOwoJCX0gZWxzZSB7CgkJCXRoaXMuX2NsZWFyKGV2ZW50LCBub1Byb3BhZ2F0aW9uKTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCgl9LAoKCWNhbmNlbDogZnVuY3Rpb24oKSB7CgoJCWlmKHRoaXMuZHJhZ2dpbmcpIHsKCgkJCXRoaXMuX21vdXNlVXAoeyB0YXJnZXQ6IG51bGwgfSk7CgoJCQlpZih0aGlzLm9wdGlvbnMuaGVscGVyID09ICJvcmlnaW5hbCIpCgkJCQl0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLnJlbW92ZUNsYXNzKCJ1aS1zb3J0YWJsZS1oZWxwZXIiKTsKCQkJZWxzZQoJCQkJdGhpcy5jdXJyZW50SXRlbS5zaG93KCk7CgoJCQkvL1Bvc3QgZGVhY3RpdmF0aW5nIGV2ZW50cyB0byBjb250YWluZXJzCgkJCWZvciAodmFyIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewoJCQkJdGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKCJkZWFjdGl2YXRlIiwgbnVsbCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsKCQkJCWlmKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyKSB7CgkJCQkJdGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKCJvdXQiLCBudWxsLCB0aGlzLl91aUhhc2godGhpcykpOwoJCQkJCXRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDsKCQkJCX0KCQkJfQoKCQl9CgoJCWlmICh0aGlzLnBsYWNlaG9sZGVyKSB7CgkJCS8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSwgaXQgdW5iaW5kcyBBTEwgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUhCgkJCWlmKHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZSkgdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOwoJCQlpZih0aGlzLm9wdGlvbnMuaGVscGVyICE9ICJvcmlnaW5hbCIgJiYgdGhpcy5oZWxwZXIgJiYgdGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZSkgdGhpcy5oZWxwZXIucmVtb3ZlKCk7CgoJCQkkLmV4dGVuZCh0aGlzLCB7CgkJCQloZWxwZXI6IG51bGwsCgkJCQlkcmFnZ2luZzogZmFsc2UsCgkJCQlyZXZlcnRpbmc6IGZhbHNlLAoJCQkJX25vRmluYWxTb3J0OiBudWxsCgkJCX0pOwoKCQkJaWYodGhpcy5kb21Qb3NpdGlvbi5wcmV2KSB7CgkJCQkkKHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5jdXJyZW50SXRlbSk7CgkJCX0gZWxzZSB7CgkJCQkkKHRoaXMuZG9tUG9zaXRpb24ucGFyZW50KS5wcmVwZW5kKHRoaXMuY3VycmVudEl0ZW0pOwoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpczsKCgl9LAoKCXNlcmlhbGl6ZTogZnVuY3Rpb24obykgewoKCQl2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KG8gJiYgby5jb25uZWN0ZWQpOwoJCXZhciBzdHIgPSBbXTsgbyA9IG8gfHwge307CgoJCSQoaXRlbXMpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciByZXMgPSAoJChvLml0ZW0gfHwgdGhpcykuYXR0cihvLmF0dHJpYnV0ZSB8fCAnaWQnKSB8fCAnJykubWF0Y2goby5leHByZXNzaW9uIHx8ICgvKC4rKVstPV9dKC4rKS8pKTsKCQkJaWYocmVzKSBzdHIucHVzaCgoby5rZXkgfHwgcmVzWzFdKydbXScpKyc9Jysoby5rZXkgJiYgby5leHByZXNzaW9uID8gcmVzWzFdIDogcmVzWzJdKSk7CgkJfSk7CgoJCWlmKCFzdHIubGVuZ3RoICYmIG8ua2V5KSB7CgkJCXN0ci5wdXNoKG8ua2V5ICsgJz0nKTsKCQl9CgoJCXJldHVybiBzdHIuam9pbignJicpOwoKCX0sCgoJdG9BcnJheTogZnVuY3Rpb24obykgewoKCQl2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KG8gJiYgby5jb25uZWN0ZWQpOwoJCXZhciByZXQgPSBbXTsgbyA9IG8gfHwge307CgoJCWl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7IHJldC5wdXNoKCQoby5pdGVtIHx8IHRoaXMpLmF0dHIoby5hdHRyaWJ1dGUgfHwgJ2lkJykgfHwgJycpOyB9KTsKCQlyZXR1cm4gcmV0OwoKCX0sCgoJLyogQmUgY2FyZWZ1bCB3aXRoIHRoZSBmb2xsb3dpbmcgY29yZSBmdW5jdGlvbnMgKi8KCV9pbnRlcnNlY3RzV2l0aDogZnVuY3Rpb24oaXRlbSkgewoKCQl2YXIgeDEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQsCgkJCXgyID0geDEgKyB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLAoJCQl5MSA9IHRoaXMucG9zaXRpb25BYnMudG9wLAoJCQl5MiA9IHkxICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQ7CgoJCXZhciBsID0gaXRlbS5sZWZ0LAoJCQlyID0gbCArIGl0ZW0ud2lkdGgsCgkJCXQgPSBpdGVtLnRvcCwKCQkJYiA9IHQgKyBpdGVtLmhlaWdodDsKCgkJdmFyIGR5Q2xpY2sgPSB0aGlzLm9mZnNldC5jbGljay50b3AsCgkJCWR4Q2xpY2sgPSB0aGlzLm9mZnNldC5jbGljay5sZWZ0OwoKCQl2YXIgaXNPdmVyRWxlbWVudCA9ICh5MSArIGR5Q2xpY2spID4gdCAmJiAoeTEgKyBkeUNsaWNrKSA8IGIgJiYgKHgxICsgZHhDbGljaykgPiBsICYmICh4MSArIGR4Q2xpY2spIDwgcjsKCgkJaWYoCSAgIHRoaXMub3B0aW9ucy50b2xlcmFuY2UgPT0gInBvaW50ZXIiCgkJCXx8IHRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzCgkJCXx8ICh0aGlzLm9wdGlvbnMudG9sZXJhbmNlICE9ICJwb2ludGVyIiAmJiB0aGlzLmhlbHBlclByb3BvcnRpb25zW3RoaXMuZmxvYXRpbmcgPyAnd2lkdGgnIDogJ2hlaWdodCddID4gaXRlbVt0aGlzLmZsb2F0aW5nID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSkKCQkpIHsKCQkJcmV0dXJuIGlzT3ZlckVsZW1lbnQ7CgkJfSBlbHNlIHsKCgkJCXJldHVybiAobCA8IHgxICsgKHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLyAyKSAvLyBSaWdodCBIYWxmCgkJCQkmJiB4MiAtICh0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgPCByIC8vIExlZnQgSGFsZgoJCQkJJiYgdCA8IHkxICsgKHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMikgLy8gQm90dG9tIEhhbGYKCQkJCSYmIHkyIC0gKHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMikgPCBiICk7IC8vIFRvcCBIYWxmCgoJCX0KCX0sCgoJX2ludGVyc2VjdHNXaXRoUG9pbnRlcjogZnVuY3Rpb24oaXRlbSkgewoKCQl2YXIgaXNPdmVyRWxlbWVudEhlaWdodCA9ICh0aGlzLm9wdGlvbnMuYXhpcyA9PT0gJ3gnKSB8fCAkLnVpLmlzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy50b3AgKyB0aGlzLm9mZnNldC5jbGljay50b3AsIGl0ZW0udG9wLCBpdGVtLmhlaWdodCksCgkJCWlzT3ZlckVsZW1lbnRXaWR0aCA9ICh0aGlzLm9wdGlvbnMuYXhpcyA9PT0gJ3knKSB8fCAkLnVpLmlzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0LCBpdGVtLndpZHRoKSwKCQkJaXNPdmVyRWxlbWVudCA9IGlzT3ZlckVsZW1lbnRIZWlnaHQgJiYgaXNPdmVyRWxlbWVudFdpZHRoLAoJCQl2ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLAoJCQlob3Jpem9udGFsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTsKCgkJaWYgKCFpc092ZXJFbGVtZW50KQoJCQlyZXR1cm4gZmFsc2U7CgoJCXJldHVybiB0aGlzLmZsb2F0aW5nID8KCQkJKCAoKGhvcml6b250YWxEaXJlY3Rpb24gJiYgaG9yaXpvbnRhbERpcmVjdGlvbiA9PSAicmlnaHQiKSB8fCB2ZXJ0aWNhbERpcmVjdGlvbiA9PSAiZG93biIpID8gMiA6IDEgKQoJCQk6ICggdmVydGljYWxEaXJlY3Rpb24gJiYgKHZlcnRpY2FsRGlyZWN0aW9uID09ICJkb3duIiA/IDIgOiAxKSApOwoKCX0sCgoJX2ludGVyc2VjdHNXaXRoU2lkZXM6IGZ1bmN0aW9uKGl0ZW0pIHsKCgkJdmFyIGlzT3ZlckJvdHRvbUhhbGYgPSAkLnVpLmlzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy50b3AgKyB0aGlzLm9mZnNldC5jbGljay50b3AsIGl0ZW0udG9wICsgKGl0ZW0uaGVpZ2h0LzIpLCBpdGVtLmhlaWdodCksCgkJCWlzT3ZlclJpZ2h0SGFsZiA9ICQudWkuaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLmxlZnQgKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0LCBpdGVtLmxlZnQgKyAoaXRlbS53aWR0aC8yKSwgaXRlbS53aWR0aCksCgkJCXZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCksCgkJCWhvcml6b250YWxEaXJlY3Rpb24gPSB0aGlzLl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpOwoKCQlpZiAodGhpcy5mbG9hdGluZyAmJiBob3Jpem9udGFsRGlyZWN0aW9uKSB7CgkJCXJldHVybiAoKGhvcml6b250YWxEaXJlY3Rpb24gPT0gInJpZ2h0IiAmJiBpc092ZXJSaWdodEhhbGYpIHx8IChob3Jpem9udGFsRGlyZWN0aW9uID09ICJsZWZ0IiAmJiAhaXNPdmVyUmlnaHRIYWxmKSk7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHZlcnRpY2FsRGlyZWN0aW9uICYmICgodmVydGljYWxEaXJlY3Rpb24gPT0gImRvd24iICYmIGlzT3ZlckJvdHRvbUhhbGYpIHx8ICh2ZXJ0aWNhbERpcmVjdGlvbiA9PSAidXAiICYmICFpc092ZXJCb3R0b21IYWxmKSk7CgkJfQoKCX0sCgoJX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGRlbHRhID0gdGhpcy5wb3NpdGlvbkFicy50b3AgLSB0aGlzLmxhc3RQb3NpdGlvbkFicy50b3A7CgkJcmV0dXJuIGRlbHRhICE9IDAgJiYgKGRlbHRhID4gMCA/ICJkb3duIiA6ICJ1cCIpOwoJfSwKCglfZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb246IGZ1bmN0aW9uKCkgewoJCXZhciBkZWx0YSA9IHRoaXMucG9zaXRpb25BYnMubGVmdCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLmxlZnQ7CgkJcmV0dXJuIGRlbHRhICE9IDAgJiYgKGRlbHRhID4gMCA/ICJyaWdodCIgOiAibGVmdCIpOwoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbihldmVudCkgewoJCXRoaXMuX3JlZnJlc2hJdGVtcyhldmVudCk7CgkJdGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9jb25uZWN0V2l0aDogZnVuY3Rpb24oKSB7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgkJcmV0dXJuIG9wdGlvbnMuY29ubmVjdFdpdGguY29uc3RydWN0b3IgPT0gU3RyaW5nCgkJCT8gW29wdGlvbnMuY29ubmVjdFdpdGhdCgkJCTogb3B0aW9ucy5jb25uZWN0V2l0aDsKCX0sCgoJX2dldEl0ZW1zQXNqUXVlcnk6IGZ1bmN0aW9uKGNvbm5lY3RlZCkgewoKCQl2YXIgaXRlbXMgPSBbXTsKCQl2YXIgcXVlcmllcyA9IFtdOwoJCXZhciBjb25uZWN0V2l0aCA9IHRoaXMuX2Nvbm5lY3RXaXRoKCk7CgoJCWlmKGNvbm5lY3RXaXRoICYmIGNvbm5lY3RlZCkgewoJCQlmb3IgKHZhciBpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewoJCQkJdmFyIGN1ciA9ICQoY29ubmVjdFdpdGhbaV0pOwoJCQkJZm9yICh2YXIgaiA9IGN1ci5sZW5ndGggLSAxOyBqID49IDA7IGotLSl7CgkJCQkJdmFyIGluc3QgPSAkLmRhdGEoY3VyW2pdLCB0aGlzLndpZGdldE5hbWUpOwoJCQkJCWlmKGluc3QgJiYgaW5zdCAhPSB0aGlzICYmICFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQpIHsKCQkJCQkJcXVlcmllcy5wdXNoKFskLmlzRnVuY3Rpb24oaW5zdC5vcHRpb25zLml0ZW1zKSA/IGluc3Qub3B0aW9ucy5pdGVtcy5jYWxsKGluc3QuZWxlbWVudCkgOiAkKGluc3Qub3B0aW9ucy5pdGVtcywgaW5zdC5lbGVtZW50KS5ub3QoIi51aS1zb3J0YWJsZS1oZWxwZXIiKS5ub3QoJy51aS1zb3J0YWJsZS1wbGFjZWhvbGRlcicpLCBpbnN0XSk7CgkJCQkJfQoJCQkJfTsKCQkJfTsKCQl9CgoJCXF1ZXJpZXMucHVzaChbJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcykgPyB0aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnQsIG51bGwsIHsgb3B0aW9uczogdGhpcy5vcHRpb25zLCBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0pIDogJCh0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCkubm90KCIudWktc29ydGFibGUtaGVscGVyIikubm90KCcudWktc29ydGFibGUtcGxhY2Vob2xkZXInKSwgdGhpc10pOwoKCQlmb3IgKHZhciBpID0gcXVlcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7CgkJCXF1ZXJpZXNbaV1bMF0uZWFjaChmdW5jdGlvbigpIHsKCQkJCWl0ZW1zLnB1c2godGhpcyk7CgkJCX0pOwoJCX07CgoJCXJldHVybiAkKGl0ZW1zKTsKCgl9LAoKCV9yZW1vdmVDdXJyZW50c0Zyb21JdGVtczogZnVuY3Rpb24oKSB7CgoJCXZhciBsaXN0ID0gdGhpcy5jdXJyZW50SXRlbS5maW5kKCI6ZGF0YSgiICsgdGhpcy53aWRnZXROYW1lICsgIi1pdGVtKSIpOwoKCQl0aGlzLml0ZW1zID0gJC5ncmVwKHRoaXMuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CgkJCWZvciAodmFyIGo9MDsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHsKCQkJCWlmKGxpc3Rbal0gPT0gaXRlbS5pdGVtWzBdKQoJCQkJCXJldHVybiBmYWxzZTsKCQkJfTsKCQkJcmV0dXJuIHRydWU7CgkJfSk7CgoJfSwKCglfcmVmcmVzaEl0ZW1zOiBmdW5jdGlvbihldmVudCkgewoKCQl0aGlzLml0ZW1zID0gW107CgkJdGhpcy5jb250YWluZXJzID0gW3RoaXNdOwoJCXZhciBpdGVtcyA9IHRoaXMuaXRlbXM7CgkJdmFyIHF1ZXJpZXMgPSBbWyQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuaXRlbXMpID8gdGhpcy5vcHRpb25zLml0ZW1zLmNhbGwodGhpcy5lbGVtZW50WzBdLCBldmVudCwgeyBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0pIDogJCh0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCksIHRoaXNdXTsKCQl2YXIgY29ubmVjdFdpdGggPSB0aGlzLl9jb25uZWN0V2l0aCgpOwoKCQlpZihjb25uZWN0V2l0aCAmJiB0aGlzLnJlYWR5KSB7IC8vU2hvdWxkbid0IGJlIHJ1biB0aGUgZmlyc3QgdGltZSB0aHJvdWdoIGR1ZSB0byBtYXNzaXZlIHNsb3ctZG93bgoJCQlmb3IgKHZhciBpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewoJCQkJdmFyIGN1ciA9ICQoY29ubmVjdFdpdGhbaV0pOwoJCQkJZm9yICh2YXIgaiA9IGN1ci5sZW5ndGggLSAxOyBqID49IDA7IGotLSl7CgkJCQkJdmFyIGluc3QgPSAkLmRhdGEoY3VyW2pdLCB0aGlzLndpZGdldE5hbWUpOwoJCQkJCWlmKGluc3QgJiYgaW5zdCAhPSB0aGlzICYmICFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQpIHsKCQkJCQkJcXVlcmllcy5wdXNoKFskLmlzRnVuY3Rpb24oaW5zdC5vcHRpb25zLml0ZW1zKSA/IGluc3Qub3B0aW9ucy5pdGVtcy5jYWxsKGluc3QuZWxlbWVudFswXSwgZXZlbnQsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9KSA6ICQoaW5zdC5vcHRpb25zLml0ZW1zLCBpbnN0LmVsZW1lbnQpLCBpbnN0XSk7CgkJCQkJCXRoaXMuY29udGFpbmVycy5wdXNoKGluc3QpOwoJCQkJCX0KCQkJCX07CgkJCX07CgkJfQoKCQlmb3IgKHZhciBpID0gcXVlcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewoJCQl2YXIgdGFyZ2V0RGF0YSA9IHF1ZXJpZXNbaV1bMV07CgkJCXZhciBfcXVlcmllcyA9IHF1ZXJpZXNbaV1bMF07CgoJCQlmb3IgKHZhciBqPTAsIHF1ZXJpZXNMZW5ndGggPSBfcXVlcmllcy5sZW5ndGg7IGogPCBxdWVyaWVzTGVuZ3RoOyBqKyspIHsKCQkJCXZhciBpdGVtID0gJChfcXVlcmllc1tqXSk7CgoJCQkJaXRlbS5kYXRhKHRoaXMud2lkZ2V0TmFtZSArICctaXRlbScsIHRhcmdldERhdGEpOyAvLyBEYXRhIGZvciB0YXJnZXQgY2hlY2tpbmcgKG1vdXNlIG1hbmFnZXIpCgoJCQkJaXRlbXMucHVzaCh7CgkJCQkJaXRlbTogaXRlbSwKCQkJCQlpbnN0YW5jZTogdGFyZ2V0RGF0YSwKCQkJCQl3aWR0aDogMCwgaGVpZ2h0OiAwLAoJCQkJCWxlZnQ6IDAsIHRvcDogMAoJCQkJfSk7CgkJCX07CgkJfTsKCgl9LAoKCXJlZnJlc2hQb3NpdGlvbnM6IGZ1bmN0aW9uKGZhc3QpIHsKCgkJLy9UaGlzIGhhcyB0byBiZSByZWRvbmUgYmVjYXVzZSBkdWUgdG8gdGhlIGl0ZW0gYmVpbmcgbW92ZWQgb3V0L2ludG8gdGhlIG9mZnNldFBhcmVudCwgdGhlIG9mZnNldFBhcmVudCdzIHBvc2l0aW9uIHdpbGwgY2hhbmdlCgkJaWYodGhpcy5vZmZzZXRQYXJlbnQgJiYgdGhpcy5oZWxwZXIpIHsKCQkJdGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7CgkJfQoKCQlmb3IgKHZhciBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7CgkJCXZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTsKCgkJCS8vV2UgaWdub3JlIGNhbGN1bGF0aW5nIHBvc2l0aW9ucyBvZiBhbGwgY29ubmVjdGVkIGNvbnRhaW5lcnMgd2hlbiB3ZSdyZSBub3Qgb3ZlciB0aGVtCgkJCWlmKGl0ZW0uaW5zdGFuY2UgIT0gdGhpcy5jdXJyZW50Q29udGFpbmVyICYmIHRoaXMuY3VycmVudENvbnRhaW5lciAmJiBpdGVtLml0ZW1bMF0gIT0gdGhpcy5jdXJyZW50SXRlbVswXSkKCQkJCWNvbnRpbnVlOwoKCQkJdmFyIHQgPSB0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCA/ICQodGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQsIGl0ZW0uaXRlbSkgOiBpdGVtLml0ZW07CgoJCQlpZiAoIWZhc3QpIHsKCQkJCWl0ZW0ud2lkdGggPSB0Lm91dGVyV2lkdGgoKTsKCQkJCWl0ZW0uaGVpZ2h0ID0gdC5vdXRlckhlaWdodCgpOwoJCQl9CgoJCQl2YXIgcCA9IHQub2Zmc2V0KCk7CgkJCWl0ZW0ubGVmdCA9IHAubGVmdDsKCQkJaXRlbS50b3AgPSBwLnRvcDsKCQl9OwoKCQlpZih0aGlzLm9wdGlvbnMuY3VzdG9tICYmIHRoaXMub3B0aW9ucy5jdXN0b20ucmVmcmVzaENvbnRhaW5lcnMpIHsKCQkJdGhpcy5vcHRpb25zLmN1c3RvbS5yZWZyZXNoQ29udGFpbmVycy5jYWxsKHRoaXMpOwoJCX0gZWxzZSB7CgkJCWZvciAodmFyIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewoJCQkJdmFyIHAgPSB0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vZmZzZXQoKTsKCQkJCXRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0ID0gcC5sZWZ0OwoJCQkJdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLnRvcCA9IHAudG9wOwoJCQkJdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLndpZHRoCT0gdGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnQub3V0ZXJXaWR0aCgpOwoJCQkJdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLmhlaWdodCA9IHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm91dGVySGVpZ2h0KCk7CgkJCX07CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX2NyZWF0ZVBsYWNlaG9sZGVyOiBmdW5jdGlvbih0aGF0KSB7CgkJdGhhdCA9IHRoYXQgfHwgdGhpczsKCQl2YXIgbyA9IHRoYXQub3B0aW9uczsKCgkJaWYoIW8ucGxhY2Vob2xkZXIgfHwgby5wbGFjZWhvbGRlci5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpIHsKCQkJdmFyIGNsYXNzTmFtZSA9IG8ucGxhY2Vob2xkZXI7CgkJCW8ucGxhY2Vob2xkZXIgPSB7CgkJCQllbGVtZW50OiBmdW5jdGlvbigpIHsKCgkJCQkJdmFyIGVsID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoYXQuY3VycmVudEl0ZW1bMF0ubm9kZU5hbWUpKQoJCQkJCQkuYWRkQ2xhc3MoY2xhc3NOYW1lIHx8IHRoYXQuY3VycmVudEl0ZW1bMF0uY2xhc3NOYW1lKyIgdWktc29ydGFibGUtcGxhY2Vob2xkZXIiKQoJCQkJCQkucmVtb3ZlQ2xhc3MoInVpLXNvcnRhYmxlLWhlbHBlciIpWzBdOwoKCQkJCQlpZighY2xhc3NOYW1lKQoJCQkJCQllbC5zdHlsZS52aXNpYmlsaXR5ID0gImhpZGRlbiI7CgoJCQkJCXJldHVybiBlbDsKCQkJCX0sCgkJCQl1cGRhdGU6IGZ1bmN0aW9uKGNvbnRhaW5lciwgcCkgewoKCQkJCQkvLyAxLiBJZiBhIGNsYXNzTmFtZSBpcyBzZXQgYXMgJ3BsYWNlaG9sZGVyIG9wdGlvbiwgd2UgZG9uJ3QgZm9yY2Ugc2l6ZXMgLSB0aGUgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIHRoYXQKCQkJCQkvLyAyLiBUaGUgb3B0aW9uICdmb3JjZVBsYWNlaG9sZGVyU2l6ZSBjYW4gYmUgZW5hYmxlZCB0byBmb3JjZSBpdCBldmVuIGlmIGEgY2xhc3MgbmFtZSBpcyBzcGVjaWZpZWQKCQkJCQlpZihjbGFzc05hbWUgJiYgIW8uZm9yY2VQbGFjZWhvbGRlclNpemUpIHJldHVybjsKCgkJCQkJLy9JZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYSBhY3R1YWwgaGVpZ2h0IGJ5IGl0c2VsZiAod2l0aG91dCBzdHlsZXMgY29taW5nIGZyb20gYSBzdHlsZXNoZWV0KSwgaXQgcmVjZWl2ZXMgdGhlIGlubGluZSBoZWlnaHQgZnJvbSB0aGUgZHJhZ2dlZCBpdGVtCgkJCQkJaWYoIXAuaGVpZ2h0KCkpIHsgcC5oZWlnaHQodGhhdC5jdXJyZW50SXRlbS5pbm5lckhlaWdodCgpIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoJ3BhZGRpbmdUb3AnKXx8MCwgMTApIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoJ3BhZGRpbmdCb3R0b20nKXx8MCwgMTApKTsgfTsKCQkJCQlpZighcC53aWR0aCgpKSB7IHAud2lkdGgodGhhdC5jdXJyZW50SXRlbS5pbm5lcldpZHRoKCkgLSBwYXJzZUludCh0aGF0LmN1cnJlbnRJdGVtLmNzcygncGFkZGluZ0xlZnQnKXx8MCwgMTApIC0gcGFyc2VJbnQodGhhdC5jdXJyZW50SXRlbS5jc3MoJ3BhZGRpbmdSaWdodCcpfHwwLCAxMCkpOyB9OwoJCQkJfQoJCQl9OwoJCX0KCgkJLy9DcmVhdGUgdGhlIHBsYWNlaG9sZGVyCgkJdGhhdC5wbGFjZWhvbGRlciA9ICQoby5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwodGhhdC5lbGVtZW50LCB0aGF0LmN1cnJlbnRJdGVtKSk7CgoJCS8vQXBwZW5kIGl0IGFmdGVyIHRoZSBhY3R1YWwgY3VycmVudCBpdGVtCgkJdGhhdC5jdXJyZW50SXRlbS5hZnRlcih0aGF0LnBsYWNlaG9sZGVyKTsKCgkJLy9VcGRhdGUgdGhlIHNpemUgb2YgdGhlIHBsYWNlaG9sZGVyIChUT0RPOiBMb2dpYyB0byBmdXp6eSwgc2VlIGxpbmUgMzE2LzMxNykKCQlvLnBsYWNlaG9sZGVyLnVwZGF0ZSh0aGF0LCB0aGF0LnBsYWNlaG9sZGVyKTsKCgl9LAoKCV9jb250YWN0Q29udGFpbmVyczogZnVuY3Rpb24oZXZlbnQpIHsKCgkJLy8gZ2V0IGlubmVybW9zdCBjb250YWluZXIgdGhhdCBpbnRlcnNlY3RzIHdpdGggaXRlbQoJCXZhciBpbm5lcm1vc3RDb250YWluZXIgPSBudWxsLCBpbm5lcm1vc3RJbmRleCA9IG51bGw7CgoKCQlmb3IgKHZhciBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXsKCgkJCS8vIG5ldmVyIGNvbnNpZGVyIGEgY29udGFpbmVyIHRoYXQncyBsb2NhdGVkIHdpdGhpbiB0aGUgaXRlbSBpdHNlbGYKCQkJaWYoJC5jb250YWlucyh0aGlzLmN1cnJlbnRJdGVtWzBdLCB0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudFswXSkpCgkJCQljb250aW51ZTsKCgkJCWlmKHRoaXMuX2ludGVyc2VjdHNXaXRoKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZSkpIHsKCgkJCQkvLyBpZiB3ZSd2ZSBhbHJlYWR5IGZvdW5kIGEgY29udGFpbmVyIGFuZCBpdCdzIG1vcmUgImlubmVyIiB0aGFuIHRoaXMsIHRoZW4gY29udGludWUKCQkJCWlmKGlubmVybW9zdENvbnRhaW5lciAmJiAkLmNvbnRhaW5zKHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdLCBpbm5lcm1vc3RDb250YWluZXIuZWxlbWVudFswXSkpCgkJCQkJY29udGludWU7CgoJCQkJaW5uZXJtb3N0Q29udGFpbmVyID0gdGhpcy5jb250YWluZXJzW2ldOwoJCQkJaW5uZXJtb3N0SW5kZXggPSBpOwoKCQkJfSBlbHNlIHsKCQkJCS8vIGNvbnRhaW5lciBkb2Vzbid0IGludGVyc2VjdC4gdHJpZ2dlciAib3V0IiBldmVudCBpZiBuZWNlc3NhcnkKCQkJCWlmKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyKSB7CgkJCQkJdGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKCJvdXQiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsKCQkJCQl0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDA7CgkJCQl9CgkJCX0KCgkJfQoKCQkvLyBpZiBubyBpbnRlcnNlY3RpbmcgY29udGFpbmVycyBmb3VuZCwgcmV0dXJuCgkJaWYoIWlubmVybW9zdENvbnRhaW5lcikgcmV0dXJuOwoKCQkvLyBtb3ZlIHRoZSBpdGVtIGludG8gdGhlIGNvbnRhaW5lciBpZiBpdCdzIG5vdCB0aGVyZSBhbHJlYWR5CgkJaWYodGhpcy5jb250YWluZXJzLmxlbmd0aCA9PT0gMSkgewoJCQl0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLl90cmlnZ2VyKCJvdmVyIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7CgkJCXRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDE7CgkJfSBlbHNlIHsKCgkJCS8vV2hlbiBlbnRlcmluZyBhIG5ldyBjb250YWluZXIsIHdlIHdpbGwgZmluZCB0aGUgaXRlbSB3aXRoIHRoZSBsZWFzdCBkaXN0YW5jZSBhbmQgYXBwZW5kIG91ciBpdGVtIG5lYXIgaXQKCQkJdmFyIGRpc3QgPSAxMDAwMDsgdmFyIGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA9IG51bGw7CgkJCXZhciBwb3NQcm9wZXJ0eSA9IHRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uZmxvYXRpbmcgPyAnbGVmdCcgOiAndG9wJzsKCQkJdmFyIHNpemVQcm9wZXJ0eSA9IHRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uZmxvYXRpbmcgPyAnd2lkdGgnIDogJ2hlaWdodCc7CgkJCXZhciBiYXNlID0gdGhpcy5wb3NpdGlvbkFic1twb3NQcm9wZXJ0eV0gKyB0aGlzLm9mZnNldC5jbGlja1twb3NQcm9wZXJ0eV07CgkJCWZvciAodmFyIGogPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7CgkJCQlpZighJC5jb250YWlucyh0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmVsZW1lbnRbMF0sIHRoaXMuaXRlbXNbal0uaXRlbVswXSkpIGNvbnRpbnVlOwoJCQkJaWYodGhpcy5pdGVtc1tqXS5pdGVtWzBdID09IHRoaXMuY3VycmVudEl0ZW1bMF0pIGNvbnRpbnVlOwoJCQkJdmFyIGN1ciA9IHRoaXMuaXRlbXNbal0uaXRlbS5vZmZzZXQoKVtwb3NQcm9wZXJ0eV07CgkJCQl2YXIgbmVhckJvdHRvbSA9IGZhbHNlOwoJCQkJaWYoTWF0aC5hYnMoY3VyIC0gYmFzZSkgPiBNYXRoLmFicyhjdXIgKyB0aGlzLml0ZW1zW2pdW3NpemVQcm9wZXJ0eV0gLSBiYXNlKSl7CgkJCQkJbmVhckJvdHRvbSA9IHRydWU7CgkJCQkJY3VyICs9IHRoaXMuaXRlbXNbal1bc2l6ZVByb3BlcnR5XTsKCQkJCX0KCgkJCQlpZihNYXRoLmFicyhjdXIgLSBiYXNlKSA8IGRpc3QpIHsKCQkJCQlkaXN0ID0gTWF0aC5hYnMoY3VyIC0gYmFzZSk7IGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA9IHRoaXMuaXRlbXNbal07CgkJCQkJdGhpcy5kaXJlY3Rpb24gPSBuZWFyQm90dG9tID8gInVwIjogImRvd24iOwoJCQkJfQoJCQl9CgoJCQlpZighaXRlbVdpdGhMZWFzdERpc3RhbmNlICYmICF0aGlzLm9wdGlvbnMuZHJvcE9uRW1wdHkpIC8vQ2hlY2sgaWYgZHJvcE9uRW1wdHkgaXMgZW5hYmxlZAoJCQkJcmV0dXJuOwoKCQkJdGhpcy5jdXJyZW50Q29udGFpbmVyID0gdGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XTsKCQkJaXRlbVdpdGhMZWFzdERpc3RhbmNlID8gdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBpdGVtV2l0aExlYXN0RGlzdGFuY2UsIG51bGwsIHRydWUpIDogdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBudWxsLCB0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmVsZW1lbnQsIHRydWUpOwoJCQl0aGlzLl90cmlnZ2VyKCJjaGFuZ2UiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoJCQl0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLl90cmlnZ2VyKCJjaGFuZ2UiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsKCgkJCS8vVXBkYXRlIHRoZSBwbGFjZWhvbGRlcgoJCQl0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIudXBkYXRlKHRoaXMuY3VycmVudENvbnRhaW5lciwgdGhpcy5wbGFjZWhvbGRlcik7CgoJCQl0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLl90cmlnZ2VyKCJvdmVyIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7CgkJCXRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDE7CgkJfQoKCgl9LAoKCV9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uKGV2ZW50KSB7CgoJCXZhciBvID0gdGhpcy5vcHRpb25zOwoJCXZhciBoZWxwZXIgPSAkLmlzRnVuY3Rpb24oby5oZWxwZXIpID8gJChvLmhlbHBlci5hcHBseSh0aGlzLmVsZW1lbnRbMF0sIFtldmVudCwgdGhpcy5jdXJyZW50SXRlbV0pKSA6IChvLmhlbHBlciA9PSAnY2xvbmUnID8gdGhpcy5jdXJyZW50SXRlbS5jbG9uZSgpIDogdGhpcy5jdXJyZW50SXRlbSk7CgoJCWlmKCFoZWxwZXIucGFyZW50cygnYm9keScpLmxlbmd0aCkgLy9BZGQgdGhlIGhlbHBlciB0byB0aGUgRE9NIGlmIHRoYXQgZGlkbid0IGhhcHBlbiBhbHJlYWR5CgkJCSQoby5hcHBlbmRUbyAhPSAncGFyZW50JyA/IG8uYXBwZW5kVG8gOiB0aGlzLmN1cnJlbnRJdGVtWzBdLnBhcmVudE5vZGUpWzBdLmFwcGVuZENoaWxkKGhlbHBlclswXSk7CgoJCWlmKGhlbHBlclswXSA9PSB0aGlzLmN1cnJlbnRJdGVtWzBdKQoJCQl0aGlzLl9zdG9yZWRDU1MgPSB7IHdpZHRoOiB0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLndpZHRoLCBoZWlnaHQ6IHRoaXMuY3VycmVudEl0ZW1bMF0uc3R5bGUuaGVpZ2h0LCBwb3NpdGlvbjogdGhpcy5jdXJyZW50SXRlbS5jc3MoInBvc2l0aW9uIiksIHRvcDogdGhpcy5jdXJyZW50SXRlbS5jc3MoInRvcCIpLCBsZWZ0OiB0aGlzLmN1cnJlbnRJdGVtLmNzcygibGVmdCIpIH07CgoJCWlmKGhlbHBlclswXS5zdHlsZS53aWR0aCA9PSAnJyB8fCBvLmZvcmNlSGVscGVyU2l6ZSkgaGVscGVyLndpZHRoKHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSk7CgkJaWYoaGVscGVyWzBdLnN0eWxlLmhlaWdodCA9PSAnJyB8fCBvLmZvcmNlSGVscGVyU2l6ZSkgaGVscGVyLmhlaWdodCh0aGlzLmN1cnJlbnRJdGVtLmhlaWdodCgpKTsKCgkJcmV0dXJuIGhlbHBlcjsKCgl9LAoKCV9hZGp1c3RPZmZzZXRGcm9tSGVscGVyOiBmdW5jdGlvbihvYmopIHsKCQlpZiAodHlwZW9mIG9iaiA9PSAnc3RyaW5nJykgewoJCQlvYmogPSBvYmouc3BsaXQoJyAnKTsKCQl9CgkJaWYgKCQuaXNBcnJheShvYmopKSB7CgkJCW9iaiA9IHtsZWZ0OiArb2JqWzBdLCB0b3A6ICtvYmpbMV0gfHwgMH07CgkJfQoJCWlmICgnbGVmdCcgaW4gb2JqKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBvYmoubGVmdCArIHRoaXMubWFyZ2lucy5sZWZ0OwoJCX0KCQlpZiAoJ3JpZ2h0JyBpbiBvYmopIHsKCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSBvYmoucmlnaHQgKyB0aGlzLm1hcmdpbnMubGVmdDsKCQl9CgkJaWYgKCd0b3AnIGluIG9iaikgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDsKCQl9CgkJaWYgKCdib3R0b20nIGluIG9iaikgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIG9iai5ib3R0b20gKyB0aGlzLm1hcmdpbnMudG9wOwoJCX0KCX0sCgoJX2dldFBhcmVudE9mZnNldDogZnVuY3Rpb24oKSB7CgoKCQkvL0dldCB0aGUgb2Zmc2V0UGFyZW50IGFuZCBjYWNoZSBpdHMgcG9zaXRpb24KCQl0aGlzLm9mZnNldFBhcmVudCA9IHRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpOwoJCXZhciBwbyA9IHRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpOwoKCQkvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gbW9kaWZ5IGEgb2Zmc2V0IGNhbGN1bGF0ZWQgb24gc3RhcnQsIHNpbmNlIHRoZSBmb2xsb3dpbmcgaGFwcGVuZWQ6CgkJLy8gMS4gVGhlIHBvc2l0aW9uIG9mIHRoZSBoZWxwZXIgaXMgYWJzb2x1dGUsIHNvIGl0J3MgcG9zaXRpb24gaXMgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgbmV4dCBwb3NpdGlvbmVkIHBhcmVudAoJCS8vIDIuIFRoZSBhY3R1YWwgb2Zmc2V0IHBhcmVudCBpcyBhIGNoaWxkIG9mIHRoZSBzY3JvbGwgcGFyZW50LCBhbmQgdGhlIHNjcm9sbCBwYXJlbnQgaXNuJ3QgdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGF0CgkJLy8gICAgdGhlIHNjcm9sbCBpcyBpbmNsdWRlZCBpbiB0aGUgaW5pdGlhbCBjYWxjdWxhdGlvbiBvZiB0aGUgb2Zmc2V0IG9mIHRoZSBwYXJlbnQsIGFuZCBuZXZlciByZWNhbGN1bGF0ZWQgdXBvbiBkcmFnCgkJaWYodGhpcy5jc3NQb3NpdGlvbiA9PSAnYWJzb2x1dGUnICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgewoJCQlwby5sZWZ0ICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKTsKCQkJcG8udG9wICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOwoJCX0KCgkJaWYoKHRoaXMub2Zmc2V0UGFyZW50WzBdID09IGRvY3VtZW50LmJvZHkpIC8vVGhpcyBuZWVkcyB0byBiZSBhY3R1YWxseSBkb25lIGZvciBhbGwgYnJvd3NlcnMsIHNpbmNlIHBhZ2VYL3BhZ2VZIGluY2x1ZGVzIHRoaXMgaW5mb3JtYXRpb24KCQl8fCAodGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZSAmJiB0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ2h0bWwnICYmICQudWkuaWUpKSAvL1VnbHkgSUUgZml4CgkJCXBvID0geyB0b3A6IDAsIGxlZnQ6IDAgfTsKCgkJcmV0dXJuIHsKCQkJdG9wOiBwby50b3AgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKSB8fCAwKSwKCQkJbGVmdDogcG8ubGVmdCArIChwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKSB8fCAwKQoJCX07CgoJfSwKCglfZ2V0UmVsYXRpdmVPZmZzZXQ6IGZ1bmN0aW9uKCkgewoKCQlpZih0aGlzLmNzc1Bvc2l0aW9uID09ICJyZWxhdGl2ZSIpIHsKCQkJdmFyIHAgPSB0aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7CgkJCXJldHVybiB7CgkJCQl0b3A6IHAudG9wIC0gKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcygidG9wIiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksCgkJCQlsZWZ0OiBwLmxlZnQgLSAocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCJsZWZ0IiksMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpCgkJCX07CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07CgkJfQoKCX0sCgoJX2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7CgkJdGhpcy5tYXJnaW5zID0gewoJCQlsZWZ0OiAocGFyc2VJbnQodGhpcy5jdXJyZW50SXRlbS5jc3MoIm1hcmdpbkxlZnQiKSwxMCkgfHwgMCksCgkJCXRvcDogKHBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKCJtYXJnaW5Ub3AiKSwxMCkgfHwgMCkKCQl9OwoJfSwKCglfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczogZnVuY3Rpb24oKSB7CgkJdGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHsKCQkJd2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSwKCQkJaGVpZ2h0OiB0aGlzLmhlbHBlci5vdXRlckhlaWdodCgpCgkJfTsKCX0sCgoJX3NldENvbnRhaW5tZW50OiBmdW5jdGlvbigpIHsKCgkJdmFyIG8gPSB0aGlzLm9wdGlvbnM7CgkJaWYoby5jb250YWlubWVudCA9PSAncGFyZW50Jykgby5jb250YWlubWVudCA9IHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGU7CgkJaWYoby5jb250YWlubWVudCA9PSAnZG9jdW1lbnQnIHx8IG8uY29udGFpbm1lbnQgPT0gJ3dpbmRvdycpIHRoaXMuY29udGFpbm1lbnQgPSBbCgkJCTAgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsCgkJCTAgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wLAoJCQkkKG8uY29udGFpbm1lbnQgPT0gJ2RvY3VtZW50JyA/IGRvY3VtZW50IDogd2luZG93KS53aWR0aCgpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LAoJCQkoJChvLmNvbnRhaW5tZW50ID09ICdkb2N1bWVudCcgPyBkb2N1bWVudCA6IHdpbmRvdykuaGVpZ2h0KCkgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3AKCQldOwoKCQlpZighKC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8pLnRlc3Qoby5jb250YWlubWVudCkpIHsKCQkJdmFyIGNlID0gJChvLmNvbnRhaW5tZW50KVswXTsKCQkJdmFyIGNvID0gJChvLmNvbnRhaW5tZW50KS5vZmZzZXQoKTsKCQkJdmFyIG92ZXIgPSAoJChjZSkuY3NzKCJvdmVyZmxvdyIpICE9ICdoaWRkZW4nKTsKCgkJCXRoaXMuY29udGFpbm1lbnQgPSBbCgkJCQljby5sZWZ0ICsgKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApIHx8IDApICsgKHBhcnNlSW50KCQoY2UpLmNzcygicGFkZGluZ0xlZnQiKSwxMCkgfHwgMCkgLSB0aGlzLm1hcmdpbnMubGVmdCwKCQkJCWNvLnRvcCArIChwYXJzZUludCgkKGNlKS5jc3MoImJvcmRlclRvcFdpZHRoIiksMTApIHx8IDApICsgKHBhcnNlSW50KCQoY2UpLmNzcygicGFkZGluZ1RvcCIpLDEwKSB8fCAwKSAtIHRoaXMubWFyZ2lucy50b3AsCgkJCQljby5sZWZ0KyhvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsV2lkdGgsY2Uub2Zmc2V0V2lkdGgpIDogY2Uub2Zmc2V0V2lkdGgpIC0gKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApIHx8IDApIC0gKHBhcnNlSW50KCQoY2UpLmNzcygicGFkZGluZ1JpZ2h0IiksMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LAoJCQkJY28udG9wKyhvdmVyID8gTWF0aC5tYXgoY2Uuc2Nyb2xsSGVpZ2h0LGNlLm9mZnNldEhlaWdodCkgOiBjZS5vZmZzZXRIZWlnaHQpIC0gKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCkgfHwgMCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKCJwYWRkaW5nQm90dG9tIiksMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wCgkJCV07CgkJfQoKCX0sCgoJX2NvbnZlcnRQb3NpdGlvblRvOiBmdW5jdGlvbihkLCBwb3MpIHsKCgkJaWYoIXBvcykgcG9zID0gdGhpcy5wb3NpdGlvbjsKCQl2YXIgbW9kID0gZCA9PSAiYWJzb2x1dGUiID8gMSA6IC0xOwoJCXZhciBvID0gdGhpcy5vcHRpb25zLCBzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09ICdhYnNvbHV0ZScgJiYgISh0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCwgc2Nyb2xsSXNSb290Tm9kZSA9ICgvKGh0bWx8Ym9keSkvaSkudGVzdChzY3JvbGxbMF0udGFnTmFtZSk7CgoJCXJldHVybiB7CgkJCXRvcDogKAoJCQkJcG9zLnRvcAkJCQkJCQkJCQkJCQkJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQkrIHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZAkJCQkJCQkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCSsgdGhpcy5vZmZzZXQucGFyZW50LnRvcCAqIG1vZAkJCQkJCQkJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCS0gKCAoIHRoaXMuY3NzUG9zaXRpb24gPT0gJ2ZpeGVkJyA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6ICggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsVG9wKCkgKSApICogbW9kKQoJCQkpLAoJCQlsZWZ0OiAoCgkJCQlwb3MubGVmdAkJCQkJCQkJCQkJCQkJCQkvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb24KCQkJCSsgdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAqIG1vZAkJCQkJCQkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCSsgdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKiBtb2QJCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQktICggKCB0aGlzLmNzc1Bvc2l0aW9uID09ICdmaXhlZCcgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkgKiBtb2QpCgkJCSkKCQl9OwoKCX0sCgoJX2dlbmVyYXRlUG9zaXRpb246IGZ1bmN0aW9uKGV2ZW50KSB7CgoJCXZhciBvID0gdGhpcy5vcHRpb25zLCBzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09ICdhYnNvbHV0ZScgJiYgISh0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCwgc2Nyb2xsSXNSb290Tm9kZSA9ICgvKGh0bWx8Ym9keSkvaSkudGVzdChzY3JvbGxbMF0udGFnTmFtZSk7CgoJCS8vIFRoaXMgaXMgYW5vdGhlciB2ZXJ5IHdlaXJkIHNwZWNpYWwgY2FzZSB0aGF0IG9ubHkgaGFwcGVucyBmb3IgcmVsYXRpdmUgZWxlbWVudHM6CgkJLy8gMS4gSWYgdGhlIGNzcyBwb3NpdGlvbiBpcyByZWxhdGl2ZQoJCS8vIDIuIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpcyB0aGUgZG9jdW1lbnQgb3Igc2ltaWxhciB0byB0aGUgb2Zmc2V0IHBhcmVudAoJCS8vIHdlIGhhdmUgdG8gcmVmcmVzaCB0aGUgcmVsYXRpdmUgb2Zmc2V0IGR1cmluZyB0aGUgc2Nyb2xsIHNvIHRoZXJlIGFyZSBubyBqdW1wcwoJCWlmKHRoaXMuY3NzUG9zaXRpb24gPT0gJ3JlbGF0aXZlJyAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9IHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgewoJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZSA9IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCk7CgkJfQoKCQl2YXIgcGFnZVggPSBldmVudC5wYWdlWDsKCQl2YXIgcGFnZVkgPSBldmVudC5wYWdlWTsKCgkJLyoKCQkgKiAtIFBvc2l0aW9uIGNvbnN0cmFpbmluZyAtCgkJICogQ29uc3RyYWluIHRoZSBwb3NpdGlvbiB0byBhIG1peCBvZiBncmlkLCBjb250YWlubWVudC4KCQkgKi8KCgkJaWYodGhpcy5vcmlnaW5hbFBvc2l0aW9uKSB7IC8vSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zCgoJCQlpZih0aGlzLmNvbnRhaW5tZW50KSB7CgkJCQlpZihldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCB0aGlzLmNvbnRhaW5tZW50WzBdKSBwYWdlWCA9IHRoaXMuY29udGFpbm1lbnRbMF0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0OwoJCQkJaWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WzFdKSBwYWdlWSA9IHRoaXMuY29udGFpbm1lbnRbMV0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7CgkJCQlpZihldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiB0aGlzLmNvbnRhaW5tZW50WzJdKSBwYWdlWCA9IHRoaXMuY29udGFpbm1lbnRbMl0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0OwoJCQkJaWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiB0aGlzLmNvbnRhaW5tZW50WzNdKSBwYWdlWSA9IHRoaXMuY29udGFpbm1lbnRbM10gKyB0aGlzLm9mZnNldC5jbGljay50b3A7CgkJCX0KCgkJCWlmKG8uZ3JpZCkgewoJCQkJdmFyIHRvcCA9IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoKHBhZ2VZIC0gdGhpcy5vcmlnaW5hbFBhZ2VZKSAvIG8uZ3JpZFsxXSkgKiBvLmdyaWRbMV07CgkJCQlwYWdlWSA9IHRoaXMuY29udGFpbm1lbnQgPyAoISh0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WzFdIHx8IHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IHRoaXMuY29udGFpbm1lbnRbM10pID8gdG9wIDogKCEodG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgdGhpcy5jb250YWlubWVudFsxXSkgPyB0b3AgLSBvLmdyaWRbMV0gOiB0b3AgKyBvLmdyaWRbMV0pKSA6IHRvcDsKCgkJCQl2YXIgbGVmdCA9IHRoaXMub3JpZ2luYWxQYWdlWCArIE1hdGgucm91bmQoKHBhZ2VYIC0gdGhpcy5vcmlnaW5hbFBhZ2VYKSAvIG8uZ3JpZFswXSkgKiBvLmdyaWRbMF07CgkJCQlwYWdlWCA9IHRoaXMuY29udGFpbm1lbnQgPyAoIShsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHRoaXMuY29udGFpbm1lbnRbMF0gfHwgbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiB0aGlzLmNvbnRhaW5tZW50WzJdKSA/IGxlZnQgOiAoIShsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHRoaXMuY29udGFpbm1lbnRbMF0pID8gbGVmdCAtIG8uZ3JpZFswXSA6IGxlZnQgKyBvLmdyaWRbMF0pKSA6IGxlZnQ7CgkJCX0KCgkJfQoKCQlyZXR1cm4gewoJCQl0b3A6ICgKCQkJCXBhZ2VZCQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJLSB0aGlzLm9mZnNldC5jbGljay50b3AJCQkJCQkJCQkJCQkJLy8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudCkKCQkJCS0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wCQkJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQktIHRoaXMub2Zmc2V0LnBhcmVudC50b3AJCQkJCQkJCQkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJKyAoICggdGhpcy5jc3NQb3NpdGlvbiA9PSAnZml4ZWQnID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkpCgkJCSksCgkJCWxlZnQ6ICgKCQkJCXBhZ2VYCQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0CQkJCQkJCQkJCQkJLy8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudCkKCQkJCS0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdAkJCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdAkJCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkrICggKCB0aGlzLmNzc1Bvc2l0aW9uID09ICdmaXhlZCcgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkpCgkJCSkKCQl9OwoKCX0sCgoJX3JlYXJyYW5nZTogZnVuY3Rpb24oZXZlbnQsIGksIGEsIGhhcmRSZWZyZXNoKSB7CgoJCWEgPyBhWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pIDogaS5pdGVtWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJbMF0sICh0aGlzLmRpcmVjdGlvbiA9PSAnZG93bicgPyBpLml0ZW1bMF0gOiBpLml0ZW1bMF0ubmV4dFNpYmxpbmcpKTsKCgkJLy9WYXJpb3VzIHRoaW5ncyBkb25lIGhlcmUgdG8gaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2U6CgkJLy8gMS4gd2UgY3JlYXRlIGEgc2V0VGltZW91dCwgdGhhdCBjYWxscyByZWZyZXNoUG9zaXRpb25zCgkJLy8gMi4gb24gdGhlIGluc3RhbmNlLCB3ZSBoYXZlIGEgY291bnRlciB2YXJpYWJsZSwgdGhhdCBnZXQncyBoaWdoZXIgYWZ0ZXIgZXZlcnkgYXBwZW5kCgkJLy8gMy4gb24gdGhlIGxvY2FsIHNjb3BlLCB3ZSBjb3B5IHRoZSBjb3VudGVyIHZhcmlhYmxlLCBhbmQgY2hlY2sgaW4gdGhlIHRpbWVvdXQsIGlmIGl0J3Mgc3RpbGwgdGhlIHNhbWUKCQkvLyA0LiB0aGlzIGxldHMgb25seSB0aGUgbGFzdCBhZGRpdGlvbiB0byB0aGUgdGltZW91dCBzdGFjayB0aHJvdWdoCgkJdGhpcy5jb3VudGVyID0gdGhpcy5jb3VudGVyID8gKyt0aGlzLmNvdW50ZXIgOiAxOwoJCXZhciBjb3VudGVyID0gdGhpcy5jb3VudGVyOwoKCQl0aGlzLl9kZWxheShmdW5jdGlvbigpIHsKCQkJaWYoY291bnRlciA9PSB0aGlzLmNvdW50ZXIpIHRoaXMucmVmcmVzaFBvc2l0aW9ucyghaGFyZFJlZnJlc2gpOyAvL1ByZWNvbXB1dGUgYWZ0ZXIgZWFjaCBET00gaW5zZXJ0aW9uLCBOT1Qgb24gbW91c2Vtb3ZlCgkJfSk7CgoJfSwKCglfY2xlYXI6IGZ1bmN0aW9uKGV2ZW50LCBub1Byb3BhZ2F0aW9uKSB7CgoJCXRoaXMucmV2ZXJ0aW5nID0gZmFsc2U7CgkJLy8gV2UgZGVsYXkgYWxsIGV2ZW50cyB0aGF0IGhhdmUgdG8gYmUgdHJpZ2dlcmVkIHRvIGFmdGVyIHRoZSBwb2ludCB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgaGFzIGJlZW4gcmVtb3ZlZCBhbmQKCQkvLyBldmVyeXRoaW5nIGVsc2Ugbm9ybWFsaXplZCBhZ2FpbgoJCXZhciBkZWxheWVkVHJpZ2dlcnMgPSBbXTsKCgkJLy8gV2UgZmlyc3QgaGF2ZSB0byB1cGRhdGUgdGhlIGRvbSBwb3NpdGlvbiBvZiB0aGUgYWN0dWFsIGN1cnJlbnRJdGVtCgkJLy8gTm90ZTogZG9uJ3QgZG8gaXQgaWYgdGhlIGN1cnJlbnQgaXRlbSBpcyBhbHJlYWR5IHJlbW92ZWQgKGJ5IGEgdXNlciksIG9yIGl0IGdldHMgcmVhcHBlbmRlZCAoc2VlICM0MDg4KQoJCWlmKCF0aGlzLl9ub0ZpbmFsU29ydCAmJiB0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpLmxlbmd0aCkgdGhpcy5wbGFjZWhvbGRlci5iZWZvcmUodGhpcy5jdXJyZW50SXRlbSk7CgkJdGhpcy5fbm9GaW5hbFNvcnQgPSBudWxsOwoKCQlpZih0aGlzLmhlbHBlclswXSA9PSB0aGlzLmN1cnJlbnRJdGVtWzBdKSB7CgkJCWZvcih2YXIgaSBpbiB0aGlzLl9zdG9yZWRDU1MpIHsKCQkJCWlmKHRoaXMuX3N0b3JlZENTU1tpXSA9PSAnYXV0bycgfHwgdGhpcy5fc3RvcmVkQ1NTW2ldID09ICdzdGF0aWMnKSB0aGlzLl9zdG9yZWRDU1NbaV0gPSAnJzsKCQkJfQoJCQl0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLnJlbW92ZUNsYXNzKCJ1aS1zb3J0YWJsZS1oZWxwZXIiKTsKCQl9IGVsc2UgewoJCQl0aGlzLmN1cnJlbnRJdGVtLnNob3coKTsKCQl9CgoJCWlmKHRoaXMuZnJvbU91dHNpZGUgJiYgIW5vUHJvcGFnYXRpb24pIGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKGZ1bmN0aW9uKGV2ZW50KSB7IHRoaXMuX3RyaWdnZXIoInJlY2VpdmUiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMuZnJvbU91dHNpZGUpKTsgfSk7CgkJaWYoKHRoaXMuZnJvbU91dHNpZGUgfHwgdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9IHRoaXMuY3VycmVudEl0ZW0ucHJldigpLm5vdCgiLnVpLXNvcnRhYmxlLWhlbHBlciIpWzBdIHx8IHRoaXMuZG9tUG9zaXRpb24ucGFyZW50ICE9IHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbMF0pICYmICFub1Byb3BhZ2F0aW9uKSBkZWxheWVkVHJpZ2dlcnMucHVzaChmdW5jdGlvbihldmVudCkgeyB0aGlzLl90cmlnZ2VyKCJ1cGRhdGUiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOyB9KTsgLy9UcmlnZ2VyIHVwZGF0ZSBjYWxsYmFjayBpZiB0aGUgRE9NIHBvc2l0aW9uIGhhcyBjaGFuZ2VkCgoJCS8vIENoZWNrIGlmIHRoZSBpdGVtcyBDb250YWluZXIgaGFzIENoYW5nZWQgYW5kIHRyaWdnZXIgYXBwcm9wcmlhdGUKCQkvLyBldmVudHMuCgkJaWYgKHRoaXMgIT09IHRoaXMuY3VycmVudENvbnRhaW5lcikgewoJCQlpZighbm9Qcm9wYWdhdGlvbikgewoJCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goZnVuY3Rpb24oZXZlbnQpIHsgdGhpcy5fdHJpZ2dlcigicmVtb3ZlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsgfSk7CgkJCQlkZWxheWVkVHJpZ2dlcnMucHVzaCgoZnVuY3Rpb24oYykgeyByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsgYy5fdHJpZ2dlcigicmVjZWl2ZSIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmN1cnJlbnRDb250YWluZXIpKTsKCQkJCWRlbGF5ZWRUcmlnZ2Vycy5wdXNoKChmdW5jdGlvbihjKSB7IHJldHVybiBmdW5jdGlvbihldmVudCkgeyBjLl90cmlnZ2VyKCJ1cGRhdGUiLCBldmVudCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsgIH07IH0pLmNhbGwodGhpcywgdGhpcy5jdXJyZW50Q29udGFpbmVyKSk7CgkJCX0KCQl9CgoKCQkvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnMKCQlmb3IgKHZhciBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXsKCQkJaWYoIW5vUHJvcGFnYXRpb24pIGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKChmdW5jdGlvbihjKSB7IHJldHVybiBmdW5jdGlvbihldmVudCkgeyBjLl90cmlnZ2VyKCJkZWFjdGl2YXRlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7IH07ICB9KS5jYWxsKHRoaXMsIHRoaXMuY29udGFpbmVyc1tpXSkpOwoJCQlpZih0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlcikgewoJCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7IGMuX3RyaWdnZXIoIm91dCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKTsKCQkJCXRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDsKCQkJfQoJCX0KCgkJLy9EbyB3aGF0IHdhcyBvcmlnaW5hbGx5IGluIHBsdWdpbnMKCQlpZih0aGlzLl9zdG9yZWRDdXJzb3IpICQoJ2JvZHknKS5jc3MoImN1cnNvciIsIHRoaXMuX3N0b3JlZEN1cnNvcik7IC8vUmVzZXQgY3Vyc29yCgkJaWYodGhpcy5fc3RvcmVkT3BhY2l0eSkgdGhpcy5oZWxwZXIuY3NzKCJvcGFjaXR5IiwgdGhpcy5fc3RvcmVkT3BhY2l0eSk7IC8vUmVzZXQgb3BhY2l0eQoJCWlmKHRoaXMuX3N0b3JlZFpJbmRleCkgdGhpcy5oZWxwZXIuY3NzKCJ6SW5kZXgiLCB0aGlzLl9zdG9yZWRaSW5kZXggPT0gJ2F1dG8nID8gJycgOiB0aGlzLl9zdG9yZWRaSW5kZXgpOyAvL1Jlc2V0IHotaW5kZXgKCgkJdGhpcy5kcmFnZ2luZyA9IGZhbHNlOwoJCWlmKHRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCkgewoJCQlpZighbm9Qcm9wYWdhdGlvbikgewoJCQkJdGhpcy5fdHJpZ2dlcigiYmVmb3JlU3RvcCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7CgkJCQlmb3IgKHZhciBpPTA7IGkgPCBkZWxheWVkVHJpZ2dlcnMubGVuZ3RoOyBpKyspIHsgZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpOyB9OyAvL1RyaWdnZXIgYWxsIGRlbGF5ZWQgZXZlbnRzCgkJCQl0aGlzLl90cmlnZ2VyKCJzdG9wIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQkJfQoKCQkJdGhpcy5mcm9tT3V0c2lkZSA9IGZhbHNlOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZighbm9Qcm9wYWdhdGlvbikgdGhpcy5fdHJpZ2dlcigiYmVmb3JlU3RvcCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7CgoJCS8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSwgaXQgdW5iaW5kcyBBTEwgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUhCgkJdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOwoKCQlpZih0aGlzLmhlbHBlclswXSAhPSB0aGlzLmN1cnJlbnRJdGVtWzBdKSB0aGlzLmhlbHBlci5yZW1vdmUoKTsgdGhpcy5oZWxwZXIgPSBudWxsOwoKCQlpZighbm9Qcm9wYWdhdGlvbikgewoJCQlmb3IgKHZhciBpPTA7IGkgPCBkZWxheWVkVHJpZ2dlcnMubGVuZ3RoOyBpKyspIHsgZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpOyB9OyAvL1RyaWdnZXIgYWxsIGRlbGF5ZWQgZXZlbnRzCgkJCXRoaXMuX3RyaWdnZXIoInN0b3AiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoJCX0KCgkJdGhpcy5mcm9tT3V0c2lkZSA9IGZhbHNlOwoJCXJldHVybiB0cnVlOwoKCX0sCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKCkgewoJCWlmICgkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA9PT0gZmFsc2UpIHsKCQkJdGhpcy5jYW5jZWwoKTsKCQl9Cgl9LAoKCV91aUhhc2g6IGZ1bmN0aW9uKF9pbnN0KSB7CgkJdmFyIGluc3QgPSBfaW5zdCB8fCB0aGlzOwoJCXJldHVybiB7CgkJCWhlbHBlcjogaW5zdC5oZWxwZXIsCgkJCXBsYWNlaG9sZGVyOiBpbnN0LnBsYWNlaG9sZGVyIHx8ICQoW10pLAoJCQlwb3NpdGlvbjogaW5zdC5wb3NpdGlvbiwKCQkJb3JpZ2luYWxQb3NpdGlvbjogaW5zdC5vcmlnaW5hbFBvc2l0aW9uLAoJCQlvZmZzZXQ6IGluc3QucG9zaXRpb25BYnMsCgkJCWl0ZW06IGluc3QuY3VycmVudEl0ZW0sCgkJCXNlbmRlcjogX2luc3QgPyBfaW5zdC5lbGVtZW50IDogbnVsbAoJCX07Cgl9Cgp9KTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHVpZCA9IDAsCgloaWRlUHJvcHMgPSB7fSwKCXNob3dQcm9wcyA9IHt9OwoKaGlkZVByb3BzLmhlaWdodCA9IGhpZGVQcm9wcy5wYWRkaW5nVG9wID0gaGlkZVByb3BzLnBhZGRpbmdCb3R0b20gPQoJaGlkZVByb3BzLmJvcmRlclRvcFdpZHRoID0gaGlkZVByb3BzLmJvcmRlckJvdHRvbVdpZHRoID0gImhpZGUiOwpzaG93UHJvcHMuaGVpZ2h0ID0gc2hvd1Byb3BzLnBhZGRpbmdUb3AgPSBzaG93UHJvcHMucGFkZGluZ0JvdHRvbSA9CglzaG93UHJvcHMuYm9yZGVyVG9wV2lkdGggPSBzaG93UHJvcHMuYm9yZGVyQm90dG9tV2lkdGggPSAic2hvdyI7CgokLndpZGdldCggInVpLmFjY29yZGlvbiIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglvcHRpb25zOiB7CgkJYWN0aXZlOiAwLAoJCWFuaW1hdGU6IHt9LAoJCWNvbGxhcHNpYmxlOiBmYWxzZSwKCQlldmVudDogImNsaWNrIiwKCQloZWFkZXI6ICI+IGxpID4gOmZpcnN0LWNoaWxkLD4gOm5vdChsaSk6ZXZlbiIsCgkJaGVpZ2h0U3R5bGU6ICJhdXRvIiwKCQlpY29uczogewoJCQlhY3RpdmVIZWFkZXI6ICJ1aS1pY29uLXRyaWFuZ2xlLTEtcyIsCgkJCWhlYWRlcjogInVpLWljb24tdHJpYW5nbGUtMS1lIgoJCX0sCgoJCS8vIGNhbGxiYWNrcwoJCWFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZUFjdGl2YXRlOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBhY2NvcmRpb25JZCA9IHRoaXMuYWNjb3JkaW9uSWQgPSAidWktYWNjb3JkaW9uLSIgKwoJCQkJKHRoaXMuZWxlbWVudC5hdHRyKCAiaWQiICkgfHwgKyt1aWQpLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQl0aGlzLnByZXZTaG93ID0gdGhpcy5wcmV2SGlkZSA9ICQoKTsKCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS1hY2NvcmRpb24gdWktd2lkZ2V0IHVpLWhlbHBlci1yZXNldCIgKTsKCgkJdGhpcy5oZWFkZXJzID0gdGhpcy5lbGVtZW50LmZpbmQoIG9wdGlvbnMuaGVhZGVyICkKCQkJLmFkZENsYXNzKCAidWktYWNjb3JkaW9uLWhlYWRlciB1aS1oZWxwZXItcmVzZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIiApOwoJCXRoaXMuX2hvdmVyYWJsZSggdGhpcy5oZWFkZXJzICk7CgkJdGhpcy5fZm9jdXNhYmxlKCB0aGlzLmhlYWRlcnMgKTsKCgkJdGhpcy5oZWFkZXJzLm5leHQoKQoJCQkuYWRkQ2xhc3MoICJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIgKQoJCQkuaGlkZSgpOwoKCQkvLyBkb24ndCBhbGxvdyBjb2xsYXBzaWJsZTogZmFsc2UgYW5kIGFjdGl2ZTogZmFsc2UgLyBudWxsCgkJaWYgKCAhb3B0aW9ucy5jb2xsYXBzaWJsZSAmJiAob3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlIHx8IG9wdGlvbnMuYWN0aXZlID09IG51bGwpICkgewoJCQlvcHRpb25zLmFjdGl2ZSA9IDA7CgkJfQoJCS8vIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMKCQlpZiAoIG9wdGlvbnMuYWN0aXZlIDwgMCApIHsKCQkJb3B0aW9ucy5hY3RpdmUgKz0gdGhpcy5oZWFkZXJzLmxlbmd0aDsKCQl9CgkJdGhpcy5hY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKCBvcHRpb25zLmFjdGl2ZSApCgkJCS5hZGRDbGFzcyggInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSIgKQoJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYWxsIHVpLWNvcm5lci10b3AiICk7CgkJdGhpcy5hY3RpdmUubmV4dCgpCgkJCS5hZGRDbGFzcyggInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZSIgKQoJCQkuc2hvdygpOwoKCQl0aGlzLl9jcmVhdGVJY29ucygpOwoJCXRoaXMucmVmcmVzaCgpOwoKCQkvLyBBUklBCgkJdGhpcy5lbGVtZW50LmF0dHIoICJyb2xlIiwgInRhYmxpc3QiICk7CgoJCXRoaXMuaGVhZGVycwoJCQkuYXR0ciggInJvbGUiLCAidGFiIiApCgkJCS5lYWNoKGZ1bmN0aW9uKCBpICkgewoJCQkJdmFyIGhlYWRlciA9ICQoIHRoaXMgKSwKCQkJCQloZWFkZXJJZCA9IGhlYWRlci5hdHRyKCAiaWQiICksCgkJCQkJcGFuZWwgPSBoZWFkZXIubmV4dCgpLAoJCQkJCXBhbmVsSWQgPSBwYW5lbC5hdHRyKCAiaWQiICk7CgkJCQlpZiAoICFoZWFkZXJJZCApIHsKCQkJCQloZWFkZXJJZCA9IGFjY29yZGlvbklkICsgIi1oZWFkZXItIiArIGk7CgkJCQkJaGVhZGVyLmF0dHIoICJpZCIsIGhlYWRlcklkICk7CgkJCQl9CgkJCQlpZiAoICFwYW5lbElkICkgewoJCQkJCXBhbmVsSWQgPSBhY2NvcmRpb25JZCArICItcGFuZWwtIiArIGk7CgkJCQkJcGFuZWwuYXR0ciggImlkIiwgcGFuZWxJZCApOwoJCQkJfQoJCQkJaGVhZGVyLmF0dHIoICJhcmlhLWNvbnRyb2xzIiwgcGFuZWxJZCApOwoJCQkJcGFuZWwuYXR0ciggImFyaWEtbGFiZWxsZWRieSIsIGhlYWRlcklkICk7CgkJCX0pCgkJCS5uZXh0KCkKCQkJCS5hdHRyKCAicm9sZSIsICJ0YWJwYW5lbCIgKTsKCgkJdGhpcy5oZWFkZXJzCgkJCS5ub3QoIHRoaXMuYWN0aXZlICkKCQkJLmF0dHIoewoJCQkJImFyaWEtc2VsZWN0ZWQiOiAiZmFsc2UiLAoJCQkJdGFiSW5kZXg6IC0xCgkJCX0pCgkJCS5uZXh0KCkKCQkJCS5hdHRyKHsKCQkJCQkiYXJpYS1leHBhbmRlZCI6ICJmYWxzZSIsCgkJCQkJImFyaWEtaGlkZGVuIjogInRydWUiCgkJCQl9KQoJCQkJLmhpZGUoKTsKCgkJLy8gbWFrZSBzdXJlIGF0IGxlYXN0IG9uZSBoZWFkZXIgaXMgaW4gdGhlIHRhYiBvcmRlcgoJCWlmICggIXRoaXMuYWN0aXZlLmxlbmd0aCApIHsKCQkJdGhpcy5oZWFkZXJzLmVxKCAwICkuYXR0ciggInRhYkluZGV4IiwgMCApOwoJCX0gZWxzZSB7CgkJCXRoaXMuYWN0aXZlLmF0dHIoewoJCQkJImFyaWEtc2VsZWN0ZWQiOiAidHJ1ZSIsCgkJCQl0YWJJbmRleDogMAoJCQl9KQoJCQkubmV4dCgpCgkJCQkuYXR0cih7CgkJCQkJImFyaWEtZXhwYW5kZWQiOiAidHJ1ZSIsCgkJCQkJImFyaWEtaGlkZGVuIjogImZhbHNlIgoJCQkJfSk7CgkJfQoKCQl0aGlzLl9vbiggdGhpcy5oZWFkZXJzLCB7IGtleWRvd246ICJfa2V5ZG93biIgfSk7CgkJdGhpcy5fb24oIHRoaXMuaGVhZGVycy5uZXh0KCksIHsga2V5ZG93bjogIl9wYW5lbEtleURvd24iIH0pOwoJCXRoaXMuX3NldHVwRXZlbnRzKCBvcHRpb25zLmV2ZW50ICk7Cgl9LAoKCV9nZXRDcmVhdGVFdmVudERhdGE6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB7CgkJCWhlYWRlcjogdGhpcy5hY3RpdmUsCgkJCWNvbnRlbnQ6ICF0aGlzLmFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLmFjdGl2ZS5uZXh0KCkKCQl9OwoJfSwKCglfY3JlYXRlSWNvbnM6IGZ1bmN0aW9uKCkgewoJCXZhciBpY29ucyA9IHRoaXMub3B0aW9ucy5pY29uczsKCQlpZiAoIGljb25zICkgewoJCQkkKCAiPHNwYW4+IiApCgkJCQkuYWRkQ2xhc3MoICJ1aS1hY2NvcmRpb24taGVhZGVyLWljb24gdWktaWNvbiAiICsgaWNvbnMuaGVhZGVyICkKCQkJCS5wcmVwZW5kVG8oIHRoaXMuaGVhZGVycyApOwoJCQl0aGlzLmFjdGl2ZS5jaGlsZHJlbiggIi51aS1hY2NvcmRpb24taGVhZGVyLWljb24iICkKCQkJCS5yZW1vdmVDbGFzcyggaWNvbnMuaGVhZGVyICkKCQkJCS5hZGRDbGFzcyggaWNvbnMuYWN0aXZlSGVhZGVyICk7CgkJCXRoaXMuaGVhZGVycy5hZGRDbGFzcyggInVpLWFjY29yZGlvbi1pY29ucyIgKTsKCQl9Cgl9LAoKCV9kZXN0cm95SWNvbnM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuaGVhZGVycwoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1hY2NvcmRpb24taWNvbnMiICkKCQkJLmNoaWxkcmVuKCAiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvbiIgKQoJCQkJLnJlbW92ZSgpOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIGNvbnRlbnRzOwoKCQkvLyBjbGVhbiB1cCBtYWluIGVsZW1lbnQKCQl0aGlzLmVsZW1lbnQKCQkJLnJlbW92ZUNsYXNzKCAidWktYWNjb3JkaW9uIHVpLXdpZGdldCB1aS1oZWxwZXItcmVzZXQiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApOwoKCQkvLyBjbGVhbiB1cCBoZWFkZXJzCgkJdGhpcy5oZWFkZXJzCgkJCS5yZW1vdmVDbGFzcyggInVpLWFjY29yZGlvbi1oZWFkZXIgdWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGlzYWJsZWQgdWktY29ybmVyLXRvcCIgKQoJCQkucmVtb3ZlQXR0ciggInJvbGUiICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLXNlbGVjdGVkIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1jb250cm9scyIgKQoJCQkucmVtb3ZlQXR0ciggInRhYkluZGV4IiApCgkJCS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJaWYgKCAvXnVpLWFjY29yZGlvbi8udGVzdCggdGhpcy5pZCApICkgewoJCQkJCXRoaXMucmVtb3ZlQXR0cmlidXRlKCAiaWQiICk7CgkJCQl9CgkJCX0pOwoJCXRoaXMuX2Rlc3Ryb3lJY29ucygpOwoKCQkvLyBjbGVhbiB1cCBjb250ZW50IHBhbmVscwoJCWNvbnRlbnRzID0gdGhpcy5oZWFkZXJzLm5leHQoKQoJCQkuY3NzKCAiZGlzcGxheSIsICIiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1leHBhbmRlZCIgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtaGlkZGVuIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1sYWJlbGxlZGJ5IiApCgkJCS5yZW1vdmVDbGFzcyggInVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIHVpLWFjY29yZGlvbi1jb250ZW50IHVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZSB1aS1zdGF0ZS1kaXNhYmxlZCIgKQoJCQkuZWFjaChmdW5jdGlvbigpIHsKCQkJCWlmICggL151aS1hY2NvcmRpb24vLnRlc3QoIHRoaXMuaWQgKSApIHsKCQkJCQl0aGlzLnJlbW92ZUF0dHJpYnV0ZSggImlkIiApOwoJCQkJfQoJCQl9KTsKCQlpZiAoIHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSAhPT0gImNvbnRlbnQiICkgewoJCQljb250ZW50cy5jc3MoICJoZWlnaHQiLCAiIiApOwoJCX0KCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJaWYgKCBrZXkgPT09ICJhY3RpdmUiICkgewoJCQkvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9ucwoJCQl0aGlzLl9hY3RpdmF0ZSggdmFsdWUgKTsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJldmVudCIgKSB7CgkJCWlmICggdGhpcy5vcHRpb25zLmV2ZW50ICkgewoJCQkJdGhpcy5fb2ZmKCB0aGlzLmhlYWRlcnMsIHRoaXMub3B0aW9ucy5ldmVudCApOwoJCQl9CgkJCXRoaXMuX3NldHVwRXZlbnRzKCB2YWx1ZSApOwoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCgkJLy8gc2V0dGluZyBjb2xsYXBzaWJsZTogZmFsc2Ugd2hpbGUgY29sbGFwc2VkOyBvcGVuIGZpcnN0IHBhbmVsCgkJaWYgKCBrZXkgPT09ICJjb2xsYXBzaWJsZSIgJiYgIXZhbHVlICYmIHRoaXMub3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICkgewoJCQl0aGlzLl9hY3RpdmF0ZSggMCApOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJpY29ucyIgKSB7CgkJCXRoaXMuX2Rlc3Ryb3lJY29ucygpOwoJCQlpZiAoIHZhbHVlICkgewoJCQkJdGhpcy5fY3JlYXRlSWNvbnMoKTsKCQkJfQoJCX0KCgkJLy8gIzUzMzIgLSBvcGFjaXR5IGRvZXNuJ3QgY2FzY2FkZSB0byBwb3NpdGlvbmVkIGVsZW1lbnRzIGluIElFCgkJLy8gc28gd2UgbmVlZCB0byBhZGQgdGhlIGRpc2FibGVkIGNsYXNzIHRvIHRoZSBoZWFkZXJzIGFuZCBwYW5lbHMKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJdGhpcy5oZWFkZXJzLmFkZCggdGhpcy5oZWFkZXJzLm5leHQoKSApCgkJCQkudG9nZ2xlQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIsICEhdmFsdWUgKTsKCQl9Cgl9LAoKCV9rZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGUsCgkJCWxlbmd0aCA9IHRoaXMuaGVhZGVycy5sZW5ndGgsCgkJCWN1cnJlbnRJbmRleCA9IHRoaXMuaGVhZGVycy5pbmRleCggZXZlbnQudGFyZ2V0ICksCgkJCXRvRm9jdXMgPSBmYWxzZTsKCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJY2FzZSBrZXlDb2RlLlJJR0hUOgoJCQljYXNlIGtleUNvZGUuRE9XTjoKCQkJCXRvRm9jdXMgPSB0aGlzLmhlYWRlcnNbICggY3VycmVudEluZGV4ICsgMSApICUgbGVuZ3RoIF07CgkJCQlicmVhazsKCQkJY2FzZSBrZXlDb2RlLkxFRlQ6CgkJCWNhc2Uga2V5Q29kZS5VUDoKCQkJCXRvRm9jdXMgPSB0aGlzLmhlYWRlcnNbICggY3VycmVudEluZGV4IC0gMSArIGxlbmd0aCApICUgbGVuZ3RoIF07CgkJCQlicmVhazsKCQkJY2FzZSBrZXlDb2RlLlNQQUNFOgoJCQljYXNlIGtleUNvZGUuRU5URVI6CgkJCQl0aGlzLl9ldmVudEhhbmRsZXIoIGV2ZW50ICk7CgkJCQlicmVhazsKCQkJY2FzZSBrZXlDb2RlLkhPTUU6CgkJCQl0b0ZvY3VzID0gdGhpcy5oZWFkZXJzWyAwIF07CgkJCQlicmVhazsKCQkJY2FzZSBrZXlDb2RlLkVORDoKCQkJCXRvRm9jdXMgPSB0aGlzLmhlYWRlcnNbIGxlbmd0aCAtIDEgXTsKCQkJCWJyZWFrOwoJCX0KCgkJaWYgKCB0b0ZvY3VzICkgewoJCQkkKCBldmVudC50YXJnZXQgKS5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCQkkKCB0b0ZvY3VzICkuYXR0ciggInRhYkluZGV4IiwgMCApOwoJCQl0b0ZvY3VzLmZvY3VzKCk7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfQoJfSwKCglfcGFuZWxLZXlEb3duIDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWlmICggZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlVQICYmIGV2ZW50LmN0cmxLZXkgKSB7CgkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5wcmV2KCkuZm9jdXMoKTsKCQl9Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBtYXhIZWlnaHQsIG92ZXJmbG93LAoJCQloZWlnaHRTdHlsZSA9IHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSwKCQkJcGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpOwoKCgkJaWYgKCBoZWlnaHRTdHlsZSA9PT0gImZpbGwiICkgewoJCQkvLyBJRSA2IHRyZWF0cyBoZWlnaHQgbGlrZSBtaW5IZWlnaHQsIHNvIHdlIG5lZWQgdG8gdHVybiBvZmYgb3ZlcmZsb3cKCQkJLy8gaW4gb3JkZXIgdG8gZ2V0IGEgcmVsaWFibGUgaGVpZ2h0CgkJCS8vIHdlIHVzZSB0aGUgbWluSGVpZ2h0IHN1cHBvcnQgdGVzdCBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IG9ubHkKCQkJLy8gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IG1pbkhlaWdodCB3aWxsIHRyZWF0IGhlaWdodCBhcyBtaW5IZWlnaHQKCQkJaWYgKCAhJC5zdXBwb3J0Lm1pbkhlaWdodCApIHsKCQkJCW92ZXJmbG93ID0gcGFyZW50LmNzcyggIm92ZXJmbG93IiApOwoJCQkJcGFyZW50LmNzcyggIm92ZXJmbG93IiwgImhpZGRlbiIpOwoJCQl9CgkJCW1heEhlaWdodCA9IHBhcmVudC5oZWlnaHQoKTsKCQkJdGhpcy5lbGVtZW50LnNpYmxpbmdzKCAiOnZpc2libGUiICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBlbGVtID0gJCggdGhpcyApLAoJCQkJCXBvc2l0aW9uID0gZWxlbS5jc3MoICJwb3NpdGlvbiIgKTsKCgkJCQlpZiAoIHBvc2l0aW9uID09PSAiYWJzb2x1dGUiIHx8IHBvc2l0aW9uID09PSAiZml4ZWQiICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCW1heEhlaWdodCAtPSBlbGVtLm91dGVySGVpZ2h0KCB0cnVlICk7CgkJCX0pOwoJCQlpZiAoIG92ZXJmbG93ICkgewoJCQkJcGFyZW50LmNzcyggIm92ZXJmbG93Iiwgb3ZlcmZsb3cgKTsKCQkJfQoKCQkJdGhpcy5oZWFkZXJzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQltYXhIZWlnaHQgLT0gJCggdGhpcyApLm91dGVySGVpZ2h0KCB0cnVlICk7CgkJCX0pOwoKCQkJdGhpcy5oZWFkZXJzLm5leHQoKQoJCQkJLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkJJCggdGhpcyApLmhlaWdodCggTWF0aC5tYXgoIDAsIG1heEhlaWdodCAtCgkJCQkJCSQoIHRoaXMgKS5pbm5lckhlaWdodCgpICsgJCggdGhpcyApLmhlaWdodCgpICkgKTsKCQkJCX0pCgkJCQkuY3NzKCAib3ZlcmZsb3ciLCAiYXV0byIgKTsKCQl9IGVsc2UgaWYgKCBoZWlnaHRTdHlsZSA9PT0gImF1dG8iICkgewoJCQltYXhIZWlnaHQgPSAwOwoJCQl0aGlzLmhlYWRlcnMubmV4dCgpCgkJCQkuZWFjaChmdW5jdGlvbigpIHsKCQkJCQltYXhIZWlnaHQgPSBNYXRoLm1heCggbWF4SGVpZ2h0LCAkKCB0aGlzICkuY3NzKCAiaGVpZ2h0IiwgIiIgKS5oZWlnaHQoKSApOwoJCQkJfSkKCQkJCS5oZWlnaHQoIG1heEhlaWdodCApOwoJCX0KCX0sCgoJX2FjdGl2YXRlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJdmFyIGFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIGluZGV4IClbIDAgXTsKCgkJLy8gdHJ5aW5nIHRvIGFjdGl2YXRlIHRoZSBhbHJlYWR5IGFjdGl2ZSBwYW5lbAoJCWlmICggYWN0aXZlID09PSB0aGlzLmFjdGl2ZVsgMCBdICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyB0cnlpbmcgdG8gY29sbGFwc2UsIHNpbXVsYXRlIGEgY2xpY2sgb24gdGhlIGN1cnJlbnRseSBhY3RpdmUgaGVhZGVyCgkJYWN0aXZlID0gYWN0aXZlIHx8IHRoaXMuYWN0aXZlWyAwIF07CgoJCXRoaXMuX2V2ZW50SGFuZGxlcih7CgkJCXRhcmdldDogYWN0aXZlLAoJCQljdXJyZW50VGFyZ2V0OiBhY3RpdmUsCgkJCXByZXZlbnREZWZhdWx0OiAkLm5vb3AKCQl9KTsKCX0sCgoJX2ZpbmRBY3RpdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQlyZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSAibnVtYmVyIiA/IHRoaXMuaGVhZGVycy5lcSggc2VsZWN0b3IgKSA6ICQoKTsKCX0sCgoJX3NldHVwRXZlbnRzOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGV2ZW50cyA9IHt9OwoJCWlmICggIWV2ZW50ICkgewoJCQlyZXR1cm47CgkJfQoJCSQuZWFjaCggZXZlbnQuc3BsaXQoIiAiKSwgZnVuY3Rpb24oIGluZGV4LCBldmVudE5hbWUgKSB7CgkJCWV2ZW50c1sgZXZlbnROYW1lIF0gPSAiX2V2ZW50SGFuZGxlciI7CgkJfSk7CgkJdGhpcy5fb24oIHRoaXMuaGVhZGVycywgZXZlbnRzICk7Cgl9LAoKCV9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJYWN0aXZlID0gdGhpcy5hY3RpdmUsCgkJCWNsaWNrZWQgPSAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksCgkJCWNsaWNrZWRJc0FjdGl2ZSA9IGNsaWNrZWRbIDAgXSA9PT0gYWN0aXZlWyAwIF0sCgkJCWNvbGxhcHNpbmcgPSBjbGlja2VkSXNBY3RpdmUgJiYgb3B0aW9ucy5jb2xsYXBzaWJsZSwKCQkJdG9TaG93ID0gY29sbGFwc2luZyA/ICQoKSA6IGNsaWNrZWQubmV4dCgpLAoJCQl0b0hpZGUgPSBhY3RpdmUubmV4dCgpLAoJCQlldmVudERhdGEgPSB7CgkJCQlvbGRIZWFkZXI6IGFjdGl2ZSwKCQkJCW9sZFBhbmVsOiB0b0hpZGUsCgkJCQluZXdIZWFkZXI6IGNvbGxhcHNpbmcgPyAkKCkgOiBjbGlja2VkLAoJCQkJbmV3UGFuZWw6IHRvU2hvdwoJCQl9OwoKCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQlpZiAoCgkJCQkvLyBjbGljayBvbiBhY3RpdmUgaGVhZGVyLCBidXQgbm90IGNvbGxhcHNpYmxlCgkJCQkoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8CgkJCQkvLyBhbGxvdyBjYW5jZWxpbmcgYWN0aXZhdGlvbgoJCQkJKCB0aGlzLl90cmlnZ2VyKCAiYmVmb3JlQWN0aXZhdGUiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCW9wdGlvbnMuYWN0aXZlID0gY29sbGFwc2luZyA/IGZhbHNlIDogdGhpcy5oZWFkZXJzLmluZGV4KCBjbGlja2VkICk7CgoJCS8vIHdoZW4gdGhlIGNhbGwgdG8gLl90b2dnbGUoKSBjb21lcyBhZnRlciB0aGUgY2xhc3MgY2hhbmdlcwoJCS8vIGl0IGNhdXNlcyBhIHZlcnkgb2RkIGJ1ZyBpbiBJRSA4IChzZWUgIzY3MjApCgkJdGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiBjbGlja2VkOwoJCXRoaXMuX3RvZ2dsZSggZXZlbnREYXRhICk7CgoJCS8vIHN3aXRjaCBjbGFzc2VzCgkJLy8gY29ybmVyIGNsYXNzZXMgb24gdGhlIHByZXZpb3VzbHkgYWN0aXZlIGhlYWRlciBzdGF5IGFmdGVyIHRoZSBhbmltYXRpb24KCQlhY3RpdmUucmVtb3ZlQ2xhc3MoICJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUiICk7CgkJaWYgKCBvcHRpb25zLmljb25zICkgewoJCQlhY3RpdmUuY2hpbGRyZW4oICIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIiApCgkJCQkucmVtb3ZlQ2xhc3MoIG9wdGlvbnMuaWNvbnMuYWN0aXZlSGVhZGVyICkKCQkJCS5hZGRDbGFzcyggb3B0aW9ucy5pY29ucy5oZWFkZXIgKTsKCQl9CgoJCWlmICggIWNsaWNrZWRJc0FjdGl2ZSApIHsKCQkJY2xpY2tlZAoJCQkJLnJlbW92ZUNsYXNzKCAidWktY29ybmVyLWFsbCIgKQoJCQkJLmFkZENsYXNzKCAidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLWNvcm5lci10b3AiICk7CgkJCWlmICggb3B0aW9ucy5pY29ucyApIHsKCQkJCWNsaWNrZWQuY2hpbGRyZW4oICIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIiApCgkJCQkJLnJlbW92ZUNsYXNzKCBvcHRpb25zLmljb25zLmhlYWRlciApCgkJCQkJLmFkZENsYXNzKCBvcHRpb25zLmljb25zLmFjdGl2ZUhlYWRlciApOwoJCQl9CgoJCQljbGlja2VkCgkJCQkubmV4dCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiICk7CgkJfQoJfSwKCglfdG9nZ2xlOiBmdW5jdGlvbiggZGF0YSApIHsKCQl2YXIgdG9TaG93ID0gZGF0YS5uZXdQYW5lbCwKCQkJdG9IaWRlID0gdGhpcy5wcmV2U2hvdy5sZW5ndGggPyB0aGlzLnByZXZTaG93IDogZGF0YS5vbGRQYW5lbDsKCgkJLy8gaGFuZGxlIGFjdGl2YXRpbmcgYSBwYW5lbCBkdXJpbmcgdGhlIGFuaW1hdGlvbiBmb3IgYW5vdGhlciBhY3RpdmF0aW9uCgkJdGhpcy5wcmV2U2hvdy5hZGQoIHRoaXMucHJldkhpZGUgKS5zdG9wKCB0cnVlLCB0cnVlICk7CgkJdGhpcy5wcmV2U2hvdyA9IHRvU2hvdzsKCQl0aGlzLnByZXZIaWRlID0gdG9IaWRlOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5hbmltYXRlICkgewoJCQl0aGlzLl9hbmltYXRlKCB0b1Nob3csIHRvSGlkZSwgZGF0YSApOwoJCX0gZWxzZSB7CgkJCXRvSGlkZS5oaWRlKCk7CgkJCXRvU2hvdy5zaG93KCk7CgkJCXRoaXMuX3RvZ2dsZUNvbXBsZXRlKCBkYXRhICk7CgkJfQoKCQl0b0hpZGUuYXR0cih7CgkJCSJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKCQkJImFyaWEtaGlkZGVuIjogInRydWUiCgkJfSk7CgkJdG9IaWRlLnByZXYoKS5hdHRyKCAiYXJpYS1zZWxlY3RlZCIsICJmYWxzZSIgKTsKCQkvLyBpZiB3ZSdyZSBzd2l0Y2hpbmcgcGFuZWxzLCByZW1vdmUgdGhlIG9sZCBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyCgkJLy8gaWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyCgkJLy8gaWYgd2UncmUgY29sbGFwc2luZywgdGhlbiBrZWVwIHRoZSBjb2xsYXBzaW5nIGhlYWRlciBpbiB0aGUgdGFiIG9yZGVyCgkJaWYgKCB0b1Nob3cubGVuZ3RoICYmIHRvSGlkZS5sZW5ndGggKSB7CgkJCXRvSGlkZS5wcmV2KCkuYXR0ciggInRhYkluZGV4IiwgLTEgKTsKCQl9IGVsc2UgaWYgKCB0b1Nob3cubGVuZ3RoICkgewoJCQl0aGlzLmhlYWRlcnMuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS5hdHRyKCAidGFiSW5kZXgiICkgPT09IDA7CgkJCX0pCgkJCS5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCX0KCgkJdG9TaG93CgkJCS5hdHRyKHsKCQkJCSJhcmlhLWV4cGFuZGVkIjogInRydWUiLAoJCQkJImFyaWEtaGlkZGVuIjogImZhbHNlIgoJCQl9KQoJCQkucHJldigpCgkJCQkuYXR0cih7CgkJCQkJImFyaWEtc2VsZWN0ZWQiOiAidHJ1ZSIsCgkJCQkJdGFiSW5kZXg6IDAKCQkJCX0pOwoJfSwKCglfYW5pbWF0ZTogZnVuY3Rpb24oIHRvU2hvdywgdG9IaWRlLCBkYXRhICkgewoJCXZhciB0b3RhbCwgZWFzaW5nLCBkdXJhdGlvbiwKCQkJdGhhdCA9IHRoaXMsCgkJCWFkanVzdCA9IDAsCgkJCWRvd24gPSB0b1Nob3cubGVuZ3RoICYmCgkJCQkoICF0b0hpZGUubGVuZ3RoIHx8ICggdG9TaG93LmluZGV4KCkgPCB0b0hpZGUuaW5kZXgoKSApICksCgkJCWFuaW1hdGUgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZSB8fCB7fSwKCQkJb3B0aW9ucyA9IGRvd24gJiYgYW5pbWF0ZS5kb3duIHx8IGFuaW1hdGUsCgkJCWNvbXBsZXRlID0gZnVuY3Rpb24oKSB7CgkJCQl0aGF0Ll90b2dnbGVDb21wbGV0ZSggZGF0YSApOwoJCQl9OwoKCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAibnVtYmVyIiApIHsKCQkJZHVyYXRpb24gPSBvcHRpb25zOwoJCX0KCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAic3RyaW5nIiApIHsKCQkJZWFzaW5nID0gb3B0aW9uczsKCQl9CgkJLy8gZmFsbCBiYWNrIGZyb20gb3B0aW9ucyB0byBhbmltYXRpb24gaW4gY2FzZSBvZiBwYXJ0aWFsIGRvd24gc2V0dGluZ3MKCQllYXNpbmcgPSBlYXNpbmcgfHwgb3B0aW9ucy5lYXNpbmcgfHwgYW5pbWF0ZS5lYXNpbmc7CgkJZHVyYXRpb24gPSBkdXJhdGlvbiB8fCBvcHRpb25zLmR1cmF0aW9uIHx8IGFuaW1hdGUuZHVyYXRpb247CgoJCWlmICggIXRvSGlkZS5sZW5ndGggKSB7CgkJCXJldHVybiB0b1Nob3cuYW5pbWF0ZSggc2hvd1Byb3BzLCBkdXJhdGlvbiwgZWFzaW5nLCBjb21wbGV0ZSApOwoJCX0KCQlpZiAoICF0b1Nob3cubGVuZ3RoICkgewoJCQlyZXR1cm4gdG9IaWRlLmFuaW1hdGUoIGhpZGVQcm9wcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUgKTsKCQl9CgoJCXRvdGFsID0gdG9TaG93LnNob3coKS5vdXRlckhlaWdodCgpOwoJCXRvSGlkZS5hbmltYXRlKCBoaWRlUHJvcHMsIHsKCQkJZHVyYXRpb246IGR1cmF0aW9uLAoJCQllYXNpbmc6IGVhc2luZywKCQkJc3RlcDogZnVuY3Rpb24oIG5vdywgZnggKSB7CgkJCQlmeC5ub3cgPSBNYXRoLnJvdW5kKCBub3cgKTsKCQkJfQoJCX0pOwoJCXRvU2hvdwoJCQkuaGlkZSgpCgkJCS5hbmltYXRlKCBzaG93UHJvcHMsIHsKCQkJCWR1cmF0aW9uOiBkdXJhdGlvbiwKCQkJCWVhc2luZzogZWFzaW5nLAoJCQkJY29tcGxldGU6IGNvbXBsZXRlLAoJCQkJc3RlcDogZnVuY3Rpb24oIG5vdywgZnggKSB7CgkJCQkJZngubm93ID0gTWF0aC5yb3VuZCggbm93ICk7CgkJCQkJaWYgKCBmeC5wcm9wICE9PSAiaGVpZ2h0IiApIHsKCQkJCQkJYWRqdXN0ICs9IGZ4Lm5vdzsKCQkJCQl9IGVsc2UgaWYgKCB0aGF0Lm9wdGlvbnMuaGVpZ2h0U3R5bGUgIT09ICJjb250ZW50IiApIHsKCQkJCQkJZngubm93ID0gTWF0aC5yb3VuZCggdG90YWwgLSB0b0hpZGUub3V0ZXJIZWlnaHQoKSAtIGFkanVzdCApOwoJCQkJCQlhZGp1c3QgPSAwOwoJCQkJCX0KCQkJCX0KCQkJfSk7Cgl9LAoKCV90b2dnbGVDb21wbGV0ZTogZnVuY3Rpb24oIGRhdGEgKSB7CgkJdmFyIHRvSGlkZSA9IGRhdGEub2xkUGFuZWw7CgoJCXRvSGlkZQoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiICkKCQkJLnByZXYoKQoJCQkJLnJlbW92ZUNsYXNzKCAidWktY29ybmVyLXRvcCIgKQoJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLWFsbCIgKTsKCgkJLy8gV29yayBhcm91bmQgZm9yIHJlbmRlcmluZyBidWcgaW4gSUUgKCM1NDIxKQoJCWlmICggdG9IaWRlLmxlbmd0aCApIHsKCQkJdG9IaWRlLnBhcmVudCgpWzBdLmNsYXNzTmFtZSA9IHRvSGlkZS5wYXJlbnQoKVswXS5jbGFzc05hbWU7CgkJfQoKCQl0aGlzLl90cmlnZ2VyKCAiYWN0aXZhdGUiLCBudWxsLCBkYXRhICk7Cgl9Cn0pOwoKCgovLyBERVBSRUNBVEVECmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkgewoJLy8gbmF2aWdhdGlvbiBvcHRpb25zCgkoZnVuY3Rpb24oICQsIHByb3RvdHlwZSApIHsKCQkkLmV4dGVuZCggcHJvdG90eXBlLm9wdGlvbnMsIHsKCQkJbmF2aWdhdGlvbjogZmFsc2UsCgkJCW5hdmlnYXRpb25GaWx0ZXI6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHRoaXMuaHJlZi50b0xvd2VyQ2FzZSgpID09PSBsb2NhdGlvbi5ocmVmLnRvTG93ZXJDYXNlKCk7CgkJCX0KCQl9KTsKCgkJdmFyIF9jcmVhdGUgPSBwcm90b3R5cGUuX2NyZWF0ZTsKCQlwcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoIHRoaXMub3B0aW9ucy5uYXZpZ2F0aW9uICkgewoJCQkJdmFyIHRoYXQgPSB0aGlzLAoJCQkJCWhlYWRlcnMgPSB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLmhlYWRlciApLAoJCQkJCWNvbnRlbnQgPSBoZWFkZXJzLm5leHQoKSwKCQkJCQljdXJyZW50ID0gaGVhZGVycy5hZGQoIGNvbnRlbnQgKQoJCQkJCQkuZmluZCggImEiICkKCQkJCQkJLmZpbHRlciggdGhpcy5vcHRpb25zLm5hdmlnYXRpb25GaWx0ZXIgKQoJCQkJCQlbIDAgXTsKCQkJCWlmICggY3VycmVudCApIHsKCQkJCQloZWFkZXJzLmFkZCggY29udGVudCApLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHsKCQkJCQkJaWYgKCAkLmNvbnRhaW5zKCB0aGlzLCBjdXJyZW50ICkgKSB7CgkJCQkJCQl0aGF0Lm9wdGlvbnMuYWN0aXZlID0gTWF0aC5mbG9vciggaW5kZXggLyAyICk7CgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJfQoJCQlfY3JlYXRlLmNhbGwoIHRoaXMgKTsKCQl9OwoJfSggalF1ZXJ5LCBqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZSApICk7CgoJLy8gaGVpZ2h0IG9wdGlvbnMKCShmdW5jdGlvbiggJCwgcHJvdG90eXBlICkgewoJCSQuZXh0ZW5kKCBwcm90b3R5cGUub3B0aW9ucywgewoJCQloZWlnaHRTdHlsZTogbnVsbCwgLy8gcmVtb3ZlIGRlZmF1bHQgc28gd2UgZmFsbCBiYWNrIHRvIG9sZCB2YWx1ZXMKCQkJYXV0b0hlaWdodDogdHJ1ZSwgLy8gdXNlIGhlaWdodFN0eWxlOiAiYXV0byIKCQkJY2xlYXJTdHlsZTogZmFsc2UsIC8vIHVzZSBoZWlnaHRTdHlsZTogImNvbnRlbnQiCgkJCWZpbGxTcGFjZTogZmFsc2UgLy8gdXNlIGhlaWdodFN0eWxlOiAiZmlsbCIKCQl9KTsKCgkJdmFyIF9jcmVhdGUgPSBwcm90b3R5cGUuX2NyZWF0ZSwKCQkJX3NldE9wdGlvbiA9IHByb3RvdHlwZS5fc2V0T3B0aW9uOwoKCQkkLmV4dGVuZCggcHJvdG90eXBlLCB7CgkJCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCQkJdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlID0gdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlIHx8CgkJCQkJdGhpcy5fbWVyZ2VIZWlnaHRTdHlsZSgpOwoKCQkJCV9jcmVhdGUuY2FsbCggdGhpcyApOwoJCQl9LAoKCQkJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSApIHsKCQkJCWlmICgga2V5ID09PSAiYXV0b0hlaWdodCIgfHwga2V5ID09PSAiY2xlYXJTdHlsZSIgfHwga2V5ID09PSAiZmlsbFNwYWNlIiApIHsKCQkJCQl0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgPSB0aGlzLl9tZXJnZUhlaWdodFN0eWxlKCk7CgkJCQl9CgkJCQlfc2V0T3B0aW9uLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJfSwKCgkJCV9tZXJnZUhlaWdodFN0eWxlOiBmdW5jdGlvbigpIHsKCQkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQkJCWlmICggb3B0aW9ucy5maWxsU3BhY2UgKSB7CgkJCQkJcmV0dXJuICJmaWxsIjsKCQkJCX0KCgkJCQlpZiAoIG9wdGlvbnMuY2xlYXJTdHlsZSApIHsKCQkJCQlyZXR1cm4gImNvbnRlbnQiOwoJCQkJfQoKCQkJCWlmICggb3B0aW9ucy5hdXRvSGVpZ2h0ICkgewoJCQkJCXJldHVybiAiYXV0byI7CgkJCQl9CgkJCX0KCQl9KTsKCX0oIGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUgKSApOwoKCS8vIGljb24gb3B0aW9ucwoJKGZ1bmN0aW9uKCAkLCBwcm90b3R5cGUgKSB7CgkJJC5leHRlbmQoIHByb3RvdHlwZS5vcHRpb25zLmljb25zLCB7CgkJCWFjdGl2ZUhlYWRlcjogbnVsbCwgLy8gcmVtb3ZlIGRlZmF1bHQgc28gd2UgZmFsbCBiYWNrIHRvIG9sZCB2YWx1ZXMKCQkJaGVhZGVyU2VsZWN0ZWQ6ICJ1aS1pY29uLXRyaWFuZ2xlLTEtcyIKCQl9KTsKCgkJdmFyIF9jcmVhdGVJY29ucyA9IHByb3RvdHlwZS5fY3JlYXRlSWNvbnM7CgkJcHJvdG90eXBlLl9jcmVhdGVJY29ucyA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoIHRoaXMub3B0aW9ucy5pY29ucyApIHsKCQkJCXRoaXMub3B0aW9ucy5pY29ucy5hY3RpdmVIZWFkZXIgPSB0aGlzLm9wdGlvbnMuaWNvbnMuYWN0aXZlSGVhZGVyIHx8CgkJCQkJdGhpcy5vcHRpb25zLmljb25zLmhlYWRlclNlbGVjdGVkOwoJCQl9CgkJCV9jcmVhdGVJY29ucy5jYWxsKCB0aGlzICk7CgkJfTsKCX0oIGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUgKSApOwoKCS8vIGV4cGFuZGVkIGFjdGl2ZSBvcHRpb24sIGFjdGl2YXRlIG1ldGhvZAoJKGZ1bmN0aW9uKCAkLCBwcm90b3R5cGUgKSB7CgkJcHJvdG90eXBlLmFjdGl2YXRlID0gcHJvdG90eXBlLl9hY3RpdmF0ZTsKCgkJdmFyIF9maW5kQWN0aXZlID0gcHJvdG90eXBlLl9maW5kQWN0aXZlOwoJCXByb3RvdHlwZS5fZmluZEFjdGl2ZSA9IGZ1bmN0aW9uKCBpbmRleCApIHsKCQkJaWYgKCBpbmRleCA9PT0gLTEgKSB7CgkJCQlpbmRleCA9IGZhbHNlOwoJCQl9CgkJCWlmICggaW5kZXggJiYgdHlwZW9mIGluZGV4ICE9PSAibnVtYmVyIiApIHsKCQkJCWluZGV4ID0gdGhpcy5oZWFkZXJzLmluZGV4KCB0aGlzLmhlYWRlcnMuZmlsdGVyKCBpbmRleCApICk7CgkJCQlpZiAoIGluZGV4ID09PSAtMSApIHsKCQkJCQlpbmRleCA9IGZhbHNlOwoJCQkJfQoJCQl9CgkJCXJldHVybiBfZmluZEFjdGl2ZS5jYWxsKCB0aGlzLCBpbmRleCApOwoJCX07Cgl9KCBqUXVlcnksIGpRdWVyeS51aS5hY2NvcmRpb24ucHJvdG90eXBlICkgKTsKCgkvLyByZXNpemUgbWV0aG9kCglqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZS5yZXNpemUgPSBqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZS5yZWZyZXNoOwoKCS8vIGNoYW5nZSBldmVudHMKCShmdW5jdGlvbiggJCwgcHJvdG90eXBlICkgewoJCSQuZXh0ZW5kKCBwcm90b3R5cGUub3B0aW9ucywgewoJCQljaGFuZ2U6IG51bGwsCgkJCWNoYW5nZXN0YXJ0OiBudWxsCgkJfSk7CgoJCXZhciBfdHJpZ2dlciA9IHByb3RvdHlwZS5fdHJpZ2dlcjsKCQlwcm90b3R5cGUuX3RyaWdnZXIgPSBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGRhdGEgKSB7CgkJCXZhciByZXQgPSBfdHJpZ2dlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCWlmICggIXJldCApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJaWYgKCB0eXBlID09PSAiYmVmb3JlQWN0aXZhdGUiICkgewoJCQkJcmV0ID0gX3RyaWdnZXIuY2FsbCggdGhpcywgImNoYW5nZXN0YXJ0IiwgZXZlbnQsIHsKCQkJCQlvbGRIZWFkZXI6IGRhdGEub2xkSGVhZGVyLAoJCQkJCW9sZENvbnRlbnQ6IGRhdGEub2xkUGFuZWwsCgkJCQkJbmV3SGVhZGVyOiBkYXRhLm5ld0hlYWRlciwKCQkJCQluZXdDb250ZW50OiBkYXRhLm5ld1BhbmVsCgkJCQl9KTsKCQkJfSBlbHNlIGlmICggdHlwZSA9PT0gImFjdGl2YXRlIiApIHsKCQkJCXJldCA9IF90cmlnZ2VyLmNhbGwoIHRoaXMsICJjaGFuZ2UiLCBldmVudCwgewoJCQkJCW9sZEhlYWRlcjogZGF0YS5vbGRIZWFkZXIsCgkJCQkJb2xkQ29udGVudDogZGF0YS5vbGRQYW5lbCwKCQkJCQluZXdIZWFkZXI6IGRhdGEubmV3SGVhZGVyLAoJCQkJCW5ld0NvbnRlbnQ6IGRhdGEubmV3UGFuZWwKCQkJCX0pOwoJCQl9CgkJCXJldHVybiByZXQ7CgkJfTsKCX0oIGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUgKSApOwoKCS8vIGFuaW1hdGVkIG9wdGlvbgoJLy8gTk9URTogdGhpcyBvbmx5IHByb3ZpZGVzIHN1cHBvcnQgZm9yICJzbGlkZSIsICJib3VuY2VzbGlkZSIsIGFuZCBlYXNpbmdzCgkvLyBub3QgdGhlIGZ1bGwgJC51aS5hY2NvcmRpb24uYW5pbWF0aW9ucyBBUEkKCShmdW5jdGlvbiggJCwgcHJvdG90eXBlICkgewoJCSQuZXh0ZW5kKCBwcm90b3R5cGUub3B0aW9ucywgewoJCQlhbmltYXRlOiBudWxsLAoJCQlhbmltYXRlZDogInNsaWRlIgoJCX0pOwoKCQl2YXIgX2NyZWF0ZSA9IHByb3RvdHlwZS5fY3JlYXRlOwoJCXByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7CgkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoJCQlpZiAoIG9wdGlvbnMuYW5pbWF0ZSA9PT0gbnVsbCApIHsKCQkJCWlmICggIW9wdGlvbnMuYW5pbWF0ZWQgKSB7CgkJCQkJb3B0aW9ucy5hbmltYXRlID0gZmFsc2U7CgkJCQl9IGVsc2UgaWYgKCBvcHRpb25zLmFuaW1hdGVkID09PSAic2xpZGUiICkgewoJCQkJCW9wdGlvbnMuYW5pbWF0ZSA9IDMwMDsKCQkJCX0gZWxzZSBpZiAoIG9wdGlvbnMuYW5pbWF0ZWQgPT09ICJib3VuY2VzbGlkZSIgKSB7CgkJCQkJb3B0aW9ucy5hbmltYXRlID0gewoJCQkJCQlkdXJhdGlvbjogMjAwLAoJCQkJCQlkb3duOiB7CgkJCQkJCQllYXNpbmc6ICJlYXNlT3V0Qm91bmNlIiwKCQkJCQkJCWR1cmF0aW9uOiAxMDAwCgkJCQkJCX0KCQkJCQl9OwoJCQkJfSBlbHNlIHsKCQkJCQlvcHRpb25zLmFuaW1hdGUgPSBvcHRpb25zLmFuaW1hdGVkOwoJCQkJfQoJCQl9CgoJCQlfY3JlYXRlLmNhbGwoIHRoaXMgKTsKCQl9OwoJfSggalF1ZXJ5LCBqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZSApICk7Cn0KCn0pKCBqUXVlcnkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgovLyB1c2VkIHRvIHByZXZlbnQgcmFjZSBjb25kaXRpb25zIHdpdGggcmVtb3RlIGRhdGEgc291cmNlcwp2YXIgcmVxdWVzdEluZGV4ID0gMDsKCiQud2lkZ2V0KCAidWkuYXV0b2NvbXBsZXRlIiwgewoJdmVyc2lvbjogIjEuOS4yIiwKCWRlZmF1bHRFbGVtZW50OiAiPGlucHV0PiIsCglvcHRpb25zOiB7CgkJYXBwZW5kVG86ICJib2R5IiwKCQlhdXRvRm9jdXM6IGZhbHNlLAoJCWRlbGF5OiAzMDAsCgkJbWluTGVuZ3RoOiAxLAoJCXBvc2l0aW9uOiB7CgkJCW15OiAibGVmdCB0b3AiLAoJCQlhdDogImxlZnQgYm90dG9tIiwKCQkJY29sbGlzaW9uOiAibm9uZSIKCQl9LAoJCXNvdXJjZTogbnVsbCwKCgkJLy8gY2FsbGJhY2tzCgkJY2hhbmdlOiBudWxsLAoJCWNsb3NlOiBudWxsLAoJCWZvY3VzOiBudWxsLAoJCW9wZW46IG51bGwsCgkJcmVzcG9uc2U6IG51bGwsCgkJc2VhcmNoOiBudWxsLAoJCXNlbGVjdDogbnVsbAoJfSwKCglwZW5kaW5nOiAwLAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCS8vIFNvbWUgYnJvd3NlcnMgb25seSByZXBlYXQga2V5ZG93biBldmVudHMsIG5vdCBrZXlwcmVzcyBldmVudHMsCgkJLy8gc28gd2UgdXNlIHRoZSBzdXBwcmVzc0tleVByZXNzIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHdlJ3ZlIGFscmVhZHkKCQkvLyBoYW5kbGVkIHRoZSBrZXlkb3duIGV2ZW50LiAjNzI2OQoJCS8vIFVuZm9ydHVuYXRlbHkgdGhlIGNvZGUgZm9yICYgaW4ga2V5cHJlc3MgaXMgdGhlIHNhbWUgYXMgdGhlIHVwIGFycm93LAoJCS8vIHNvIHdlIHVzZSB0aGUgc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCBmbGFnIHRvIGF2b2lkIGhhbmRsaW5nIGtleXByZXNzCgkJLy8gZXZlbnRzIHdoZW4gd2Uga25vdyB0aGUga2V5ZG93biBldmVudCB3YXMgdXNlZCB0byBtb2RpZnkgdGhlCgkJLy8gc2VhcmNoIHRlcm0uICM3Nzk5CgkJdmFyIHN1cHByZXNzS2V5UHJlc3MsIHN1cHByZXNzS2V5UHJlc3NSZXBlYXQsIHN1cHByZXNzSW5wdXQ7CgoJCXRoaXMuaXNNdWx0aUxpbmUgPSB0aGlzLl9pc011bHRpTGluZSgpOwoJCXRoaXMudmFsdWVNZXRob2QgPSB0aGlzLmVsZW1lbnRbIHRoaXMuZWxlbWVudC5pcyggImlucHV0LHRleHRhcmVhIiApID8gInZhbCIgOiAidGV4dCIgXTsKCQl0aGlzLmlzTmV3TWVudSA9IHRydWU7CgoJCXRoaXMuZWxlbWVudAoJCQkuYWRkQ2xhc3MoICJ1aS1hdXRvY29tcGxldGUtaW5wdXQiICkKCQkJLmF0dHIoICJhdXRvY29tcGxldGUiLCAib2ZmIiApOwoKCQl0aGlzLl9vbiggdGhpcy5lbGVtZW50LCB7CgkJCWtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggdGhpcy5lbGVtZW50LnByb3AoICJyZWFkT25seSIgKSApIHsKCQkJCQlzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTsKCQkJCQlzdXBwcmVzc0lucHV0ID0gdHJ1ZTsKCQkJCQlzdXBwcmVzc0tleVByZXNzUmVwZWF0ID0gdHJ1ZTsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJc3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlOwoJCQkJc3VwcHJlc3NJbnB1dCA9IGZhbHNlOwoJCQkJc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCA9IGZhbHNlOwoJCQkJdmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGU7CgkJCQlzd2l0Y2goIGV2ZW50LmtleUNvZGUgKSB7CgkJCQljYXNlIGtleUNvZGUuUEFHRV9VUDoKCQkJCQlzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTsKCQkJCQl0aGlzLl9tb3ZlKCAicHJldmlvdXNQYWdlIiwgZXZlbnQgKTsKCQkJCQlicmVhazsKCQkJCWNhc2Uga2V5Q29kZS5QQUdFX0RPV046CgkJCQkJc3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7CgkJCQkJdGhpcy5fbW92ZSggIm5leHRQYWdlIiwgZXZlbnQgKTsKCQkJCQlicmVhazsKCQkJCWNhc2Uga2V5Q29kZS5VUDoKCQkJCQlzdXBwcmVzc0tleVByZXNzID0gdHJ1ZTsKCQkJCQl0aGlzLl9rZXlFdmVudCggInByZXZpb3VzIiwgZXZlbnQgKTsKCQkJCQlicmVhazsKCQkJCWNhc2Uga2V5Q29kZS5ET1dOOgoJCQkJCXN1cHByZXNzS2V5UHJlc3MgPSB0cnVlOwoJCQkJCXRoaXMuX2tleUV2ZW50KCAibmV4dCIsIGV2ZW50ICk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGtleUNvZGUuRU5URVI6CgkJCQljYXNlIGtleUNvZGUuTlVNUEFEX0VOVEVSOgoJCQkJCS8vIHdoZW4gbWVudSBpcyBvcGVuIGFuZCBoYXMgZm9jdXMKCQkJCQlpZiAoIHRoaXMubWVudS5hY3RpdmUgKSB7CgkJCQkJCS8vICM2MDU1IC0gT3BlcmEgc3RpbGwgYWxsb3dzIHRoZSBrZXlwcmVzcyB0byBvY2N1cgoJCQkJCQkvLyB3aGljaCBjYXVzZXMgZm9ybXMgdG8gc3VibWl0CgkJCQkJCXN1cHByZXNzS2V5UHJlc3MgPSB0cnVlOwoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQl0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCWNhc2Uga2V5Q29kZS5UQUI6CgkJCQkJaWYgKCB0aGlzLm1lbnUuYWN0aXZlICkgewoJCQkJCQl0aGlzLm1lbnUuc2VsZWN0KCBldmVudCApOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCWNhc2Uga2V5Q29kZS5FU0NBUEU6CgkJCQkJaWYgKCB0aGlzLm1lbnUuZWxlbWVudC5pcyggIjp2aXNpYmxlIiApICkgewoJCQkJCQl0aGlzLl92YWx1ZSggdGhpcy50ZXJtICk7CgkJCQkJCXRoaXMuY2xvc2UoIGV2ZW50ICk7CgkJCQkJCS8vIERpZmZlcmVudCBicm93c2VycyBoYXZlIGRpZmZlcmVudCBkZWZhdWx0IGJlaGF2aW9yIGZvciBlc2NhcGUKCQkJCQkJLy8gU2luZ2xlIHByZXNzIGNhbiBtZWFuIHVuZG8gb3IgY2xlYXIKCQkJCQkJLy8gRG91YmxlIHByZXNzIGluIElFIG1lYW5zIGNsZWFyIHRoZSB3aG9sZSBmb3JtCgkJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJfQoJCQkJCWJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQlzdXBwcmVzc0tleVByZXNzUmVwZWF0ID0gdHJ1ZTsKCQkJCQkvLyBzZWFyY2ggdGltZW91dCBzaG91bGQgYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgaW5wdXQgdmFsdWUgaXMgY2hhbmdlZAoJCQkJCXRoaXMuX3NlYXJjaFRpbWVvdXQoIGV2ZW50ICk7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0sCgkJCWtleXByZXNzOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlpZiAoIHN1cHByZXNzS2V5UHJlc3MgKSB7CgkJCQkJc3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlOwoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQkJaWYgKCBzdXBwcmVzc0tleVByZXNzUmVwZWF0ICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQkvLyByZXBsaWNhdGUgc29tZSBrZXkgaGFuZGxlcnMgdG8gYWxsb3cgdGhlbSB0byByZXBlYXQgaW4gRmlyZWZveCBhbmQgT3BlcmEKCQkJCXZhciBrZXlDb2RlID0gJC51aS5rZXlDb2RlOwoJCQkJc3dpdGNoKCBldmVudC5rZXlDb2RlICkgewoJCQkJY2FzZSBrZXlDb2RlLlBBR0VfVVA6CgkJCQkJdGhpcy5fbW92ZSggInByZXZpb3VzUGFnZSIsIGV2ZW50ICk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGtleUNvZGUuUEFHRV9ET1dOOgoJCQkJCXRoaXMuX21vdmUoICJuZXh0UGFnZSIsIGV2ZW50ICk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGtleUNvZGUuVVA6CgkJCQkJdGhpcy5fa2V5RXZlbnQoICJwcmV2aW91cyIsIGV2ZW50ICk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGtleUNvZGUuRE9XTjoKCQkJCQl0aGlzLl9rZXlFdmVudCggIm5leHQiLCBldmVudCApOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9LAoJCQlpbnB1dDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCBzdXBwcmVzc0lucHV0ICkgewoJCQkJCXN1cHByZXNzSW5wdXQgPSBmYWxzZTsKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCXJldHVybjsKCQkJCX0KCQkJCXRoaXMuX3NlYXJjaFRpbWVvdXQoIGV2ZW50ICk7CgkJCX0sCgkJCWZvY3VzOiBmdW5jdGlvbigpIHsKCQkJCXRoaXMuc2VsZWN0ZWRJdGVtID0gbnVsbDsKCQkJCXRoaXMucHJldmlvdXMgPSB0aGlzLl92YWx1ZSgpOwoJCQl9LAoJCQlibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlpZiAoIHRoaXMuY2FuY2VsQmx1ciApIHsKCQkJCQlkZWxldGUgdGhpcy5jYW5jZWxCbHVyOwoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQljbGVhclRpbWVvdXQoIHRoaXMuc2VhcmNoaW5nICk7CgkJCQl0aGlzLmNsb3NlKCBldmVudCApOwoJCQkJdGhpcy5fY2hhbmdlKCBldmVudCApOwoJCQl9CgkJfSk7CgoJCXRoaXMuX2luaXRTb3VyY2UoKTsKCQl0aGlzLm1lbnUgPSAkKCAiPHVsPiIgKQoJCQkuYWRkQ2xhc3MoICJ1aS1hdXRvY29tcGxldGUiICkKCQkJLmFwcGVuZFRvKCB0aGlzLmRvY3VtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5hcHBlbmRUbyB8fCAiYm9keSIgKVsgMCBdICkKCQkJLm1lbnUoewoJCQkJLy8gY3VzdG9tIGtleSBoYW5kbGluZyBmb3Igbm93CgkJCQlpbnB1dDogJCgpLAoJCQkJLy8gZGlzYWJsZSBBUklBIHN1cHBvcnQsIHRoZSBsaXZlIHJlZ2lvbiB0YWtlcyBjYXJlIG9mIHRoYXQKCQkJCXJvbGU6IG51bGwKCQkJfSkKCQkJLnpJbmRleCggdGhpcy5lbGVtZW50LnpJbmRleCgpICsgMSApCgkJCS5oaWRlKCkKCQkJLmRhdGEoICJtZW51IiApOwoKCQl0aGlzLl9vbiggdGhpcy5tZW51LmVsZW1lbnQsIHsKCQkJbW91c2Vkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkvLyBwcmV2ZW50IG1vdmluZyBmb2N1cyBvdXQgb2YgdGhlIHRleHQgZmllbGQKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCQkJLy8gSUUgZG9lc24ndCBwcmV2ZW50IG1vdmluZyBmb2N1cyBldmVuIHdpdGggZXZlbnQucHJldmVudERlZmF1bHQoKQoJCQkJLy8gc28gd2Ugc2V0IGEgZmxhZyB0byBrbm93IHdoZW4gd2Ugc2hvdWxkIGlnbm9yZSB0aGUgYmx1ciBldmVudAoJCQkJdGhpcy5jYW5jZWxCbHVyID0gdHJ1ZTsKCQkJCXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQkJCWRlbGV0ZSB0aGlzLmNhbmNlbEJsdXI7CgkJCQl9KTsKCgkJCQkvLyBjbGlja2luZyBvbiB0aGUgc2Nyb2xsYmFyIGNhdXNlcyBmb2N1cyB0byBzaGlmdCB0byB0aGUgYm9keQoJCQkJLy8gYnV0IHdlIGNhbid0IGRldGVjdCBhIG1vdXNldXAgb3IgYSBjbGljayBpbW1lZGlhdGVseSBhZnRlcndhcmQKCQkJCS8vIHNvIHdlIGhhdmUgdG8gdHJhY2sgdGhlIG5leHQgbW91c2Vkb3duIGFuZCBjbG9zZSB0aGUgbWVudSBpZgoJCQkJLy8gdGhlIHVzZXIgY2xpY2tzIHNvbWV3aGVyZSBvdXRzaWRlIG9mIHRoZSBhdXRvY29tcGxldGUKCQkJCXZhciBtZW51RWxlbWVudCA9IHRoaXMubWVudS5lbGVtZW50WyAwIF07CgkJCQlpZiAoICEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCAiLnVpLW1lbnUtaXRlbSIgKS5sZW5ndGggKSB7CgkJCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQkJCXZhciB0aGF0ID0gdGhpczsKCQkJCQkJdGhpcy5kb2N1bWVudC5vbmUoICJtb3VzZWRvd24iLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJCQlpZiAoIGV2ZW50LnRhcmdldCAhPT0gdGhhdC5lbGVtZW50WyAwIF0gJiYKCQkJCQkJCQkJZXZlbnQudGFyZ2V0ICE9PSBtZW51RWxlbWVudCAmJgoJCQkJCQkJCQkhJC5jb250YWlucyggbWVudUVsZW1lbnQsIGV2ZW50LnRhcmdldCApICkgewoJCQkJCQkJCXRoYXQuY2xvc2UoKTsKCQkJCQkJCX0KCQkJCQkJfSk7CgkJCQkJfSk7CgkJCQl9CgkJCX0sCgkJCW1lbnVmb2N1czogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCS8vICM3MDI0IC0gUHJldmVudCBhY2NpZGVudGFsIGFjdGl2YXRpb24gb2YgbWVudSBpdGVtcyBpbiBGaXJlZm94CgkJCQlpZiAoIHRoaXMuaXNOZXdNZW51ICkgewoJCQkJCXRoaXMuaXNOZXdNZW51ID0gZmFsc2U7CgkJCQkJaWYgKCBldmVudC5vcmlnaW5hbEV2ZW50ICYmIC9ebW91c2UvLnRlc3QoIGV2ZW50Lm9yaWdpbmFsRXZlbnQudHlwZSApICkgewoJCQkJCQl0aGlzLm1lbnUuYmx1cigpOwoKCQkJCQkJdGhpcy5kb2N1bWVudC5vbmUoICJtb3VzZW1vdmUiLCBmdW5jdGlvbigpIHsKCQkJCQkJCSQoIGV2ZW50LnRhcmdldCApLnRyaWdnZXIoIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKTsKCQkJCQkJfSk7CgoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJfQoKCQkJCS8vIGJhY2sgY29tcGF0IGZvciBfcmVuZGVySXRlbSB1c2luZyBpdGVtLmF1dG9jb21wbGV0ZSwgdmlhICM3ODEwCgkJCQkvLyBUT0RPIHJlbW92ZSB0aGUgZmFsbGJhY2ssIHNlZSAjODE1NgoJCQkJdmFyIGl0ZW0gPSB1aS5pdGVtLmRhdGEoICJ1aS1hdXRvY29tcGxldGUtaXRlbSIgKSB8fCB1aS5pdGVtLmRhdGEoICJpdGVtLmF1dG9jb21wbGV0ZSIgKTsKCQkJCWlmICggZmFsc2UgIT09IHRoaXMuX3RyaWdnZXIoICJmb2N1cyIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApICkgewoJCQkJCS8vIHVzZSB2YWx1ZSB0byBtYXRjaCB3aGF0IHdpbGwgZW5kIHVwIGluIHRoZSBpbnB1dCwgaWYgaXQgd2FzIGEga2V5IGV2ZW50CgkJCQkJaWYgKCBldmVudC5vcmlnaW5hbEV2ZW50ICYmIC9ea2V5Ly50ZXN0KCBldmVudC5vcmlnaW5hbEV2ZW50LnR5cGUgKSApIHsKCQkJCQkJdGhpcy5fdmFsdWUoIGl0ZW0udmFsdWUgKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCS8vIE5vcm1hbGx5IHRoZSBpbnB1dCBpcyBwb3B1bGF0ZWQgd2l0aCB0aGUgaXRlbSdzIHZhbHVlIGFzIHRoZQoJCQkJCS8vIG1lbnUgaXMgbmF2aWdhdGVkLCBjYXVzaW5nIHNjcmVlbiByZWFkZXJzIHRvIG5vdGljZSBhIGNoYW5nZSBhbmQKCQkJCQkvLyBhbm5vdW5jZSB0aGUgaXRlbS4gU2luY2UgdGhlIGZvY3VzIGV2ZW50IHdhcyBjYW5jZWxlZCwgdGhpcyBkb2Vzbid0CgkJCQkJLy8gaGFwcGVuLCBzbyB3ZSB1cGRhdGUgdGhlIGxpdmUgcmVnaW9uIHNvIHRoYXQgc2NyZWVuIHJlYWRlcnMgY2FuCgkJCQkJLy8gc3RpbGwgbm90aWNlIHRoZSBjaGFuZ2UgYW5kIGFubm91bmNlIGl0LgoJCQkJCXRoaXMubGl2ZVJlZ2lvbi50ZXh0KCBpdGVtLnZhbHVlICk7CgkJCQl9CgkJCX0sCgkJCW1lbnVzZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQkvLyBiYWNrIGNvbXBhdCBmb3IgX3JlbmRlckl0ZW0gdXNpbmcgaXRlbS5hdXRvY29tcGxldGUsIHZpYSAjNzgxMAoJCQkJLy8gVE9ETyByZW1vdmUgdGhlIGZhbGxiYWNrLCBzZWUgIzgxNTYKCQkJCXZhciBpdGVtID0gdWkuaXRlbS5kYXRhKCAidWktYXV0b2NvbXBsZXRlLWl0ZW0iICkgfHwgdWkuaXRlbS5kYXRhKCAiaXRlbS5hdXRvY29tcGxldGUiICksCgkJCQkJcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzOwoKCQkJCS8vIG9ubHkgdHJpZ2dlciB3aGVuIGZvY3VzIHdhcyBsb3N0IChjbGljayBvbiBtZW51KQoJCQkJaWYgKCB0aGlzLmVsZW1lbnRbMF0gIT09IHRoaXMuZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCApIHsKCQkJCQl0aGlzLmVsZW1lbnQuZm9jdXMoKTsKCQkJCQl0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7CgkJCQkJLy8gIzYxMDkgLSBJRSB0cmlnZ2VycyB0d28gZm9jdXMgZXZlbnRzIGFuZCB0aGUgc2Vjb25kCgkJCQkJLy8gaXMgYXN5bmNocm9ub3VzLCBzbyB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBwcmV2aW91cwoJCQkJCS8vIHRlcm0gc3luY2hyb25vdXNseSBhbmQgYXN5bmNocm9ub3VzbHkgOi0oCgkJCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQkJCXRoaXMucHJldmlvdXMgPSBwcmV2aW91czsKCQkJCQkJdGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtOwoJCQkJCX0pOwoJCQkJfQoKCQkJCWlmICggZmFsc2UgIT09IHRoaXMuX3RyaWdnZXIoICJzZWxlY3QiLCBldmVudCwgeyBpdGVtOiBpdGVtIH0gKSApIHsKCQkJCQl0aGlzLl92YWx1ZSggaXRlbS52YWx1ZSApOwoJCQkJfQoJCQkJLy8gcmVzZXQgdGhlIHRlcm0gYWZ0ZXIgdGhlIHNlbGVjdCBldmVudAoJCQkJLy8gdGhpcyBhbGxvd3MgY3VzdG9tIHNlbGVjdCBoYW5kbGluZyB0byB3b3JrIHByb3Blcmx5CgkJCQl0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpOwoKCQkJCXRoaXMuY2xvc2UoIGV2ZW50ICk7CgkJCQl0aGlzLnNlbGVjdGVkSXRlbSA9IGl0ZW07CgkJCX0KCQl9KTsKCgkJdGhpcy5saXZlUmVnaW9uID0gJCggIjxzcGFuPiIsIHsKCQkJCXJvbGU6ICJzdGF0dXMiLAoJCQkJImFyaWEtbGl2ZSI6ICJwb2xpdGUiCgkJCX0pCgkJCS5hZGRDbGFzcyggInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZSIgKQoJCQkuaW5zZXJ0QWZ0ZXIoIHRoaXMuZWxlbWVudCApOwoKCQlpZiAoICQuZm4uYmdpZnJhbWUgKSB7CgkJCXRoaXMubWVudS5lbGVtZW50LmJnaWZyYW1lKCk7CgkJfQoKCQkvLyB0dXJuaW5nIG9mZiBhdXRvY29tcGxldGUgcHJldmVudHMgdGhlIGJyb3dzZXIgZnJvbSByZW1lbWJlcmluZyB0aGUKCQkvLyB2YWx1ZSB3aGVuIG5hdmlnYXRpbmcgdGhyb3VnaCBoaXN0b3J5LCBzbyB3ZSByZS1lbmFibGUgYXV0b2NvbXBsZXRlCgkJLy8gaWYgdGhlIHBhZ2UgaXMgdW5sb2FkZWQgYmVmb3JlIHRoZSB3aWRnZXQgaXMgZGVzdHJveWVkLiAjNzc5MAoJCXRoaXMuX29uKCB0aGlzLndpbmRvdywgewoJCQliZWZvcmV1bmxvYWQ6IGZ1bmN0aW9uKCkgewoJCQkJdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoICJhdXRvY29tcGxldGUiICk7CgkJCX0KCQl9KTsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCWNsZWFyVGltZW91dCggdGhpcy5zZWFyY2hpbmcgKTsKCQl0aGlzLmVsZW1lbnQKCQkJLnJlbW92ZUNsYXNzKCAidWktYXV0b2NvbXBsZXRlLWlucHV0IiApCgkJCS5yZW1vdmVBdHRyKCAiYXV0b2NvbXBsZXRlIiApOwoJCXRoaXMubWVudS5lbGVtZW50LnJlbW92ZSgpOwoJCXRoaXMubGl2ZVJlZ2lvbi5yZW1vdmUoKTsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCQlpZiAoIGtleSA9PT0gInNvdXJjZSIgKSB7CgkJCXRoaXMuX2luaXRTb3VyY2UoKTsKCQl9CgkJaWYgKCBrZXkgPT09ICJhcHBlbmRUbyIgKSB7CgkJCXRoaXMubWVudS5lbGVtZW50LmFwcGVuZFRvKCB0aGlzLmRvY3VtZW50LmZpbmQoIHZhbHVlIHx8ICJib2R5IiApWzBdICk7CgkJfQoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICYmIHZhbHVlICYmIHRoaXMueGhyICkgewoJCQl0aGlzLnhoci5hYm9ydCgpOwoJCX0KCX0sCgoJX2lzTXVsdGlMaW5lOiBmdW5jdGlvbigpIHsKCQkvLyBUZXh0YXJlYXMgYXJlIGFsd2F5cyBtdWx0aS1saW5lCgkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoICJ0ZXh0YXJlYSIgKSApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCS8vIElucHV0cyBhcmUgYWx3YXlzIHNpbmdsZS1saW5lLCBldmVuIGlmIGluc2lkZSBhIGNvbnRlbnRFZGl0YWJsZSBlbGVtZW50CgkJLy8gSUUgYWxzbyB0cmVhdHMgaW5wdXRzIGFzIGNvbnRlbnRFZGl0YWJsZQoJCWlmICggdGhpcy5lbGVtZW50LmlzKCAiaW5wdXQiICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJLy8gQWxsIG90aGVyIGVsZW1lbnQgdHlwZXMgYXJlIGRldGVybWluZWQgYnkgd2hldGhlciBvciBub3QgdGhleSdyZSBjb250ZW50RWRpdGFibGUKCQlyZXR1cm4gdGhpcy5lbGVtZW50LnByb3AoICJpc0NvbnRlbnRFZGl0YWJsZSIgKTsKCX0sCgoJX2luaXRTb3VyY2U6IGZ1bmN0aW9uKCkgewoJCXZhciBhcnJheSwgdXJsLAoJCQl0aGF0ID0gdGhpczsKCQlpZiAoICQuaXNBcnJheSh0aGlzLm9wdGlvbnMuc291cmNlKSApIHsKCQkJYXJyYXkgPSB0aGlzLm9wdGlvbnMuc291cmNlOwoJCQl0aGlzLnNvdXJjZSA9IGZ1bmN0aW9uKCByZXF1ZXN0LCByZXNwb25zZSApIHsKCQkJCXJlc3BvbnNlKCAkLnVpLmF1dG9jb21wbGV0ZS5maWx0ZXIoIGFycmF5LCByZXF1ZXN0LnRlcm0gKSApOwoJCQl9OwoJCX0gZWxzZSBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuc291cmNlID09PSAic3RyaW5nIiApIHsKCQkJdXJsID0gdGhpcy5vcHRpb25zLnNvdXJjZTsKCQkJdGhpcy5zb3VyY2UgPSBmdW5jdGlvbiggcmVxdWVzdCwgcmVzcG9uc2UgKSB7CgkJCQlpZiAoIHRoYXQueGhyICkgewoJCQkJCXRoYXQueGhyLmFib3J0KCk7CgkJCQl9CgkJCQl0aGF0LnhociA9ICQuYWpheCh7CgkJCQkJdXJsOiB1cmwsCgkJCQkJZGF0YTogcmVxdWVzdCwKCQkJCQlkYXRhVHlwZTogImpzb24iLAoJCQkJCXN1Y2Nlc3M6IGZ1bmN0aW9uKCBkYXRhICkgewoJCQkJCQlyZXNwb25zZSggZGF0YSApOwoJCQkJCX0sCgkJCQkJZXJyb3I6IGZ1bmN0aW9uKCkgewoJCQkJCQlyZXNwb25zZSggW10gKTsKCQkJCQl9CgkJCQl9KTsKCQkJfTsKCQl9IGVsc2UgewoJCQl0aGlzLnNvdXJjZSA9IHRoaXMub3B0aW9ucy5zb3VyY2U7CgkJfQoJfSwKCglfc2VhcmNoVGltZW91dDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWNsZWFyVGltZW91dCggdGhpcy5zZWFyY2hpbmcgKTsKCQl0aGlzLnNlYXJjaGluZyA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQkvLyBvbmx5IHNlYXJjaCBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQKCQkJaWYgKCB0aGlzLnRlcm0gIT09IHRoaXMuX3ZhbHVlKCkgKSB7CgkJCQl0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7CgkJCQl0aGlzLnNlYXJjaCggbnVsbCwgZXZlbnQgKTsKCQkJfQoJCX0sIHRoaXMub3B0aW9ucy5kZWxheSApOwoJfSwKCglzZWFyY2g6IGZ1bmN0aW9uKCB2YWx1ZSwgZXZlbnQgKSB7CgkJdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiB0aGlzLl92YWx1ZSgpOwoKCQkvLyBhbHdheXMgc2F2ZSB0aGUgYWN0dWFsIHZhbHVlLCBub3QgdGhlIG9uZSBwYXNzZWQgYXMgYW4gYXJndW1lbnQKCQl0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpOwoKCQlpZiAoIHZhbHVlLmxlbmd0aCA8IHRoaXMub3B0aW9ucy5taW5MZW5ndGggKSB7CgkJCXJldHVybiB0aGlzLmNsb3NlKCBldmVudCApOwoJCX0KCgkJaWYgKCB0aGlzLl90cmlnZ2VyKCAic2VhcmNoIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7CgkJCXJldHVybjsKCQl9CgoJCXJldHVybiB0aGlzLl9zZWFyY2goIHZhbHVlICk7Cgl9LAoKCV9zZWFyY2g6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl0aGlzLnBlbmRpbmcrKzsKCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS1hdXRvY29tcGxldGUtbG9hZGluZyIgKTsKCQl0aGlzLmNhbmNlbFNlYXJjaCA9IGZhbHNlOwoKCQl0aGlzLnNvdXJjZSggeyB0ZXJtOiB2YWx1ZSB9LCB0aGlzLl9yZXNwb25zZSgpICk7Cgl9LAoKCV9yZXNwb25zZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlpbmRleCA9ICsrcmVxdWVzdEluZGV4OwoKCQlyZXR1cm4gZnVuY3Rpb24oIGNvbnRlbnQgKSB7CgkJCWlmICggaW5kZXggPT09IHJlcXVlc3RJbmRleCApIHsKCQkJCXRoYXQuX19yZXNwb25zZSggY29udGVudCApOwoJCQl9CgoJCQl0aGF0LnBlbmRpbmctLTsKCQkJaWYgKCAhdGhhdC5wZW5kaW5nICkgewoJCQkJdGhhdC5lbGVtZW50LnJlbW92ZUNsYXNzKCAidWktYXV0b2NvbXBsZXRlLWxvYWRpbmciICk7CgkJCX0KCQl9OwoJfSwKCglfX3Jlc3BvbnNlOiBmdW5jdGlvbiggY29udGVudCApIHsKCQlpZiAoIGNvbnRlbnQgKSB7CgkJCWNvbnRlbnQgPSB0aGlzLl9ub3JtYWxpemUoIGNvbnRlbnQgKTsKCQl9CgkJdGhpcy5fdHJpZ2dlciggInJlc3BvbnNlIiwgbnVsbCwgeyBjb250ZW50OiBjb250ZW50IH0gKTsKCQlpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgY29udGVudCAmJiBjb250ZW50Lmxlbmd0aCAmJiAhdGhpcy5jYW5jZWxTZWFyY2ggKSB7CgkJCXRoaXMuX3N1Z2dlc3QoIGNvbnRlbnQgKTsKCQkJdGhpcy5fdHJpZ2dlciggIm9wZW4iICk7CgkJfSBlbHNlIHsKCQkJLy8gdXNlIC5fY2xvc2UoKSBpbnN0ZWFkIG9mIC5jbG9zZSgpIHNvIHdlIGRvbid0IGNhbmNlbCBmdXR1cmUgc2VhcmNoZXMKCQkJdGhpcy5fY2xvc2UoKTsKCQl9Cgl9LAoKCWNsb3NlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdGhpcy5jYW5jZWxTZWFyY2ggPSB0cnVlOwoJCXRoaXMuX2Nsb3NlKCBldmVudCApOwoJfSwKCglfY2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoIHRoaXMubWVudS5lbGVtZW50LmlzKCAiOnZpc2libGUiICkgKSB7CgkJCXRoaXMubWVudS5lbGVtZW50LmhpZGUoKTsKCQkJdGhpcy5tZW51LmJsdXIoKTsKCQkJdGhpcy5pc05ld01lbnUgPSB0cnVlOwoJCQl0aGlzLl90cmlnZ2VyKCAiY2xvc2UiLCBldmVudCApOwoJCX0KCX0sCgoJX2NoYW5nZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWlmICggdGhpcy5wcmV2aW91cyAhPT0gdGhpcy5fdmFsdWUoKSApIHsKCQkJdGhpcy5fdHJpZ2dlciggImNoYW5nZSIsIGV2ZW50LCB7IGl0ZW06IHRoaXMuc2VsZWN0ZWRJdGVtIH0gKTsKCQl9Cgl9LAoKCV9ub3JtYWxpemU6IGZ1bmN0aW9uKCBpdGVtcyApIHsKCQkvLyBhc3N1bWUgYWxsIGl0ZW1zIGhhdmUgdGhlIHJpZ2h0IGZvcm1hdCB3aGVuIHRoZSBmaXJzdCBpdGVtIGlzIGNvbXBsZXRlCgkJaWYgKCBpdGVtcy5sZW5ndGggJiYgaXRlbXNbMF0ubGFiZWwgJiYgaXRlbXNbMF0udmFsdWUgKSB7CgkJCXJldHVybiBpdGVtczsKCQl9CgkJcmV0dXJuICQubWFwKCBpdGVtcywgZnVuY3Rpb24oIGl0ZW0gKSB7CgkJCWlmICggdHlwZW9mIGl0ZW0gPT09ICJzdHJpbmciICkgewoJCQkJcmV0dXJuIHsKCQkJCQlsYWJlbDogaXRlbSwKCQkJCQl2YWx1ZTogaXRlbQoJCQkJfTsKCQkJfQoJCQlyZXR1cm4gJC5leHRlbmQoewoJCQkJbGFiZWw6IGl0ZW0ubGFiZWwgfHwgaXRlbS52YWx1ZSwKCQkJCXZhbHVlOiBpdGVtLnZhbHVlIHx8IGl0ZW0ubGFiZWwKCQkJfSwgaXRlbSApOwoJCX0pOwoJfSwKCglfc3VnZ2VzdDogZnVuY3Rpb24oIGl0ZW1zICkgewoJCXZhciB1bCA9IHRoaXMubWVudS5lbGVtZW50CgkJCS5lbXB0eSgpCgkJCS56SW5kZXgoIHRoaXMuZWxlbWVudC56SW5kZXgoKSArIDEgKTsKCQl0aGlzLl9yZW5kZXJNZW51KCB1bCwgaXRlbXMgKTsKCQl0aGlzLm1lbnUucmVmcmVzaCgpOwoKCQkvLyBzaXplIGFuZCBwb3NpdGlvbiBtZW51CgkJdWwuc2hvdygpOwoJCXRoaXMuX3Jlc2l6ZU1lbnUoKTsKCQl1bC5wb3NpdGlvbiggJC5leHRlbmQoewoJCQlvZjogdGhpcy5lbGVtZW50CgkJfSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uICkpOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgKSB7CgkJCXRoaXMubWVudS5uZXh0KCk7CgkJfQoJfSwKCglfcmVzaXplTWVudTogZnVuY3Rpb24oKSB7CgkJdmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQ7CgkJdWwub3V0ZXJXaWR0aCggTWF0aC5tYXgoCgkJCS8vIEZpcmVmb3ggd3JhcHMgbG9uZyB0ZXh0IChwb3NzaWJseSBhIHJvdW5kaW5nIGJ1ZykKCQkJLy8gc28gd2UgYWRkIDFweCB0byBhdm9pZCB0aGUgd3JhcHBpbmcgKCM3NTEzKQoJCQl1bC53aWR0aCggIiIgKS5vdXRlcldpZHRoKCkgKyAxLAoJCQl0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpCgkJKSApOwoJfSwKCglfcmVuZGVyTWVudTogZnVuY3Rpb24oIHVsLCBpdGVtcyApIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgkJJC5lYWNoKCBpdGVtcywgZnVuY3Rpb24oIGluZGV4LCBpdGVtICkgewoJCQl0aGF0Ll9yZW5kZXJJdGVtRGF0YSggdWwsIGl0ZW0gKTsKCQl9KTsKCX0sCgoJX3JlbmRlckl0ZW1EYXRhOiBmdW5jdGlvbiggdWwsIGl0ZW0gKSB7CgkJcmV0dXJuIHRoaXMuX3JlbmRlckl0ZW0oIHVsLCBpdGVtICkuZGF0YSggInVpLWF1dG9jb21wbGV0ZS1pdGVtIiwgaXRlbSApOwoJfSwKCglfcmVuZGVySXRlbTogZnVuY3Rpb24oIHVsLCBpdGVtICkgewoJCXJldHVybiAkKCAiPGxpPiIgKQoJCQkuYXBwZW5kKCAkKCAiPGE+IiApLnRleHQoIGl0ZW0ubGFiZWwgKSApCgkJCS5hcHBlbmRUbyggdWwgKTsKCX0sCgoJX21vdmU6IGZ1bmN0aW9uKCBkaXJlY3Rpb24sIGV2ZW50ICkgewoJCWlmICggIXRoaXMubWVudS5lbGVtZW50LmlzKCAiOnZpc2libGUiICkgKSB7CgkJCXRoaXMuc2VhcmNoKCBudWxsLCBldmVudCApOwoJCQlyZXR1cm47CgkJfQoJCWlmICggdGhpcy5tZW51LmlzRmlyc3RJdGVtKCkgJiYgL15wcmV2aW91cy8udGVzdCggZGlyZWN0aW9uICkgfHwKCQkJCXRoaXMubWVudS5pc0xhc3RJdGVtKCkgJiYgL15uZXh0Ly50ZXN0KCBkaXJlY3Rpb24gKSApIHsKCQkJdGhpcy5fdmFsdWUoIHRoaXMudGVybSApOwoJCQl0aGlzLm1lbnUuYmx1cigpOwoJCQlyZXR1cm47CgkJfQoJCXRoaXMubWVudVsgZGlyZWN0aW9uIF0oIGV2ZW50ICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMubWVudS5lbGVtZW50OwoJfSwKCglfdmFsdWU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnZhbHVlTWV0aG9kLmFwcGx5KCB0aGlzLmVsZW1lbnQsIGFyZ3VtZW50cyApOwoJfSwKCglfa2V5RXZlbnQ6IGZ1bmN0aW9uKCBrZXlFdmVudCwgZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5pc011bHRpTGluZSB8fCB0aGlzLm1lbnUuZWxlbWVudC5pcyggIjp2aXNpYmxlIiApICkgewoJCQl0aGlzLl9tb3ZlKCBrZXlFdmVudCwgZXZlbnQgKTsKCgkJCS8vIHByZXZlbnRzIG1vdmluZyBjdXJzb3IgdG8gYmVnaW5uaW5nL2VuZCBvZiB0aGUgdGV4dCBmaWVsZCBpbiBzb21lIGJyb3dzZXJzCgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfQoJfQp9KTsKCiQuZXh0ZW5kKCAkLnVpLmF1dG9jb21wbGV0ZSwgewoJZXNjYXBlUmVnZXg6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQlyZXR1cm4gdmFsdWUucmVwbGFjZSgvW1wtXFtcXXt9KCkqKz8uLFxcXF4kfCNcc10vZywgIlxcJCYiKTsKCX0sCglmaWx0ZXI6IGZ1bmN0aW9uKGFycmF5LCB0ZXJtKSB7CgkJdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCAkLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleCh0ZXJtKSwgImkiICk7CgkJcmV0dXJuICQuZ3JlcCggYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7CgkJCXJldHVybiBtYXRjaGVyLnRlc3QoIHZhbHVlLmxhYmVsIHx8IHZhbHVlLnZhbHVlIHx8IHZhbHVlICk7CgkJfSk7Cgl9Cn0pOwoKCi8vIGxpdmUgcmVnaW9uIGV4dGVuc2lvbiwgYWRkaW5nIGEgYG1lc3NhZ2VzYCBvcHRpb24KLy8gTk9URTogVGhpcyBpcyBhbiBleHBlcmltZW50YWwgQVBJLiBXZSBhcmUgc3RpbGwgaW52ZXN0aWdhdGluZwovLyBhIGZ1bGwgc29sdXRpb24gZm9yIHN0cmluZyBtYW5pcHVsYXRpb24gYW5kIGludGVybmF0aW9uYWxpemF0aW9uLgokLndpZGdldCggInVpLmF1dG9jb21wbGV0ZSIsICQudWkuYXV0b2NvbXBsZXRlLCB7CglvcHRpb25zOiB7CgkJbWVzc2FnZXM6IHsKCQkJbm9SZXN1bHRzOiAiTm8gc2VhcmNoIHJlc3VsdHMuIiwKCQkJcmVzdWx0czogZnVuY3Rpb24oIGFtb3VudCApIHsKCQkJCXJldHVybiBhbW91bnQgKyAoIGFtb3VudCA+IDEgPyAiIHJlc3VsdHMgYXJlIiA6ICIgcmVzdWx0IGlzIiApICsKCQkJCQkiIGF2YWlsYWJsZSwgdXNlIHVwIGFuZCBkb3duIGFycm93IGtleXMgdG8gbmF2aWdhdGUuIjsKCQkJfQoJCX0KCX0sCgoJX19yZXNwb25zZTogZnVuY3Rpb24oIGNvbnRlbnQgKSB7CgkJdmFyIG1lc3NhZ2U7CgkJdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7CgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5jYW5jZWxTZWFyY2ggKSB7CgkJCXJldHVybjsKCQl9CgkJaWYgKCBjb250ZW50ICYmIGNvbnRlbnQubGVuZ3RoICkgewoJCQltZXNzYWdlID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLnJlc3VsdHMoIGNvbnRlbnQubGVuZ3RoICk7CgkJfSBlbHNlIHsKCQkJbWVzc2FnZSA9IHRoaXMub3B0aW9ucy5tZXNzYWdlcy5ub1Jlc3VsdHM7CgkJfQoJCXRoaXMubGl2ZVJlZ2lvbi50ZXh0KCBtZXNzYWdlICk7Cgl9Cn0pOwoKCn0oIGpRdWVyeSApKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgbGFzdEFjdGl2ZSwgc3RhcnRYUG9zLCBzdGFydFlQb3MsIGNsaWNrRHJhZ2dlZCwKCWJhc2VDbGFzc2VzID0gInVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIiwKCXN0YXRlQ2xhc3NlcyA9ICJ1aS1zdGF0ZS1ob3ZlciB1aS1zdGF0ZS1hY3RpdmUgIiwKCXR5cGVDbGFzc2VzID0gInVpLWJ1dHRvbi1pY29ucy1vbmx5IHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktYnV0dG9uLXRleHQtaWNvbnMgdWktYnV0dG9uLXRleHQtaWNvbi1wcmltYXJ5IHVpLWJ1dHRvbi10ZXh0LWljb24tc2Vjb25kYXJ5IHVpLWJ1dHRvbi10ZXh0LW9ubHkiLAoJZm9ybVJlc2V0SGFuZGxlciA9IGZ1bmN0aW9uKCkgewoJCXZhciBidXR0b25zID0gJCggdGhpcyApLmZpbmQoICI6dWktYnV0dG9uIiApOwoJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCWJ1dHRvbnMuYnV0dG9uKCAicmVmcmVzaCIgKTsKCQl9LCAxICk7Cgl9LAoJcmFkaW9Hcm91cCA9IGZ1bmN0aW9uKCByYWRpbyApIHsKCQl2YXIgbmFtZSA9IHJhZGlvLm5hbWUsCgkJCWZvcm0gPSByYWRpby5mb3JtLAoJCQlyYWRpb3MgPSAkKCBbXSApOwoJCWlmICggbmFtZSApIHsKCQkJaWYgKCBmb3JtICkgewoJCQkJcmFkaW9zID0gJCggZm9ybSApLmZpbmQoICJbbmFtZT0nIiArIG5hbWUgKyAiJ10iICk7CgkJCX0gZWxzZSB7CgkJCQlyYWRpb3MgPSAkKCAiW25hbWU9JyIgKyBuYW1lICsgIiddIiwgcmFkaW8ub3duZXJEb2N1bWVudCApCgkJCQkJLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJCQkJcmV0dXJuICF0aGlzLmZvcm07CgkJCQkJfSk7CgkJCX0KCQl9CgkJcmV0dXJuIHJhZGlvczsKCX07CgokLndpZGdldCggInVpLmJ1dHRvbiIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglkZWZhdWx0RWxlbWVudDogIjxidXR0b24+IiwKCW9wdGlvbnM6IHsKCQlkaXNhYmxlZDogbnVsbCwKCQl0ZXh0OiB0cnVlLAoJCWxhYmVsOiBudWxsLAoJCWljb25zOiB7CgkJCXByaW1hcnk6IG51bGwsCgkJCXNlY29uZGFyeTogbnVsbAoJCX0KCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuY2xvc2VzdCggImZvcm0iICkKCQkJLnVuYmluZCggInJlc2V0IiArIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkuYmluZCggInJlc2V0IiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZvcm1SZXNldEhhbmRsZXIgKTsKCgkJaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLmRpc2FibGVkICE9PSAiYm9vbGVhbiIgKSB7CgkJCXRoaXMub3B0aW9ucy5kaXNhYmxlZCA9ICEhdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIgKTsKCQl9IGVsc2UgewoJCQl0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiwgdGhpcy5vcHRpb25zLmRpc2FibGVkICk7CgkJfQoKCQl0aGlzLl9kZXRlcm1pbmVCdXR0b25UeXBlKCk7CgkJdGhpcy5oYXNUaXRsZSA9ICEhdGhpcy5idXR0b25FbGVtZW50LmF0dHIoICJ0aXRsZSIgKTsKCgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQl0b2dnbGVCdXR0b24gPSB0aGlzLnR5cGUgPT09ICJjaGVja2JveCIgfHwgdGhpcy50eXBlID09PSAicmFkaW8iLAoJCQlhY3RpdmVDbGFzcyA9ICF0b2dnbGVCdXR0b24gPyAidWktc3RhdGUtYWN0aXZlIiA6ICIiLAoJCQlmb2N1c0NsYXNzID0gInVpLXN0YXRlLWZvY3VzIjsKCgkJaWYgKCBvcHRpb25zLmxhYmVsID09PSBudWxsICkgewoJCQlvcHRpb25zLmxhYmVsID0gKHRoaXMudHlwZSA9PT0gImlucHV0IiA/IHRoaXMuYnV0dG9uRWxlbWVudC52YWwoKSA6IHRoaXMuYnV0dG9uRWxlbWVudC5odG1sKCkpOwoJCX0KCgkJdGhpcy5faG92ZXJhYmxlKCB0aGlzLmJ1dHRvbkVsZW1lbnQgKTsKCgkJdGhpcy5idXR0b25FbGVtZW50CgkJCS5hZGRDbGFzcyggYmFzZUNsYXNzZXMgKQoJCQkuYXR0ciggInJvbGUiLCAiYnV0dG9uIiApCgkJCS5iaW5kKCAibW91c2VlbnRlciIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHsKCQkJCWlmICggb3B0aW9ucy5kaXNhYmxlZCApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCQlpZiAoIHRoaXMgPT09IGxhc3RBY3RpdmUgKSB7CgkJCQkJJCggdGhpcyApLmFkZENsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJfQoJCQl9KQoJCQkuYmluZCggIm1vdXNlbGVhdmUiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCBhY3RpdmVDbGFzcyApOwoJCQl9KQoJCQkuYmluZCggImNsaWNrIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggb3B0aW9ucy5kaXNhYmxlZCApIHsKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCWV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwoJCQkJfQoJCQl9KTsKCgkJdGhpcy5lbGVtZW50CgkJCS5iaW5kKCAiZm9jdXMiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQkvLyBubyBuZWVkIHRvIGNoZWNrIGRpc2FibGVkLCBmb2N1cyB3b24ndCBiZSB0cmlnZ2VyZWQgYW55d2F5CgkJCQl0aGF0LmJ1dHRvbkVsZW1lbnQuYWRkQ2xhc3MoIGZvY3VzQ2xhc3MgKTsKCQkJfSkKCQkJLmJpbmQoICJibHVyIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkgewoJCQkJdGhhdC5idXR0b25FbGVtZW50LnJlbW92ZUNsYXNzKCBmb2N1c0NsYXNzICk7CgkJCX0pOwoKCQlpZiAoIHRvZ2dsZUJ1dHRvbiApIHsKCQkJdGhpcy5lbGVtZW50LmJpbmQoICJjaGFuZ2UiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQlpZiAoIGNsaWNrRHJhZ2dlZCApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCQl0aGF0LnJlZnJlc2goKTsKCQkJfSk7CgkJCS8vIGlmIG1vdXNlIG1vdmVzIGJldHdlZW4gbW91c2Vkb3duIGFuZCBtb3VzZXVwIChkcmFnKSBzZXQgY2xpY2tEcmFnZ2VkIGZsYWcKCQkJLy8gcHJldmVudHMgaXNzdWUgd2hlcmUgYnV0dG9uIHN0YXRlIGNoYW5nZXMgYnV0IGNoZWNrYm94L3JhZGlvIGNoZWNrZWQgc3RhdGUKCQkJLy8gZG9lcyBub3QgaW4gRmlyZWZveCAoc2VlIHRpY2tldCAjNjk3MCkKCQkJdGhpcy5idXR0b25FbGVtZW50CgkJCQkuYmluZCggIm1vdXNlZG93biIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJaWYgKCBvcHRpb25zLmRpc2FibGVkICkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJCWNsaWNrRHJhZ2dlZCA9IGZhbHNlOwoJCQkJCXN0YXJ0WFBvcyA9IGV2ZW50LnBhZ2VYOwoJCQkJCXN0YXJ0WVBvcyA9IGV2ZW50LnBhZ2VZOwoJCQkJfSkKCQkJCS5iaW5kKCAibW91c2V1cCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJaWYgKCBvcHRpb25zLmRpc2FibGVkICkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJCWlmICggc3RhcnRYUG9zICE9PSBldmVudC5wYWdlWCB8fCBzdGFydFlQb3MgIT09IGV2ZW50LnBhZ2VZICkgewoJCQkJCQljbGlja0RyYWdnZWQgPSB0cnVlOwoJCQkJCX0KCQkJfSk7CgkJfQoKCQlpZiAoIHRoaXMudHlwZSA9PT0gImNoZWNrYm94IiApIHsKCQkJdGhpcy5idXR0b25FbGVtZW50LmJpbmQoICJjbGljayIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHsKCQkJCWlmICggb3B0aW9ucy5kaXNhYmxlZCB8fCBjbGlja0RyYWdnZWQgKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQkJJCggdGhpcyApLnRvZ2dsZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJdGhhdC5idXR0b25FbGVtZW50LmF0dHIoICJhcmlhLXByZXNzZWQiLCB0aGF0LmVsZW1lbnRbMF0uY2hlY2tlZCApOwoJCQl9KTsKCQl9IGVsc2UgaWYgKCB0aGlzLnR5cGUgPT09ICJyYWRpbyIgKSB7CgkJCXRoaXMuYnV0dG9uRWxlbWVudC5iaW5kKCAiY2xpY2siICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgfHwgY2xpY2tEcmFnZ2VkICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJCSQoIHRoaXMgKS5hZGRDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCXRoYXQuYnV0dG9uRWxlbWVudC5hdHRyKCAiYXJpYS1wcmVzc2VkIiwgInRydWUiICk7CgoJCQkJdmFyIHJhZGlvID0gdGhhdC5lbGVtZW50WyAwIF07CgkJCQlyYWRpb0dyb3VwKCByYWRpbyApCgkJCQkJLm5vdCggcmFkaW8gKQoJCQkJCS5tYXAoZnVuY3Rpb24oKSB7CgkJCQkJCXJldHVybiAkKCB0aGlzICkuYnV0dG9uKCAid2lkZ2V0IiApWyAwIF07CgkJCQkJfSkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJCQkuYXR0ciggImFyaWEtcHJlc3NlZCIsICJmYWxzZSIgKTsKCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5idXR0b25FbGVtZW50CgkJCQkuYmluZCggIm1vdXNlZG93biIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHsKCQkJCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQkJJCggdGhpcyApLmFkZENsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJCWxhc3RBY3RpdmUgPSB0aGlzOwoJCQkJCXRoYXQuZG9jdW1lbnQub25lKCAibW91c2V1cCIsIGZ1bmN0aW9uKCkgewoJCQkJCQlsYXN0QWN0aXZlID0gbnVsbDsKCQkJCQl9KTsKCQkJCX0pCgkJCQkuYmluZCggIm1vdXNldXAiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQkJaWYgKCBvcHRpb25zLmRpc2FibGVkICkgewoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJCSQoIHRoaXMgKS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCX0pCgkJCQkuYmluZCggImtleWRvd24iICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQkJaWYgKCBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuU1BBQ0UgfHwgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLkVOVEVSICkgewoJCQkJCQkkKCB0aGlzICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgkJCQkJfQoJCQkJfSkKCQkJCS5iaW5kKCAia2V5dXAiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oKSB7CgkJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJfSk7CgoJCQlpZiAoIHRoaXMuYnV0dG9uRWxlbWVudC5pcygiYSIpICkgewoJCQkJdGhpcy5idXR0b25FbGVtZW50LmtleXVwKGZ1bmN0aW9uKGV2ZW50KSB7CgkJCQkJaWYgKCBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuU1BBQ0UgKSB7CgkJCQkJCS8vIFRPRE8gcGFzcyB0aHJvdWdoIG9yaWdpbmFsIGV2ZW50IGNvcnJlY3RseSAoanVzdCBhcyAybmQgYXJndW1lbnQgZG9lc24ndCB3b3JrKQoJCQkJCQkkKCB0aGlzICkuY2xpY2soKTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoJCX0KCgkJLy8gVE9ETzogcHVsbCBvdXQgJC5XaWRnZXQncyBoYW5kbGluZyBmb3IgdGhlIGRpc2FibGVkIG9wdGlvbiBpbnRvCgkJLy8gJC5XaWRnZXQucHJvdG90eXBlLl9zZXRPcHRpb25EaXNhYmxlZCBzbyBpdCdzIGVhc3kgdG8gcHJveHkgYW5kIGNhbgoJCS8vIGJlIG92ZXJyaWRkZW4gYnkgaW5kaXZpZHVhbCBwbHVnaW5zCgkJdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCBvcHRpb25zLmRpc2FibGVkICk7CgkJdGhpcy5fcmVzZXRCdXR0b24oKTsKCX0sCgoJX2RldGVybWluZUJ1dHRvblR5cGU6IGZ1bmN0aW9uKCkgewoJCXZhciBhbmNlc3RvciwgbGFiZWxTZWxlY3RvciwgY2hlY2tlZDsKCgkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoIlt0eXBlPWNoZWNrYm94XSIpICkgewoJCQl0aGlzLnR5cGUgPSAiY2hlY2tib3giOwoJCX0gZWxzZSBpZiAoIHRoaXMuZWxlbWVudC5pcygiW3R5cGU9cmFkaW9dIikgKSB7CgkJCXRoaXMudHlwZSA9ICJyYWRpbyI7CgkJfSBlbHNlIGlmICggdGhpcy5lbGVtZW50LmlzKCJpbnB1dCIpICkgewoJCQl0aGlzLnR5cGUgPSAiaW5wdXQiOwoJCX0gZWxzZSB7CgkJCXRoaXMudHlwZSA9ICJidXR0b24iOwoJCX0KCgkJaWYgKCB0aGlzLnR5cGUgPT09ICJjaGVja2JveCIgfHwgdGhpcy50eXBlID09PSAicmFkaW8iICkgewoJCQkvLyB3ZSBkb24ndCBzZWFyY2ggYWdhaW5zdCB0aGUgZG9jdW1lbnQgaW4gY2FzZSB0aGUgZWxlbWVudAoJCQkvLyBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgRE9NCgkJCWFuY2VzdG9yID0gdGhpcy5lbGVtZW50LnBhcmVudHMoKS5sYXN0KCk7CgkJCWxhYmVsU2VsZWN0b3IgPSAibGFiZWxbZm9yPSciICsgdGhpcy5lbGVtZW50LmF0dHIoImlkIikgKyAiJ10iOwoJCQl0aGlzLmJ1dHRvbkVsZW1lbnQgPSBhbmNlc3Rvci5maW5kKCBsYWJlbFNlbGVjdG9yICk7CgkJCWlmICggIXRoaXMuYnV0dG9uRWxlbWVudC5sZW5ndGggKSB7CgkJCQlhbmNlc3RvciA9IGFuY2VzdG9yLmxlbmd0aCA/IGFuY2VzdG9yLnNpYmxpbmdzKCkgOiB0aGlzLmVsZW1lbnQuc2libGluZ3MoKTsKCQkJCXRoaXMuYnV0dG9uRWxlbWVudCA9IGFuY2VzdG9yLmZpbHRlciggbGFiZWxTZWxlY3RvciApOwoJCQkJaWYgKCAhdGhpcy5idXR0b25FbGVtZW50Lmxlbmd0aCApIHsKCQkJCQl0aGlzLmJ1dHRvbkVsZW1lbnQgPSBhbmNlc3Rvci5maW5kKCBsYWJlbFNlbGVjdG9yICk7CgkJCQl9CgkJCX0KCQkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCAidWktaGVscGVyLWhpZGRlbi1hY2Nlc3NpYmxlIiApOwoKCQkJY2hlY2tlZCA9IHRoaXMuZWxlbWVudC5pcyggIjpjaGVja2VkIiApOwoJCQlpZiAoIGNoZWNrZWQgKSB7CgkJCQl0aGlzLmJ1dHRvbkVsZW1lbnQuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgkJCX0KCQkJdGhpcy5idXR0b25FbGVtZW50LnByb3AoICJhcmlhLXByZXNzZWQiLCBjaGVja2VkICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5idXR0b25FbGVtZW50ID0gdGhpcy5lbGVtZW50OwoJCX0KCX0sCgoJd2lkZ2V0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5idXR0b25FbGVtZW50OwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50CgkJCS5yZW1vdmVDbGFzcyggInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZSIgKTsKCQl0aGlzLmJ1dHRvbkVsZW1lbnQKCQkJLnJlbW92ZUNsYXNzKCBiYXNlQ2xhc3NlcyArICIgIiArIHN0YXRlQ2xhc3NlcyArICIgIiArIHR5cGVDbGFzc2VzICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1wcmVzc2VkIiApCgkJCS5odG1sKCB0aGlzLmJ1dHRvbkVsZW1lbnQuZmluZCgiLnVpLWJ1dHRvbi10ZXh0IikuaHRtbCgpICk7CgoJCWlmICggIXRoaXMuaGFzVGl0bGUgKSB7CgkJCXRoaXMuYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyKCAidGl0bGUiICk7CgkJfQoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApOwoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQlpZiAoIHZhbHVlICkgewoJCQkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIHRydWUgKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMuZWxlbWVudC5wcm9wKCAiZGlzYWJsZWQiLCBmYWxzZSApOwoJCQl9CgkJCXJldHVybjsKCQl9CgkJdGhpcy5fcmVzZXRCdXR0b24oKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJLy9TZWUgIzgyMzcgJiAjODgyOAoJCXZhciBpc0Rpc2FibGVkID0gdGhpcy5lbGVtZW50LmlzKCAiaW5wdXQsIGJ1dHRvbiIgKSA/IHRoaXMuZWxlbWVudC5pcyggIjpkaXNhYmxlZCIgKSA6IHRoaXMuZWxlbWVudC5oYXNDbGFzcyggInVpLWJ1dHRvbi1kaXNhYmxlZCIgKTsKCgkJaWYgKCBpc0Rpc2FibGVkICE9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCXRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgaXNEaXNhYmxlZCApOwoJCX0KCQlpZiAoIHRoaXMudHlwZSA9PT0gInJhZGlvIiApIHsKCQkJcmFkaW9Hcm91cCggdGhpcy5lbGVtZW50WzBdICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCWlmICggJCggdGhpcyApLmlzKCAiOmNoZWNrZWQiICkgKSB7CgkJCQkJJCggdGhpcyApLmJ1dHRvbiggIndpZGdldCIgKQoJCQkJCQkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJCQkJLmF0dHIoICJhcmlhLXByZXNzZWQiLCAidHJ1ZSIgKTsKCQkJCX0gZWxzZSB7CgkJCQkJJCggdGhpcyApLmJ1dHRvbiggIndpZGdldCIgKQoJCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJCQkJLmF0dHIoICJhcmlhLXByZXNzZWQiLCAiZmFsc2UiICk7CgkJCQl9CgkJCX0pOwoJCX0gZWxzZSBpZiAoIHRoaXMudHlwZSA9PT0gImNoZWNrYm94IiApIHsKCQkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoICI6Y2hlY2tlZCIgKSApIHsKCQkJCXRoaXMuYnV0dG9uRWxlbWVudAoJCQkJCS5hZGRDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKQoJCQkJCS5hdHRyKCAiYXJpYS1wcmVzc2VkIiwgInRydWUiICk7CgkJCX0gZWxzZSB7CgkJCQl0aGlzLmJ1dHRvbkVsZW1lbnQKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJCQkuYXR0ciggImFyaWEtcHJlc3NlZCIsICJmYWxzZSIgKTsKCQkJfQoJCX0KCX0sCgoJX3Jlc2V0QnV0dG9uOiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMudHlwZSA9PT0gImlucHV0IiApIHsKCQkJaWYgKCB0aGlzLm9wdGlvbnMubGFiZWwgKSB7CgkJCQl0aGlzLmVsZW1lbnQudmFsKCB0aGlzLm9wdGlvbnMubGFiZWwgKTsKCQkJfQoJCQlyZXR1cm47CgkJfQoJCXZhciBidXR0b25FbGVtZW50ID0gdGhpcy5idXR0b25FbGVtZW50LnJlbW92ZUNsYXNzKCB0eXBlQ2xhc3NlcyApLAoJCQlidXR0b25UZXh0ID0gJCggIjxzcGFuPjwvc3Bhbj4iLCB0aGlzLmRvY3VtZW50WzBdICkKCQkJCS5hZGRDbGFzcyggInVpLWJ1dHRvbi10ZXh0IiApCgkJCQkuaHRtbCggdGhpcy5vcHRpb25zLmxhYmVsICkKCQkJCS5hcHBlbmRUbyggYnV0dG9uRWxlbWVudC5lbXB0eSgpICkKCQkJCS50ZXh0KCksCgkJCWljb25zID0gdGhpcy5vcHRpb25zLmljb25zLAoJCQltdWx0aXBsZUljb25zID0gaWNvbnMucHJpbWFyeSAmJiBpY29ucy5zZWNvbmRhcnksCgkJCWJ1dHRvbkNsYXNzZXMgPSBbXTsKCgkJaWYgKCBpY29ucy5wcmltYXJ5IHx8IGljb25zLnNlY29uZGFyeSApIHsKCQkJaWYgKCB0aGlzLm9wdGlvbnMudGV4dCApIHsKCQkJCWJ1dHRvbkNsYXNzZXMucHVzaCggInVpLWJ1dHRvbi10ZXh0LWljb24iICsgKCBtdWx0aXBsZUljb25zID8gInMiIDogKCBpY29ucy5wcmltYXJ5ID8gIi1wcmltYXJ5IiA6ICItc2Vjb25kYXJ5IiApICkgKTsKCQkJfQoKCQkJaWYgKCBpY29ucy5wcmltYXJ5ICkgewoJCQkJYnV0dG9uRWxlbWVudC5wcmVwZW5kKCAiPHNwYW4gY2xhc3M9J3VpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiAiICsgaWNvbnMucHJpbWFyeSArICInPjwvc3Bhbj4iICk7CgkJCX0KCgkJCWlmICggaWNvbnMuc2Vjb25kYXJ5ICkgewoJCQkJYnV0dG9uRWxlbWVudC5hcHBlbmQoICI8c3BhbiBjbGFzcz0ndWktYnV0dG9uLWljb24tc2Vjb25kYXJ5IHVpLWljb24gIiArIGljb25zLnNlY29uZGFyeSArICInPjwvc3Bhbj4iICk7CgkJCX0KCgkJCWlmICggIXRoaXMub3B0aW9ucy50ZXh0ICkgewoJCQkJYnV0dG9uQ2xhc3Nlcy5wdXNoKCBtdWx0aXBsZUljb25zID8gInVpLWJ1dHRvbi1pY29ucy1vbmx5IiA6ICJ1aS1idXR0b24taWNvbi1vbmx5IiApOwoKCQkJCWlmICggIXRoaXMuaGFzVGl0bGUgKSB7CgkJCQkJYnV0dG9uRWxlbWVudC5hdHRyKCAidGl0bGUiLCAkLnRyaW0oIGJ1dHRvblRleHQgKSApOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJYnV0dG9uQ2xhc3Nlcy5wdXNoKCAidWktYnV0dG9uLXRleHQtb25seSIgKTsKCQl9CgkJYnV0dG9uRWxlbWVudC5hZGRDbGFzcyggYnV0dG9uQ2xhc3Nlcy5qb2luKCAiICIgKSApOwoJfQp9KTsKCiQud2lkZ2V0KCAidWkuYnV0dG9uc2V0IiwgewoJdmVyc2lvbjogIjEuOS4yIiwKCW9wdGlvbnM6IHsKCQlpdGVtczogImJ1dHRvbiwgaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdLCBpbnB1dFt0eXBlPWNoZWNrYm94XSwgaW5wdXRbdHlwZT1yYWRpb10sIGEsIDpkYXRhKGJ1dHRvbikiCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggInVpLWJ1dHRvbnNldCIgKTsKCX0sCgoJX2luaXQ6IGZ1bmN0aW9uKCkgewoJCXRoaXMucmVmcmVzaCgpOwoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJdGhpcy5idXR0b25zLmJ1dHRvbiggIm9wdGlvbiIsIGtleSwgdmFsdWUgKTsKCQl9CgoJCXRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciBydGwgPSB0aGlzLmVsZW1lbnQuY3NzKCAiZGlyZWN0aW9uIiApID09PSAicnRsIjsKCgkJdGhpcy5idXR0b25zID0gdGhpcy5lbGVtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApCgkJCS5maWx0ZXIoICI6dWktYnV0dG9uIiApCgkJCQkuYnV0dG9uKCAicmVmcmVzaCIgKQoJCQkuZW5kKCkKCQkJLm5vdCggIjp1aS1idXR0b24iICkKCQkJCS5idXR0b24oKQoJCQkuZW5kKCkKCQkJLm1hcChmdW5jdGlvbigpIHsKCQkJCXJldHVybiAkKCB0aGlzICkuYnV0dG9uKCAid2lkZ2V0IiApWyAwIF07CgkJCX0pCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb3JuZXItYWxsIHVpLWNvcm5lci1sZWZ0IHVpLWNvcm5lci1yaWdodCIgKQoJCQkJLmZpbHRlciggIjpmaXJzdCIgKQoJCQkJCS5hZGRDbGFzcyggcnRsID8gInVpLWNvcm5lci1yaWdodCIgOiAidWktY29ybmVyLWxlZnQiICkKCQkJCS5lbmQoKQoJCQkJLmZpbHRlciggIjpsYXN0IiApCgkJCQkJLmFkZENsYXNzKCBydGwgPyAidWktY29ybmVyLWxlZnQiIDogInVpLWNvcm5lci1yaWdodCIgKQoJCQkJLmVuZCgpCgkJCS5lbmQoKTsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWJ1dHRvbnNldCIgKTsKCQl0aGlzLmJ1dHRvbnMKCQkJLm1hcChmdW5jdGlvbigpIHsKCQkJCXJldHVybiAkKCB0aGlzICkuYnV0dG9uKCAid2lkZ2V0IiApWyAwIF07CgkJCX0pCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb3JuZXItbGVmdCB1aS1jb3JuZXItcmlnaHQiICkKCQkJLmVuZCgpCgkJCS5idXR0b24oICJkZXN0cm95IiApOwoJfQp9KTsKCn0oIGpRdWVyeSApICk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5leHRlbmQoJC51aSwgeyBkYXRlcGlja2VyOiB7IHZlcnNpb246ICIxLjkuMiIgfSB9KTsKCnZhciBQUk9QX05BTUUgPSAnZGF0ZXBpY2tlcic7CnZhciBkcHV1aWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKdmFyIGluc3RBY3RpdmU7CgovKiBEYXRlIHBpY2tlciBtYW5hZ2VyLgogICBVc2UgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLCAkLmRhdGVwaWNrZXIsIHRvIGludGVyYWN0IHdpdGggdGhlIGRhdGUgcGlja2VyLgogICBTZXR0aW5ncyBmb3IgKGdyb3VwcyBvZikgZGF0ZSBwaWNrZXJzIGFyZSBtYWludGFpbmVkIGluIGFuIGluc3RhbmNlIG9iamVjdCwKICAgYWxsb3dpbmcgbXVsdGlwbGUgZGlmZmVyZW50IHNldHRpbmdzIG9uIHRoZSBzYW1lIHBhZ2UuICovCgpmdW5jdGlvbiBEYXRlcGlja2VyKCkgewoJdGhpcy5kZWJ1ZyA9IGZhbHNlOyAvLyBDaGFuZ2UgdGhpcyB0byB0cnVlIHRvIHN0YXJ0IGRlYnVnZ2luZwoJdGhpcy5fY3VySW5zdCA9IG51bGw7IC8vIFRoZSBjdXJyZW50IGluc3RhbmNlIGluIHVzZQoJdGhpcy5fa2V5RXZlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIGxhc3QgZXZlbnQgd2FzIGEga2V5IGV2ZW50Cgl0aGlzLl9kaXNhYmxlZElucHV0cyA9IFtdOyAvLyBMaXN0IG9mIGRhdGUgcGlja2VyIGlucHV0cyB0aGF0IGhhdmUgYmVlbiBkaXNhYmxlZAoJdGhpcy5fZGF0ZXBpY2tlclNob3dpbmcgPSBmYWxzZTsgLy8gVHJ1ZSBpZiB0aGUgcG9wdXAgcGlja2VyIGlzIHNob3dpbmcgLCBmYWxzZSBpZiBub3QKCXRoaXMuX2luRGlhbG9nID0gZmFsc2U7IC8vIFRydWUgaWYgc2hvd2luZyB3aXRoaW4gYSAiZGlhbG9nIiwgZmFsc2UgaWYgbm90Cgl0aGlzLl9tYWluRGl2SWQgPSAndWktZGF0ZXBpY2tlci1kaXYnOyAvLyBUaGUgSUQgb2YgdGhlIG1haW4gZGF0ZXBpY2tlciBkaXZpc2lvbgoJdGhpcy5faW5saW5lQ2xhc3MgPSAndWktZGF0ZXBpY2tlci1pbmxpbmUnOyAvLyBUaGUgbmFtZSBvZiB0aGUgaW5saW5lIG1hcmtlciBjbGFzcwoJdGhpcy5fYXBwZW5kQ2xhc3MgPSAndWktZGF0ZXBpY2tlci1hcHBlbmQnOyAvLyBUaGUgbmFtZSBvZiB0aGUgYXBwZW5kIG1hcmtlciBjbGFzcwoJdGhpcy5fdHJpZ2dlckNsYXNzID0gJ3VpLWRhdGVwaWNrZXItdHJpZ2dlcic7IC8vIFRoZSBuYW1lIG9mIHRoZSB0cmlnZ2VyIG1hcmtlciBjbGFzcwoJdGhpcy5fZGlhbG9nQ2xhc3MgPSAndWktZGF0ZXBpY2tlci1kaWFsb2cnOyAvLyBUaGUgbmFtZSBvZiB0aGUgZGlhbG9nIG1hcmtlciBjbGFzcwoJdGhpcy5fZGlzYWJsZUNsYXNzID0gJ3VpLWRhdGVwaWNrZXItZGlzYWJsZWQnOyAvLyBUaGUgbmFtZSBvZiB0aGUgZGlzYWJsZWQgY292ZXJpbmcgbWFya2VyIGNsYXNzCgl0aGlzLl91bnNlbGVjdGFibGVDbGFzcyA9ICd1aS1kYXRlcGlja2VyLXVuc2VsZWN0YWJsZSc7IC8vIFRoZSBuYW1lIG9mIHRoZSB1bnNlbGVjdGFibGUgY2VsbCBtYXJrZXIgY2xhc3MKCXRoaXMuX2N1cnJlbnRDbGFzcyA9ICd1aS1kYXRlcGlja2VyLWN1cnJlbnQtZGF5JzsgLy8gVGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgZGF5IG1hcmtlciBjbGFzcwoJdGhpcy5fZGF5T3ZlckNsYXNzID0gJ3VpLWRhdGVwaWNrZXItZGF5cy1jZWxsLW92ZXInOyAvLyBUaGUgbmFtZSBvZiB0aGUgZGF5IGhvdmVyIG1hcmtlciBjbGFzcwoJdGhpcy5yZWdpb25hbCA9IFtdOyAvLyBBdmFpbGFibGUgcmVnaW9uYWwgc2V0dGluZ3MsIGluZGV4ZWQgYnkgbGFuZ3VhZ2UgY29kZQoJdGhpcy5yZWdpb25hbFsnJ10gPSB7IC8vIERlZmF1bHQgcmVnaW9uYWwgc2V0dGluZ3MKCQljbG9zZVRleHQ6ICdEb25lJywgLy8gRGlzcGxheSB0ZXh0IGZvciBjbG9zZSBsaW5rCgkJcHJldlRleHQ6ICdQcmV2JywgLy8gRGlzcGxheSB0ZXh0IGZvciBwcmV2aW91cyBtb250aCBsaW5rCgkJbmV4dFRleHQ6ICdOZXh0JywgLy8gRGlzcGxheSB0ZXh0IGZvciBuZXh0IG1vbnRoIGxpbmsKCQljdXJyZW50VGV4dDogJ1RvZGF5JywgLy8gRGlzcGxheSB0ZXh0IGZvciBjdXJyZW50IG1vbnRoIGxpbmsKCQltb250aE5hbWVzOiBbJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywKCQkJJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddLCAvLyBOYW1lcyBvZiBtb250aHMgZm9yIGRyb3AtZG93biBhbmQgZm9ybWF0dGluZwoJCW1vbnRoTmFtZXNTaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLCAvLyBGb3IgZm9ybWF0dGluZwoJCWRheU5hbWVzOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J10sIC8vIEZvciBmb3JtYXR0aW5nCgkJZGF5TmFtZXNTaG9ydDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSwgLy8gRm9yIGZvcm1hdHRpbmcKCQlkYXlOYW1lc01pbjogWydTdScsJ01vJywnVHUnLCdXZScsJ1RoJywnRnInLCdTYSddLCAvLyBDb2x1bW4gaGVhZGluZ3MgZm9yIGRheXMgc3RhcnRpbmcgYXQgU3VuZGF5CgkJd2Vla0hlYWRlcjogJ1drJywgLy8gQ29sdW1uIGhlYWRlciBmb3Igd2VlayBvZiB0aGUgeWVhcgoJCWRhdGVGb3JtYXQ6ICdtbS9kZC95eScsIC8vIFNlZSBmb3JtYXQgb3B0aW9ucyBvbiBwYXJzZURhdGUKCQlmaXJzdERheTogMCwgLy8gVGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgU3VuID0gMCwgTW9uID0gMSwgLi4uCgkJaXNSVEw6IGZhbHNlLCAvLyBUcnVlIGlmIHJpZ2h0LXRvLWxlZnQgbGFuZ3VhZ2UsIGZhbHNlIGlmIGxlZnQtdG8tcmlnaHQKCQlzaG93TW9udGhBZnRlclllYXI6IGZhbHNlLCAvLyBUcnVlIGlmIHRoZSB5ZWFyIHNlbGVjdCBwcmVjZWRlcyBtb250aCwgZmFsc2UgZm9yIG1vbnRoIHRoZW4geWVhcgoJCXllYXJTdWZmaXg6ICcnIC8vIEFkZGl0aW9uYWwgdGV4dCB0byBhcHBlbmQgdG8gdGhlIHllYXIgaW4gdGhlIG1vbnRoIGhlYWRlcnMKCX07Cgl0aGlzLl9kZWZhdWx0cyA9IHsgLy8gR2xvYmFsIGRlZmF1bHRzIGZvciBhbGwgdGhlIGRhdGUgcGlja2VyIGluc3RhbmNlcwoJCXNob3dPbjogJ2ZvY3VzJywgLy8gJ2ZvY3VzJyBmb3IgcG9wdXAgb24gZm9jdXMsCgkJCS8vICdidXR0b24nIGZvciB0cmlnZ2VyIGJ1dHRvbiwgb3IgJ2JvdGgnIGZvciBlaXRoZXIKCQlzaG93QW5pbTogJ2ZhZGVJbicsIC8vIE5hbWUgb2YgalF1ZXJ5IGFuaW1hdGlvbiBmb3IgcG9wdXAKCQlzaG93T3B0aW9uczoge30sIC8vIE9wdGlvbnMgZm9yIGVuaGFuY2VkIGFuaW1hdGlvbnMKCQlkZWZhdWx0RGF0ZTogbnVsbCwgLy8gVXNlZCB3aGVuIGZpZWxkIGlzIGJsYW5rOiBhY3R1YWwgZGF0ZSwKCQkJLy8gKy8tbnVtYmVyIGZvciBvZmZzZXQgZnJvbSB0b2RheSwgbnVsbCBmb3IgdG9kYXkKCQlhcHBlbmRUZXh0OiAnJywgLy8gRGlzcGxheSB0ZXh0IGZvbGxvd2luZyB0aGUgaW5wdXQgYm94LCBlLmcuIHNob3dpbmcgdGhlIGZvcm1hdAoJCWJ1dHRvblRleHQ6ICcuLi4nLCAvLyBUZXh0IGZvciB0cmlnZ2VyIGJ1dHRvbgoJCWJ1dHRvbkltYWdlOiAnJywgLy8gVVJMIGZvciB0cmlnZ2VyIGJ1dHRvbiBpbWFnZQoJCWJ1dHRvbkltYWdlT25seTogZmFsc2UsIC8vIFRydWUgaWYgdGhlIGltYWdlIGFwcGVhcnMgYWxvbmUsIGZhbHNlIGlmIGl0IGFwcGVhcnMgb24gYSBidXR0b24KCQloaWRlSWZOb1ByZXZOZXh0OiBmYWxzZSwgLy8gVHJ1ZSB0byBoaWRlIG5leHQvcHJldmlvdXMgbW9udGggbGlua3MKCQkJLy8gaWYgbm90IGFwcGxpY2FibGUsIGZhbHNlIHRvIGp1c3QgZGlzYWJsZSB0aGVtCgkJbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdDogZmFsc2UsIC8vIFRydWUgaWYgZGF0ZSBmb3JtYXR0aW5nIGFwcGxpZWQgdG8gcHJldi90b2RheS9uZXh0IGxpbmtzCgkJZ290b0N1cnJlbnQ6IGZhbHNlLCAvLyBUcnVlIGlmIHRvZGF5IGxpbmsgZ29lcyBiYWNrIHRvIGN1cnJlbnQgc2VsZWN0aW9uIGluc3RlYWQKCQljaGFuZ2VNb250aDogZmFsc2UsIC8vIFRydWUgaWYgbW9udGggY2FuIGJlIHNlbGVjdGVkIGRpcmVjdGx5LCBmYWxzZSBpZiBvbmx5IHByZXYvbmV4dAoJCWNoYW5nZVllYXI6IGZhbHNlLCAvLyBUcnVlIGlmIHllYXIgY2FuIGJlIHNlbGVjdGVkIGRpcmVjdGx5LCBmYWxzZSBpZiBvbmx5IHByZXYvbmV4dAoJCXllYXJSYW5nZTogJ2MtMTA6YysxMCcsIC8vIFJhbmdlIG9mIHllYXJzIHRvIGRpc3BsYXkgaW4gZHJvcC1kb3duLAoJCQkvLyBlaXRoZXIgcmVsYXRpdmUgdG8gdG9kYXkncyB5ZWFyICgtbm46K25uKSwgcmVsYXRpdmUgdG8gY3VycmVudGx5IGRpc3BsYXllZCB5ZWFyCgkJCS8vIChjLW5uOmMrbm4pLCBhYnNvbHV0ZSAobm5ubjpubm5uKSwgb3IgYSBjb21iaW5hdGlvbiBvZiB0aGUgYWJvdmUgKG5ubm46LW4pCgkJc2hvd090aGVyTW9udGhzOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaG93IGRhdGVzIGluIG90aGVyIG1vbnRocywgZmFsc2UgdG8gbGVhdmUgYmxhbmsKCQlzZWxlY3RPdGhlck1vbnRoczogZmFsc2UsIC8vIFRydWUgdG8gYWxsb3cgc2VsZWN0aW9uIG9mIGRhdGVzIGluIG90aGVyIG1vbnRocywgZmFsc2UgZm9yIHVuc2VsZWN0YWJsZQoJCXNob3dXZWVrOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaG93IHdlZWsgb2YgdGhlIHllYXIsIGZhbHNlIHRvIG5vdCBzaG93IGl0CgkJY2FsY3VsYXRlV2VlazogdGhpcy5pc284NjAxV2VlaywgLy8gSG93IHRvIGNhbGN1bGF0ZSB0aGUgd2VlayBvZiB0aGUgeWVhciwKCQkJLy8gdGFrZXMgYSBEYXRlIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgb2YgdGhlIHdlZWsgZm9yIGl0CgkJc2hvcnRZZWFyQ3V0b2ZmOiAnKzEwJywgLy8gU2hvcnQgeWVhciB2YWx1ZXMgPCB0aGlzIGFyZSBpbiB0aGUgY3VycmVudCBjZW50dXJ5LAoJCQkvLyA+IHRoaXMgYXJlIGluIHRoZSBwcmV2aW91cyBjZW50dXJ5LAoJCQkvLyBzdHJpbmcgdmFsdWUgc3RhcnRpbmcgd2l0aCAnKycgZm9yIGN1cnJlbnQgeWVhciArIHZhbHVlCgkJbWluRGF0ZTogbnVsbCwgLy8gVGhlIGVhcmxpZXN0IHNlbGVjdGFibGUgZGF0ZSwgb3IgbnVsbCBmb3Igbm8gbGltaXQKCQltYXhEYXRlOiBudWxsLCAvLyBUaGUgbGF0ZXN0IHNlbGVjdGFibGUgZGF0ZSwgb3IgbnVsbCBmb3Igbm8gbGltaXQKCQlkdXJhdGlvbjogJ2Zhc3QnLCAvLyBEdXJhdGlvbiBvZiBkaXNwbGF5L2Nsb3N1cmUKCQliZWZvcmVTaG93RGF5OiBudWxsLCAvLyBGdW5jdGlvbiB0aGF0IHRha2VzIGEgZGF0ZSBhbmQgcmV0dXJucyBhbiBhcnJheSB3aXRoCgkJCS8vIFswXSA9IHRydWUgaWYgc2VsZWN0YWJsZSwgZmFsc2UgaWYgbm90LCBbMV0gPSBjdXN0b20gQ1NTIGNsYXNzIG5hbWUocykgb3IgJycsCgkJCS8vIFsyXSA9IGNlbGwgdGl0bGUgKG9wdGlvbmFsKSwgZS5nLiAkLmRhdGVwaWNrZXIubm9XZWVrZW5kcwoJCWJlZm9yZVNob3c6IG51bGwsIC8vIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gaW5wdXQgZmllbGQgYW5kCgkJCS8vIHJldHVybnMgYSBzZXQgb2YgY3VzdG9tIHNldHRpbmdzIGZvciB0aGUgZGF0ZSBwaWNrZXIKCQlvblNlbGVjdDogbnVsbCwgLy8gRGVmaW5lIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhIGRhdGUgaXMgc2VsZWN0ZWQKCQlvbkNoYW5nZU1vbnRoWWVhcjogbnVsbCwgLy8gRGVmaW5lIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiB0aGUgbW9udGggb3IgeWVhciBpcyBjaGFuZ2VkCgkJb25DbG9zZTogbnVsbCwgLy8gRGVmaW5lIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiB0aGUgZGF0ZXBpY2tlciBpcyBjbG9zZWQKCQludW1iZXJPZk1vbnRoczogMSwgLy8gTnVtYmVyIG9mIG1vbnRocyB0byBzaG93IGF0IGEgdGltZQoJCXNob3dDdXJyZW50QXRQb3M6IDAsIC8vIFRoZSBwb3NpdGlvbiBpbiBtdWx0aXBlIG1vbnRocyBhdCB3aGljaCB0byBzaG93IHRoZSBjdXJyZW50IG1vbnRoIChzdGFydGluZyBhdCAwKQoJCXN0ZXBNb250aHM6IDEsIC8vIE51bWJlciBvZiBtb250aHMgdG8gc3RlcCBiYWNrL2ZvcndhcmQKCQlzdGVwQmlnTW9udGhzOiAxMiwgLy8gTnVtYmVyIG9mIG1vbnRocyB0byBzdGVwIGJhY2svZm9yd2FyZCBmb3IgdGhlIGJpZyBsaW5rcwoJCWFsdEZpZWxkOiAnJywgLy8gU2VsZWN0b3IgZm9yIGFuIGFsdGVybmF0ZSBmaWVsZCB0byBzdG9yZSBzZWxlY3RlZCBkYXRlcyBpbnRvCgkJYWx0Rm9ybWF0OiAnJywgLy8gVGhlIGRhdGUgZm9ybWF0IHRvIHVzZSBmb3IgdGhlIGFsdGVybmF0ZSBmaWVsZAoJCWNvbnN0cmFpbklucHV0OiB0cnVlLCAvLyBUaGUgaW5wdXQgaXMgY29uc3RyYWluZWQgYnkgdGhlIGN1cnJlbnQgZGF0ZSBmb3JtYXQKCQlzaG93QnV0dG9uUGFuZWw6IGZhbHNlLCAvLyBUcnVlIHRvIHNob3cgYnV0dG9uIHBhbmVsLCBmYWxzZSB0byBub3Qgc2hvdyBpdAoJCWF1dG9TaXplOiBmYWxzZSwgLy8gVHJ1ZSB0byBzaXplIHRoZSBpbnB1dCBmb3IgdGhlIGRhdGUgZm9ybWF0LCBmYWxzZSB0byBsZWF2ZSBhcyBpcwoJCWRpc2FibGVkOiBmYWxzZSAvLyBUaGUgaW5pdGlhbCBkaXNhYmxlZCBzdGF0ZQoJfTsKCSQuZXh0ZW5kKHRoaXMuX2RlZmF1bHRzLCB0aGlzLnJlZ2lvbmFsWycnXSk7Cgl0aGlzLmRwRGl2ID0gYmluZEhvdmVyKCQoJzxkaXYgaWQ9IicgKyB0aGlzLl9tYWluRGl2SWQgKyAnIiBjbGFzcz0idWktZGF0ZXBpY2tlciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktaGVscGVyLWNsZWFyZml4IHVpLWNvcm5lci1hbGwiPjwvZGl2PicpKTsKfQoKJC5leHRlbmQoRGF0ZXBpY2tlci5wcm90b3R5cGUsIHsKCS8qIENsYXNzIG5hbWUgYWRkZWQgdG8gZWxlbWVudHMgdG8gaW5kaWNhdGUgYWxyZWFkeSBjb25maWd1cmVkIHdpdGggYSBkYXRlIHBpY2tlci4gKi8KCW1hcmtlckNsYXNzTmFtZTogJ2hhc0RhdGVwaWNrZXInLAoKCS8vS2VlcCB0cmFjayBvZiB0aGUgbWF4aW11bSBudW1iZXIgb2Ygcm93cyBkaXNwbGF5ZWQgKHNlZSAjNzA0MykKCW1heFJvd3M6IDQsCgoJLyogRGVidWcgbG9nZ2luZyAoaWYgZW5hYmxlZCkuICovCglsb2c6IGZ1bmN0aW9uICgpIHsKCQlpZiAodGhpcy5kZWJ1ZykKCQkJY29uc29sZS5sb2cuYXBwbHkoJycsIGFyZ3VtZW50cyk7Cgl9LAoKCS8vIFRPRE8gcmVuYW1lIHRvICJ3aWRnZXQiIHdoZW4gc3dpdGNoaW5nIHRvIHdpZGdldCBmYWN0b3J5Cglfd2lkZ2V0RGF0ZXBpY2tlcjogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZHBEaXY7Cgl9LAoKCS8qIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgaW5zdGFuY2VzIG9mIHRoZSBkYXRlIHBpY2tlci4KCSAgIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHRoZSBuZXcgc2V0dGluZ3MgdG8gdXNlIGFzIGRlZmF1bHRzIChhbm9ueW1vdXMgb2JqZWN0KQoJICAgQHJldHVybiB0aGUgbWFuYWdlciBvYmplY3QgKi8KCXNldERlZmF1bHRzOiBmdW5jdGlvbihzZXR0aW5ncykgewoJCWV4dGVuZFJlbW92ZSh0aGlzLl9kZWZhdWx0cywgc2V0dGluZ3MgfHwge30pOwoJCXJldHVybiB0aGlzOwoJfSwKCgkvKiBBdHRhY2ggdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi4KCSAgIEBwYXJhbSAgdGFyZ2V0ICAgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAgIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHRoZSBuZXcgc2V0dGluZ3MgdG8gdXNlIGZvciB0aGlzIGRhdGUgcGlja2VyIGluc3RhbmNlIChhbm9ueW1vdXMpICovCglfYXR0YWNoRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBzZXR0aW5ncykgewoJCS8vIGNoZWNrIGZvciBzZXR0aW5ncyBvbiB0aGUgY29udHJvbCBpdHNlbGYgLSBpbiBuYW1lc3BhY2UgJ2RhdGU6JwoJCXZhciBpbmxpbmVTZXR0aW5ncyA9IG51bGw7CgkJZm9yICh2YXIgYXR0ck5hbWUgaW4gdGhpcy5fZGVmYXVsdHMpIHsKCQkJdmFyIGF0dHJWYWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGU6JyArIGF0dHJOYW1lKTsKCQkJaWYgKGF0dHJWYWx1ZSkgewoJCQkJaW5saW5lU2V0dGluZ3MgPSBpbmxpbmVTZXR0aW5ncyB8fCB7fTsKCQkJCXRyeSB7CgkJCQkJaW5saW5lU2V0dGluZ3NbYXR0ck5hbWVdID0gZXZhbChhdHRyVmFsdWUpOwoJCQkJfSBjYXRjaCAoZXJyKSB7CgkJCQkJaW5saW5lU2V0dGluZ3NbYXR0ck5hbWVdID0gYXR0clZhbHVlOwoJCQkJfQoJCQl9CgkJfQoJCXZhciBub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCXZhciBpbmxpbmUgPSAobm9kZU5hbWUgPT0gJ2RpdicgfHwgbm9kZU5hbWUgPT0gJ3NwYW4nKTsKCQlpZiAoIXRhcmdldC5pZCkgewoJCQl0aGlzLnV1aWQgKz0gMTsKCQkJdGFyZ2V0LmlkID0gJ2RwJyArIHRoaXMudXVpZDsKCQl9CgkJdmFyIGluc3QgPSB0aGlzLl9uZXdJbnN0KCQodGFyZ2V0KSwgaW5saW5lKTsKCQlpbnN0LnNldHRpbmdzID0gJC5leHRlbmQoe30sIHNldHRpbmdzIHx8IHt9LCBpbmxpbmVTZXR0aW5ncyB8fCB7fSk7CgkJaWYgKG5vZGVOYW1lID09ICdpbnB1dCcpIHsKCQkJdGhpcy5fY29ubmVjdERhdGVwaWNrZXIodGFyZ2V0LCBpbnN0KTsKCQl9IGVsc2UgaWYgKGlubGluZSkgewoJCQl0aGlzLl9pbmxpbmVEYXRlcGlja2VyKHRhcmdldCwgaW5zdCk7CgkJfQoJfSwKCgkvKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2JqZWN0LiAqLwoJX25ld0luc3Q6IGZ1bmN0aW9uKHRhcmdldCwgaW5saW5lKSB7CgkJdmFyIGlkID0gdGFyZ2V0WzBdLmlkLnJlcGxhY2UoLyhbXkEtWmEtejAtOV8tXSkvZywgJ1xcXFwkMScpOyAvLyBlc2NhcGUgalF1ZXJ5IG1ldGEgY2hhcnMKCQlyZXR1cm4ge2lkOiBpZCwgaW5wdXQ6IHRhcmdldCwgLy8gYXNzb2NpYXRlZCB0YXJnZXQKCQkJc2VsZWN0ZWREYXk6IDAsIHNlbGVjdGVkTW9udGg6IDAsIHNlbGVjdGVkWWVhcjogMCwgLy8gY3VycmVudCBzZWxlY3Rpb24KCQkJZHJhd01vbnRoOiAwLCBkcmF3WWVhcjogMCwgLy8gbW9udGggYmVpbmcgZHJhd24KCQkJaW5saW5lOiBpbmxpbmUsIC8vIGlzIGRhdGVwaWNrZXIgaW5saW5lIG9yIG5vdAoJCQlkcERpdjogKCFpbmxpbmUgPyB0aGlzLmRwRGl2IDogLy8gcHJlc2VudGF0aW9uIGRpdgoJCQliaW5kSG92ZXIoJCgnPGRpdiBjbGFzcz0iJyArIHRoaXMuX2lubGluZUNsYXNzICsgJyB1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbCI+PC9kaXY+JykpKX07Cgl9LAoKCS8qIEF0dGFjaCB0aGUgZGF0ZSBwaWNrZXIgdG8gYW4gaW5wdXQgZmllbGQuICovCglfY29ubmVjdERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgaW5zdCkgewoJCXZhciBpbnB1dCA9ICQodGFyZ2V0KTsKCQlpbnN0LmFwcGVuZCA9ICQoW10pOwoJCWluc3QudHJpZ2dlciA9ICQoW10pOwoJCWlmIChpbnB1dC5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkpCgkJCXJldHVybjsKCQl0aGlzLl9hdHRhY2htZW50cyhpbnB1dCwgaW5zdCk7CgkJaW5wdXQuYWRkQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmtleWRvd24odGhpcy5fZG9LZXlEb3duKS4KCQkJa2V5cHJlc3ModGhpcy5fZG9LZXlQcmVzcykua2V5dXAodGhpcy5fZG9LZXlVcCkuCgkJCWJpbmQoInNldERhdGEuZGF0ZXBpY2tlciIsIGZ1bmN0aW9uKGV2ZW50LCBrZXksIHZhbHVlKSB7CgkJCQlpbnN0LnNldHRpbmdzW2tleV0gPSB2YWx1ZTsKCQkJfSkuYmluZCgiZ2V0RGF0YS5kYXRlcGlja2VyIiwgZnVuY3Rpb24oZXZlbnQsIGtleSkgewoJCQkJcmV0dXJuIHRoaXMuX2dldChpbnN0LCBrZXkpOwoJCQl9KTsKCQl0aGlzLl9hdXRvU2l6ZShpbnN0KTsKCQkkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUsIGluc3QpOwoJCS8vSWYgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUsIGRpc2FibGUgdGhlIGRhdGVwaWNrZXIgb25jZSBpdCBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgaW5wdXQgKHNlZSB0aWNrZXQgIzU2NjUpCgkJaWYoIGluc3Quc2V0dGluZ3MuZGlzYWJsZWQgKSB7CgkJCXRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKCB0YXJnZXQgKTsKCQl9Cgl9LAoKCS8qIE1ha2UgYXR0YWNobWVudHMgYmFzZWQgb24gc2V0dGluZ3MuICovCglfYXR0YWNobWVudHM6IGZ1bmN0aW9uKGlucHV0LCBpbnN0KSB7CgkJdmFyIGFwcGVuZFRleHQgPSB0aGlzLl9nZXQoaW5zdCwgJ2FwcGVuZFRleHQnKTsKCQl2YXIgaXNSVEwgPSB0aGlzLl9nZXQoaW5zdCwgJ2lzUlRMJyk7CgkJaWYgKGluc3QuYXBwZW5kKQoJCQlpbnN0LmFwcGVuZC5yZW1vdmUoKTsKCQlpZiAoYXBwZW5kVGV4dCkgewoJCQlpbnN0LmFwcGVuZCA9ICQoJzxzcGFuIGNsYXNzPSInICsgdGhpcy5fYXBwZW5kQ2xhc3MgKyAnIj4nICsgYXBwZW5kVGV4dCArICc8L3NwYW4+Jyk7CgkJCWlucHV0W2lzUlRMID8gJ2JlZm9yZScgOiAnYWZ0ZXInXShpbnN0LmFwcGVuZCk7CgkJfQoJCWlucHV0LnVuYmluZCgnZm9jdXMnLCB0aGlzLl9zaG93RGF0ZXBpY2tlcik7CgkJaWYgKGluc3QudHJpZ2dlcikKCQkJaW5zdC50cmlnZ2VyLnJlbW92ZSgpOwoJCXZhciBzaG93T24gPSB0aGlzLl9nZXQoaW5zdCwgJ3Nob3dPbicpOwoJCWlmIChzaG93T24gPT0gJ2ZvY3VzJyB8fCBzaG93T24gPT0gJ2JvdGgnKSAvLyBwb3AtdXAgZGF0ZSBwaWNrZXIgd2hlbiBpbiB0aGUgbWFya2VkIGZpZWxkCgkJCWlucHV0LmZvY3VzKHRoaXMuX3Nob3dEYXRlcGlja2VyKTsKCQlpZiAoc2hvd09uID09ICdidXR0b24nIHx8IHNob3dPbiA9PSAnYm90aCcpIHsgLy8gcG9wLXVwIGRhdGUgcGlja2VyIHdoZW4gYnV0dG9uIGNsaWNrZWQKCQkJdmFyIGJ1dHRvblRleHQgPSB0aGlzLl9nZXQoaW5zdCwgJ2J1dHRvblRleHQnKTsKCQkJdmFyIGJ1dHRvbkltYWdlID0gdGhpcy5fZ2V0KGluc3QsICdidXR0b25JbWFnZScpOwoJCQlpbnN0LnRyaWdnZXIgPSAkKHRoaXMuX2dldChpbnN0LCAnYnV0dG9uSW1hZ2VPbmx5JykgPwoJCQkJJCgnPGltZy8+JykuYWRkQ2xhc3ModGhpcy5fdHJpZ2dlckNsYXNzKS4KCQkJCQlhdHRyKHsgc3JjOiBidXR0b25JbWFnZSwgYWx0OiBidXR0b25UZXh0LCB0aXRsZTogYnV0dG9uVGV4dCB9KSA6CgkJCQkkKCc8YnV0dG9uIHR5cGU9ImJ1dHRvbiI+PC9idXR0b24+JykuYWRkQ2xhc3ModGhpcy5fdHJpZ2dlckNsYXNzKS4KCQkJCQlodG1sKGJ1dHRvbkltYWdlID09ICcnID8gYnV0dG9uVGV4dCA6ICQoJzxpbWcvPicpLmF0dHIoCgkJCQkJeyBzcmM6YnV0dG9uSW1hZ2UsIGFsdDpidXR0b25UZXh0LCB0aXRsZTpidXR0b25UZXh0IH0pKSk7CgkJCWlucHV0W2lzUlRMID8gJ2JlZm9yZScgOiAnYWZ0ZXInXShpbnN0LnRyaWdnZXIpOwoJCQlpbnN0LnRyaWdnZXIuY2xpY2soZnVuY3Rpb24oKSB7CgkJCQlpZiAoJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9PSBpbnB1dFswXSkKCQkJCQkkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQllbHNlIGlmICgkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmICQuZGF0ZXBpY2tlci5fbGFzdElucHV0ICE9IGlucHV0WzBdKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJCSQuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIoaW5wdXRbMF0pOwoJCQkJfSBlbHNlCgkJCQkJJC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlcihpbnB1dFswXSk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0pOwoJCX0KCX0sCgoJLyogQXBwbHkgdGhlIG1heGltdW0gbGVuZ3RoIGZvciB0aGUgZGF0ZSBmb3JtYXQuICovCglfYXV0b1NpemU6IGZ1bmN0aW9uKGluc3QpIHsKCQlpZiAodGhpcy5fZ2V0KGluc3QsICdhdXRvU2l6ZScpICYmICFpbnN0LmlubGluZSkgewoJCQl2YXIgZGF0ZSA9IG5ldyBEYXRlKDIwMDksIDEyIC0gMSwgMjApOyAvLyBFbnN1cmUgZG91YmxlIGRpZ2l0cwoJCQl2YXIgZGF0ZUZvcm1hdCA9IHRoaXMuX2dldChpbnN0LCAnZGF0ZUZvcm1hdCcpOwoJCQlpZiAoZGF0ZUZvcm1hdC5tYXRjaCgvW0RNXS8pKSB7CgkJCQl2YXIgZmluZE1heCA9IGZ1bmN0aW9uKG5hbWVzKSB7CgkJCQkJdmFyIG1heCA9IDA7CgkJCQkJdmFyIG1heEkgPSAwOwoJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHsKCQkJCQkJaWYgKG5hbWVzW2ldLmxlbmd0aCA+IG1heCkgewoJCQkJCQkJbWF4ID0gbmFtZXNbaV0ubGVuZ3RoOwoJCQkJCQkJbWF4SSA9IGk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJcmV0dXJuIG1heEk7CgkJCQl9OwoJCQkJZGF0ZS5zZXRNb250aChmaW5kTWF4KHRoaXMuX2dldChpbnN0LCAoZGF0ZUZvcm1hdC5tYXRjaCgvTU0vKSA/CgkJCQkJJ21vbnRoTmFtZXMnIDogJ21vbnRoTmFtZXNTaG9ydCcpKSkpOwoJCQkJZGF0ZS5zZXREYXRlKGZpbmRNYXgodGhpcy5fZ2V0KGluc3QsIChkYXRlRm9ybWF0Lm1hdGNoKC9ERC8pID8KCQkJCQknZGF5TmFtZXMnIDogJ2RheU5hbWVzU2hvcnQnKSkpICsgMjAgLSBkYXRlLmdldERheSgpKTsKCQkJfQoJCQlpbnN0LmlucHV0LmF0dHIoJ3NpemUnLCB0aGlzLl9mb3JtYXREYXRlKGluc3QsIGRhdGUpLmxlbmd0aCk7CgkJfQoJfSwKCgkvKiBBdHRhY2ggYW4gaW5saW5lIGRhdGUgcGlja2VyIHRvIGEgZGl2LiAqLwoJX2lubGluZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgaW5zdCkgewoJCXZhciBkaXZTcGFuID0gJCh0YXJnZXQpOwoJCWlmIChkaXZTcGFuLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkKCQkJcmV0dXJuOwoJCWRpdlNwYW4uYWRkQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmFwcGVuZChpbnN0LmRwRGl2KS4KCQkJYmluZCgic2V0RGF0YS5kYXRlcGlja2VyIiwgZnVuY3Rpb24oZXZlbnQsIGtleSwgdmFsdWUpewoJCQkJaW5zdC5zZXR0aW5nc1trZXldID0gdmFsdWU7CgkJCX0pLmJpbmQoImdldERhdGEuZGF0ZXBpY2tlciIsIGZ1bmN0aW9uKGV2ZW50LCBrZXkpewoJCQkJcmV0dXJuIHRoaXMuX2dldChpbnN0LCBrZXkpOwoJCQl9KTsKCQkkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUsIGluc3QpOwoJCXRoaXMuX3NldERhdGUoaW5zdCwgdGhpcy5fZ2V0RGVmYXVsdERhdGUoaW5zdCksIHRydWUpOwoJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7CgkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCS8vSWYgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUsIGRpc2FibGUgdGhlIGRhdGVwaWNrZXIgYmVmb3JlIHNob3dpbmcgaXQgKHNlZSB0aWNrZXQgIzU2NjUpCgkJaWYoIGluc3Quc2V0dGluZ3MuZGlzYWJsZWQgKSB7CgkJCXRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKCB0YXJnZXQgKTsKCQl9CgkJLy8gU2V0IGRpc3BsYXk6YmxvY2sgaW4gcGxhY2Ugb2YgaW5zdC5kcERpdi5zaG93KCkgd2hpY2ggd29uJ3Qgd29yayBvbiBkaXNjb25uZWN0ZWQgZWxlbWVudHMKCQkvLyBodHRwOi8vYnVncy5qcXVlcnl1aS5jb20vdGlja2V0Lzc1NTIgLSBBIERhdGVwaWNrZXIgY3JlYXRlZCBvbiBhIGRldGFjaGVkIGRpdiBoYXMgemVybyBoZWlnaHQKCQlpbnN0LmRwRGl2LmNzcyggImRpc3BsYXkiLCAiYmxvY2siICk7Cgl9LAoKCS8qIFBvcC11cCB0aGUgZGF0ZSBwaWNrZXIgaW4gYSAiZGlhbG9nIiBib3guCgkgICBAcGFyYW0gIGlucHV0ICAgICBlbGVtZW50IC0gaWdub3JlZAoJICAgQHBhcmFtICBkYXRlICAgICAgc3RyaW5nIG9yIERhdGUgLSB0aGUgaW5pdGlhbCBkYXRlIHRvIGRpc3BsYXkKCSAgIEBwYXJhbSAgb25TZWxlY3QgIGZ1bmN0aW9uIC0gdGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIGRhdGUgaXMgc2VsZWN0ZWQKCSAgIEBwYXJhbSAgc2V0dGluZ3MgIG9iamVjdCAtIHVwZGF0ZSB0aGUgZGlhbG9nIGRhdGUgcGlja2VyIGluc3RhbmNlJ3Mgc2V0dGluZ3MgKGFub255bW91cyBvYmplY3QpCgkgICBAcGFyYW0gIHBvcyAgICAgICBpbnRbMl0gLSBjb29yZGluYXRlcyBmb3IgdGhlIGRpYWxvZydzIHBvc2l0aW9uIHdpdGhpbiB0aGUgc2NyZWVuIG9yCgkgICAgICAgICAgICAgICAgICAgICBldmVudCAtIHdpdGggeC95IGNvb3JkaW5hdGVzIG9yCgkgICAgICAgICAgICAgICAgICAgICBsZWF2ZSBlbXB0eSBmb3IgZGVmYXVsdCAoc2NyZWVuIGNlbnRyZSkKCSAgIEByZXR1cm4gdGhlIG1hbmFnZXIgb2JqZWN0ICovCglfZGlhbG9nRGF0ZXBpY2tlcjogZnVuY3Rpb24oaW5wdXQsIGRhdGUsIG9uU2VsZWN0LCBzZXR0aW5ncywgcG9zKSB7CgkJdmFyIGluc3QgPSB0aGlzLl9kaWFsb2dJbnN0OyAvLyBpbnRlcm5hbCBpbnN0YW5jZQoJCWlmICghaW5zdCkgewoJCQl0aGlzLnV1aWQgKz0gMTsKCQkJdmFyIGlkID0gJ2RwJyArIHRoaXMudXVpZDsKCQkJdGhpcy5fZGlhbG9nSW5wdXQgPSAkKCc8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IicgKyBpZCArCgkJCQknIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOyB0b3A6IC0xMDBweDsgd2lkdGg6IDBweDsiLz4nKTsKCQkJdGhpcy5fZGlhbG9nSW5wdXQua2V5ZG93bih0aGlzLl9kb0tleURvd24pOwoJCQkkKCdib2R5JykuYXBwZW5kKHRoaXMuX2RpYWxvZ0lucHV0KTsKCQkJaW5zdCA9IHRoaXMuX2RpYWxvZ0luc3QgPSB0aGlzLl9uZXdJbnN0KHRoaXMuX2RpYWxvZ0lucHV0LCBmYWxzZSk7CgkJCWluc3Quc2V0dGluZ3MgPSB7fTsKCQkJJC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLCBQUk9QX05BTUUsIGluc3QpOwoJCX0KCQlleHRlbmRSZW1vdmUoaW5zdC5zZXR0aW5ncywgc2V0dGluZ3MgfHwge30pOwoJCWRhdGUgPSAoZGF0ZSAmJiBkYXRlLmNvbnN0cnVjdG9yID09IERhdGUgPyB0aGlzLl9mb3JtYXREYXRlKGluc3QsIGRhdGUpIDogZGF0ZSk7CgkJdGhpcy5fZGlhbG9nSW5wdXQudmFsKGRhdGUpOwoKCQl0aGlzLl9wb3MgPSAocG9zID8gKHBvcy5sZW5ndGggPyBwb3MgOiBbcG9zLnBhZ2VYLCBwb3MucGFnZVldKSA6IG51bGwpOwoJCWlmICghdGhpcy5fcG9zKSB7CgkJCXZhciBicm93c2VyV2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7CgkJCXZhciBicm93c2VySGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsKCQkJdmFyIHNjcm9sbFggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7CgkJCXZhciBzY3JvbGxZID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKCQkJdGhpcy5fcG9zID0gLy8gc2hvdWxkIHVzZSBhY3R1YWwgd2lkdGgvaGVpZ2h0IGJlbG93CgkJCQlbKGJyb3dzZXJXaWR0aCAvIDIpIC0gMTAwICsgc2Nyb2xsWCwgKGJyb3dzZXJIZWlnaHQgLyAyKSAtIDE1MCArIHNjcm9sbFldOwoJCX0KCgkJLy8gbW92ZSBpbnB1dCBvbiBzY3JlZW4gZm9yIGZvY3VzLCBidXQgaGlkZGVuIGJlaGluZCBkaWFsb2cKCQl0aGlzLl9kaWFsb2dJbnB1dC5jc3MoJ2xlZnQnLCAodGhpcy5fcG9zWzBdICsgMjApICsgJ3B4JykuY3NzKCd0b3AnLCB0aGlzLl9wb3NbMV0gKyAncHgnKTsKCQlpbnN0LnNldHRpbmdzLm9uU2VsZWN0ID0gb25TZWxlY3Q7CgkJdGhpcy5faW5EaWFsb2cgPSB0cnVlOwoJCXRoaXMuZHBEaXYuYWRkQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpOwoJCXRoaXMuX3Nob3dEYXRlcGlja2VyKHRoaXMuX2RpYWxvZ0lucHV0WzBdKTsKCQlpZiAoJC5ibG9ja1VJKQoJCQkkLmJsb2NrVUkodGhpcy5kcERpdik7CgkJJC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLCBQUk9QX05BTUUsIGluc3QpOwoJCXJldHVybiB0aGlzOwoJfSwKCgkvKiBEZXRhY2ggYSBkYXRlcGlja2VyIGZyb20gaXRzIGNvbnRyb2wuCgkgICBAcGFyYW0gIHRhcmdldCAgICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuICovCglfZGVzdHJveURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCXZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpOwoJCXZhciBpbnN0ID0gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCQlpZiAoISR0YXJnZXQuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpKSB7CgkJCXJldHVybjsKCQl9CgkJdmFyIG5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJJC5yZW1vdmVEYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCQlpZiAobm9kZU5hbWUgPT0gJ2lucHV0JykgewoJCQlpbnN0LmFwcGVuZC5yZW1vdmUoKTsKCQkJaW5zdC50cmlnZ2VyLnJlbW92ZSgpOwoJCQkkdGFyZ2V0LnJlbW92ZUNsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS4KCQkJCXVuYmluZCgnZm9jdXMnLCB0aGlzLl9zaG93RGF0ZXBpY2tlcikuCgkJCQl1bmJpbmQoJ2tleWRvd24nLCB0aGlzLl9kb0tleURvd24pLgoJCQkJdW5iaW5kKCdrZXlwcmVzcycsIHRoaXMuX2RvS2V5UHJlc3MpLgoJCQkJdW5iaW5kKCdrZXl1cCcsIHRoaXMuX2RvS2V5VXApOwoJCX0gZWxzZSBpZiAobm9kZU5hbWUgPT0gJ2RpdicgfHwgbm9kZU5hbWUgPT0gJ3NwYW4nKQoJCQkkdGFyZ2V0LnJlbW92ZUNsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5lbXB0eSgpOwoJfSwKCgkvKiBFbmFibGUgdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi4KCSAgIEBwYXJhbSAgdGFyZ2V0ICAgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4gKi8KCV9lbmFibGVEYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQpIHsKCQl2YXIgJHRhcmdldCA9ICQodGFyZ2V0KTsKCQl2YXIgaW5zdCA9ICQuZGF0YSh0YXJnZXQsIFBST1BfTkFNRSk7CgkJaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkgewoJCQlyZXR1cm47CgkJfQoJCXZhciBub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCWlmIChub2RlTmFtZSA9PSAnaW5wdXQnKSB7CgkJCXRhcmdldC5kaXNhYmxlZCA9IGZhbHNlOwoJCQlpbnN0LnRyaWdnZXIuZmlsdGVyKCdidXR0b24nKS4KCQkJCWVhY2goZnVuY3Rpb24oKSB7IHRoaXMuZGlzYWJsZWQgPSBmYWxzZTsgfSkuZW5kKCkuCgkJCQlmaWx0ZXIoJ2ltZycpLmNzcyh7b3BhY2l0eTogJzEuMCcsIGN1cnNvcjogJyd9KTsKCQl9CgkJZWxzZSBpZiAobm9kZU5hbWUgPT0gJ2RpdicgfHwgbm9kZU5hbWUgPT0gJ3NwYW4nKSB7CgkJCXZhciBpbmxpbmUgPSAkdGFyZ2V0LmNoaWxkcmVuKCcuJyArIHRoaXMuX2lubGluZUNsYXNzKTsKCQkJaW5saW5lLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWRpc2FibGVkJyk7CgkJCWlubGluZS5maW5kKCJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhciIpLgoJCQkJcHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CgkJfQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAodGhpcy5fZGlzYWJsZWRJbnB1dHMsCgkJCWZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT0gdGFyZ2V0ID8gbnVsbCA6IHZhbHVlKTsgfSk7IC8vIGRlbGV0ZSBlbnRyeQoJfSwKCgkvKiBEaXNhYmxlIHRoZSBkYXRlIHBpY2tlciB0byBhIGpRdWVyeSBzZWxlY3Rpb24uCgkgICBAcGFyYW0gIHRhcmdldCAgICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuICovCglfZGlzYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCXZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpOwoJCXZhciBpbnN0ID0gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCQlpZiAoISR0YXJnZXQuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpKSB7CgkJCXJldHVybjsKCQl9CgkJdmFyIG5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJaWYgKG5vZGVOYW1lID09ICdpbnB1dCcpIHsKCQkJdGFyZ2V0LmRpc2FibGVkID0gdHJ1ZTsKCQkJaW5zdC50cmlnZ2VyLmZpbHRlcignYnV0dG9uJykuCgkJCQllYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLmRpc2FibGVkID0gdHJ1ZTsgfSkuZW5kKCkuCgkJCQlmaWx0ZXIoJ2ltZycpLmNzcyh7b3BhY2l0eTogJzAuNScsIGN1cnNvcjogJ2RlZmF1bHQnfSk7CgkJfQoJCWVsc2UgaWYgKG5vZGVOYW1lID09ICdkaXYnIHx8IG5vZGVOYW1lID09ICdzcGFuJykgewoJCQl2YXIgaW5saW5lID0gJHRhcmdldC5jaGlsZHJlbignLicgKyB0aGlzLl9pbmxpbmVDbGFzcyk7CgkJCWlubGluZS5jaGlsZHJlbigpLmFkZENsYXNzKCd1aS1zdGF0ZS1kaXNhYmxlZCcpOwoJCQlpbmxpbmUuZmluZCgic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXIiKS4KCQkJCXByb3AoImRpc2FibGVkIiwgdHJ1ZSk7CgkJfQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAodGhpcy5fZGlzYWJsZWRJbnB1dHMsCgkJCWZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT0gdGFyZ2V0ID8gbnVsbCA6IHZhbHVlKTsgfSk7IC8vIGRlbGV0ZSBlbnRyeQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzW3RoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aF0gPSB0YXJnZXQ7Cgl9LAoKCS8qIElzIHRoZSBmaXJzdCBmaWVsZCBpbiBhIGpRdWVyeSBjb2xsZWN0aW9uIGRpc2FibGVkIGFzIGEgZGF0ZXBpY2tlcj8KCSAgIEBwYXJhbSAgdGFyZ2V0ICAgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAgIEByZXR1cm4gYm9vbGVhbiAtIHRydWUgaWYgZGlzYWJsZWQsIGZhbHNlIGlmIGVuYWJsZWQgKi8KCV9pc0Rpc2FibGVkRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0KSB7CgkJaWYgKCF0YXJnZXQpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aDsgaSsrKSB7CgkJCWlmICh0aGlzLl9kaXNhYmxlZElucHV0c1tpXSA9PSB0YXJnZXQpCgkJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfSwKCgkvKiBSZXRyaWV2ZSB0aGUgaW5zdGFuY2UgZGF0YSBmb3IgdGhlIHRhcmdldCBjb250cm9sLgoJICAgQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAgIEByZXR1cm4gIG9iamVjdCAtIHRoZSBhc3NvY2lhdGVkIGluc3RhbmNlIGRhdGEKCSAgIEB0aHJvd3MgIGVycm9yIGlmIGEgalF1ZXJ5IHByb2JsZW0gZ2V0dGluZyBkYXRhICovCglfZ2V0SW5zdDogZnVuY3Rpb24odGFyZ2V0KSB7CgkJdHJ5IHsKCQkJcmV0dXJuICQuZGF0YSh0YXJnZXQsIFBST1BfTkFNRSk7CgkJfQoJCWNhdGNoIChlcnIpIHsKCQkJdGhyb3cgJ01pc3NpbmcgaW5zdGFuY2UgZGF0YSBmb3IgdGhpcyBkYXRlcGlja2VyJzsKCQl9Cgl9LAoKCS8qIFVwZGF0ZSBvciByZXRyaWV2ZSB0aGUgc2V0dGluZ3MgZm9yIGEgZGF0ZSBwaWNrZXIgYXR0YWNoZWQgdG8gYW4gaW5wdXQgZmllbGQgb3IgZGl2aXNpb24uCgkgICBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICAgQHBhcmFtICBuYW1lICAgIG9iamVjdCAtIHRoZSBuZXcgc2V0dGluZ3MgdG8gdXBkYXRlIG9yCgkgICAgICAgICAgICAgICAgICAgc3RyaW5nIC0gdGhlIG5hbWUgb2YgdGhlIHNldHRpbmcgdG8gY2hhbmdlIG9yIHJldHJpZXZlLAoJICAgICAgICAgICAgICAgICAgIHdoZW4gcmV0cmlldmluZyBhbHNvICdhbGwnIGZvciBhbGwgaW5zdGFuY2Ugc2V0dGluZ3Mgb3IKCSAgICAgICAgICAgICAgICAgICAnZGVmYXVsdHMnIGZvciBhbGwgZ2xvYmFsIGRlZmF1bHRzCgkgICBAcGFyYW0gIHZhbHVlICAgYW55IC0gdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcKCSAgICAgICAgICAgICAgICAgICAob21pdCBpZiBhYm92ZSBpcyBhbiBvYmplY3Qgb3IgdG8gcmV0cmlldmUgYSB2YWx1ZSkgKi8KCV9vcHRpb25EYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHZhbHVlKSB7CgkJdmFyIGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldCk7CgkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMiAmJiB0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJykgewoJCQlyZXR1cm4gKG5hbWUgPT0gJ2RlZmF1bHRzJyA/ICQuZXh0ZW5kKHt9LCAkLmRhdGVwaWNrZXIuX2RlZmF1bHRzKSA6CgkJCQkoaW5zdCA/IChuYW1lID09ICdhbGwnID8gJC5leHRlbmQoe30sIGluc3Quc2V0dGluZ3MpIDoKCQkJCXRoaXMuX2dldChpbnN0LCBuYW1lKSkgOiBudWxsKSk7CgkJfQoJCXZhciBzZXR0aW5ncyA9IG5hbWUgfHwge307CgkJaWYgKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnKSB7CgkJCXNldHRpbmdzID0ge307CgkJCXNldHRpbmdzW25hbWVdID0gdmFsdWU7CgkJfQoJCWlmIChpbnN0KSB7CgkJCWlmICh0aGlzLl9jdXJJbnN0ID09IGluc3QpIHsKCQkJCXRoaXMuX2hpZGVEYXRlcGlja2VyKCk7CgkJCX0KCQkJdmFyIGRhdGUgPSB0aGlzLl9nZXREYXRlRGF0ZXBpY2tlcih0YXJnZXQsIHRydWUpOwoJCQl2YXIgbWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgJ21pbicpOwoJCQl2YXIgbWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgJ21heCcpOwoJCQlleHRlbmRSZW1vdmUoaW5zdC5zZXR0aW5ncywgc2V0dGluZ3MpOwoJCQkvLyByZWZvcm1hdCB0aGUgb2xkIG1pbkRhdGUvbWF4RGF0ZSB2YWx1ZXMgaWYgZGF0ZUZvcm1hdCBjaGFuZ2VzIGFuZCBhIG5ldyBtaW5EYXRlL21heERhdGUgaXNuJ3QgcHJvdmlkZWQKCQkJaWYgKG1pbkRhdGUgIT09IG51bGwgJiYgc2V0dGluZ3NbJ2RhdGVGb3JtYXQnXSAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzWydtaW5EYXRlJ10gPT09IHVuZGVmaW5lZCkKCQkJCWluc3Quc2V0dGluZ3MubWluRGF0ZSA9IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCwgbWluRGF0ZSk7CgkJCWlmIChtYXhEYXRlICE9PSBudWxsICYmIHNldHRpbmdzWydkYXRlRm9ybWF0J10gIT09IHVuZGVmaW5lZCAmJiBzZXR0aW5nc1snbWF4RGF0ZSddID09PSB1bmRlZmluZWQpCgkJCQlpbnN0LnNldHRpbmdzLm1heERhdGUgPSB0aGlzLl9mb3JtYXREYXRlKGluc3QsIG1heERhdGUpOwoJCQl0aGlzLl9hdHRhY2htZW50cygkKHRhcmdldCksIGluc3QpOwoJCQl0aGlzLl9hdXRvU2l6ZShpbnN0KTsKCQkJdGhpcy5fc2V0RGF0ZShpbnN0LCBkYXRlKTsKCQkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpOwoJCX0KCX0sCgoJLy8gY2hhbmdlIG1ldGhvZCBkZXByZWNhdGVkCglfY2hhbmdlRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCB2YWx1ZSkgewoJCXRoaXMuX29wdGlvbkRhdGVwaWNrZXIodGFyZ2V0LCBuYW1lLCB2YWx1ZSk7Cgl9LAoKCS8qIFJlZHJhdyB0aGUgZGF0ZSBwaWNrZXIgYXR0YWNoZWQgdG8gYW4gaW5wdXQgZmllbGQgb3IgZGl2aXNpb24uCgkgICBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbiAqLwoJX3JlZnJlc2hEYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQpIHsKCQl2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0KTsKCQlpZiAoaW5zdCkgewoJCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpOwoJCX0KCX0sCgoJLyogU2V0IHRoZSBkYXRlcyBmb3IgYSBqUXVlcnkgc2VsZWN0aW9uLgoJICAgQHBhcmFtICB0YXJnZXQgICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgICBAcGFyYW0gIGRhdGUgICAgIERhdGUgLSB0aGUgbmV3IGRhdGUgKi8KCV9zZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBkYXRlKSB7CgkJdmFyIGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldCk7CgkJaWYgKGluc3QpIHsKCQkJdGhpcy5fc2V0RGF0ZShpbnN0LCBkYXRlKTsKCQkJdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTsKCQkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCX0KCX0sCgoJLyogR2V0IHRoZSBkYXRlKHMpIGZvciB0aGUgZmlyc3QgZW50cnkgaW4gYSBqUXVlcnkgc2VsZWN0aW9uLgoJICAgQHBhcmFtICB0YXJnZXQgICAgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAgIEBwYXJhbSAgbm9EZWZhdWx0ICBib29sZWFuIC0gdHJ1ZSBpZiBubyBkZWZhdWx0IGRhdGUgaXMgdG8gYmUgdXNlZAoJICAgQHJldHVybiBEYXRlIC0gdGhlIGN1cnJlbnQgZGF0ZSAqLwoJX2dldERhdGVEYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQsIG5vRGVmYXVsdCkgewoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpOwoJCWlmIChpbnN0ICYmICFpbnN0LmlubGluZSkKCQkJdGhpcy5fc2V0RGF0ZUZyb21GaWVsZChpbnN0LCBub0RlZmF1bHQpOwoJCXJldHVybiAoaW5zdCA/IHRoaXMuX2dldERhdGUoaW5zdCkgOiBudWxsKTsKCX0sCgoJLyogSGFuZGxlIGtleXN0cm9rZXMuICovCglfZG9LZXlEb3duOiBmdW5jdGlvbihldmVudCkgewoJCXZhciBpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGV2ZW50LnRhcmdldCk7CgkJdmFyIGhhbmRsZWQgPSB0cnVlOwoJCXZhciBpc1JUTCA9IGluc3QuZHBEaXYuaXMoJy51aS1kYXRlcGlja2VyLXJ0bCcpOwoJCWluc3QuX2tleUV2ZW50ID0gdHJ1ZTsKCQlpZiAoJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZykKCQkJc3dpdGNoIChldmVudC5rZXlDb2RlKSB7CgkJCQljYXNlIDk6ICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCQkJCQkJaGFuZGxlZCA9IGZhbHNlOwoJCQkJCQlicmVhazsgLy8gaGlkZSBvbiB0YWIgb3V0CgkJCQljYXNlIDEzOiB2YXIgc2VsID0gJCgndGQuJyArICQuZGF0ZXBpY2tlci5fZGF5T3ZlckNsYXNzICsgJzpub3QoLicgKwoJCQkJCQkJCQkkLmRhdGVwaWNrZXIuX2N1cnJlbnRDbGFzcyArICcpJywgaW5zdC5kcERpdik7CgkJCQkJCWlmIChzZWxbMF0pCgkJCQkJCQkkLmRhdGVwaWNrZXIuX3NlbGVjdERheShldmVudC50YXJnZXQsIGluc3Quc2VsZWN0ZWRNb250aCwgaW5zdC5zZWxlY3RlZFllYXIsIHNlbFswXSk7CgkJCQkJCQl2YXIgb25TZWxlY3QgPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnb25TZWxlY3QnKTsKCQkJCQkJCWlmIChvblNlbGVjdCkgewoJCQkJCQkJCXZhciBkYXRlU3RyID0gJC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKGluc3QpOwoKCQkJCQkJCQkvLyB0cmlnZ2VyIGN1c3RvbSBjYWxsYmFjawoJCQkJCQkJCW9uU2VsZWN0LmFwcGx5KChpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFswXSA6IG51bGwpLCBbZGF0ZVN0ciwgaW5zdF0pOwoJCQkJCQkJfQoJCQkJCQllbHNlCgkJCQkJCQkkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJCXJldHVybiBmYWxzZTsgLy8gZG9uJ3Qgc3VibWl0IHRoZSBmb3JtCgkJCQkJCWJyZWFrOyAvLyBzZWxlY3QgdGhlIHZhbHVlIG9uIGVudGVyCgkJCQljYXNlIDI3OiAkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJCWJyZWFrOyAvLyBoaWRlIG9uIGVzY2FwZQoJCQkJY2FzZSAzMzogJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGV2ZW50LmN0cmxLZXkgPwoJCQkJCQkJLSQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwQmlnTW9udGhzJykgOgoJCQkJCQkJLSQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwTW9udGhzJykpLCAnTScpOwoJCQkJCQlicmVhazsgLy8gcHJldmlvdXMgbW9udGgveWVhciBvbiBwYWdlIHVwLysgY3RybAoJCQkJY2FzZSAzNDogJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGV2ZW50LmN0cmxLZXkgPwoJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwQmlnTW9udGhzJykgOgoJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwTW9udGhzJykpLCAnTScpOwoJCQkJCQlicmVhazsgLy8gbmV4dCBtb250aC95ZWFyIG9uIHBhZ2UgZG93bi8rIGN0cmwKCQkJCWNhc2UgMzU6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICQuZGF0ZXBpY2tlci5fY2xlYXJEYXRlKGV2ZW50LnRhcmdldCk7CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgkJCQkJCWJyZWFrOyAvLyBjbGVhciBvbiBjdHJsIG9yIGNvbW1hbmQgK2VuZAoJCQkJY2FzZSAzNjogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJC5kYXRlcGlja2VyLl9nb3RvVG9kYXkoZXZlbnQudGFyZ2V0KTsKCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCQkJCQkJYnJlYWs7IC8vIGN1cnJlbnQgb24gY3RybCBvciBjb21tYW5kICtob21lCgkJCQljYXNlIDM3OiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAoaXNSVEwgPyArMSA6IC0xKSwgJ0QnKTsKCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCQkJCQkJLy8gLTEgZGF5IG9uIGN0cmwgb3IgY29tbWFuZCArbGVmdAoJCQkJCQlpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkpICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChldmVudC5jdHJsS2V5ID8KCQkJCQkJCQkJLSQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwQmlnTW9udGhzJykgOgoJCQkJCQkJCQktJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgJ3N0ZXBNb250aHMnKSksICdNJyk7CgkJCQkJCS8vIG5leHQgbW9udGgveWVhciBvbiBhbHQgK2xlZnQgb24gTWFjCgkJCQkJCWJyZWFrOwoJCQkJY2FzZSAzODogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgLTcsICdEJyk7CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgkJCQkJCWJyZWFrOyAvLyAtMSB3ZWVrIG9uIGN0cmwgb3IgY29tbWFuZCArdXAKCQkJCWNhc2UgMzk6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChpc1JUTCA/IC0xIDogKzEpLCAnRCcpOwoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQkvLyArMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtyaWdodAoJCQkJCQlpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkpICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChldmVudC5jdHJsS2V5ID8KCQkJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdzdGVwQmlnTW9udGhzJykgOgoJCQkJCQkJCQkrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgJ3N0ZXBNb250aHMnKSksICdNJyk7CgkJCQkJCS8vIG5leHQgbW9udGgveWVhciBvbiBhbHQgK3JpZ2h0CgkJCQkJCWJyZWFrOwoJCQkJY2FzZSA0MDogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKzcsICdEJyk7CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgkJCQkJCWJyZWFrOyAvLyArMSB3ZWVrIG9uIGN0cmwgb3IgY29tbWFuZCArZG93bgoJCQkJZGVmYXVsdDogaGFuZGxlZCA9IGZhbHNlOwoJCQl9CgkJZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSAzNiAmJiBldmVudC5jdHJsS2V5KSAvLyBkaXNwbGF5IHRoZSBkYXRlIHBpY2tlciBvbiBjdHJsK2hvbWUKCQkJJC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlcih0aGlzKTsKCQllbHNlIHsKCQkJaGFuZGxlZCA9IGZhbHNlOwoJCX0KCQlpZiAoaGFuZGxlZCkgewoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQlldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKCQl9Cgl9LAoKCS8qIEZpbHRlciBlbnRlcmVkIGNoYXJhY3RlcnMgLSBiYXNlZCBvbiBkYXRlIGZvcm1hdC4gKi8KCV9kb0tleVByZXNzOiBmdW5jdGlvbihldmVudCkgewoJCXZhciBpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGV2ZW50LnRhcmdldCk7CgkJaWYgKCQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdjb25zdHJhaW5JbnB1dCcpKSB7CgkJCXZhciBjaGFycyA9ICQuZGF0ZXBpY2tlci5fcG9zc2libGVDaGFycygkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnZGF0ZUZvcm1hdCcpKTsKCQkJdmFyIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQuY2hhckNvZGUgPT0gdW5kZWZpbmVkID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LmNoYXJDb2RlKTsKCQkJcmV0dXJuIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCAoY2hyIDwgJyAnIHx8ICFjaGFycyB8fCBjaGFycy5pbmRleE9mKGNocikgPiAtMSk7CgkJfQoJfSwKCgkvKiBTeW5jaHJvbmlzZSBtYW51YWwgZW50cnkgYW5kIGZpZWxkL2FsdGVybmF0ZSBmaWVsZC4gKi8KCV9kb0tleVVwOiBmdW5jdGlvbihldmVudCkgewoJCXZhciBpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGV2ZW50LnRhcmdldCk7CgkJaWYgKGluc3QuaW5wdXQudmFsKCkgIT0gaW5zdC5sYXN0VmFsKSB7CgkJCXRyeSB7CgkJCQl2YXIgZGF0ZSA9ICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgJ2RhdGVGb3JtYXQnKSwKCQkJCQkoaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsKSwKCQkJCQkkLmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7CgkJCQlpZiAoZGF0ZSkgeyAvLyBvbmx5IGlmIHZhbGlkCgkJCQkJJC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKGluc3QpOwoJCQkJCSQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCQkJCSQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTsKCQkJCX0KCQkJfQoJCQljYXRjaCAoZXJyKSB7CgkJCQkkLmRhdGVwaWNrZXIubG9nKGVycik7CgkJCX0KCQl9CgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qIFBvcC11cCB0aGUgZGF0ZSBwaWNrZXIgZm9yIGEgZ2l2ZW4gaW5wdXQgZmllbGQuCgkgICBJZiBmYWxzZSByZXR1cm5lZCBmcm9tIGJlZm9yZVNob3cgZXZlbnQgaGFuZGxlciBkbyBub3Qgc2hvdy4KCSAgIEBwYXJhbSAgaW5wdXQgIGVsZW1lbnQgLSB0aGUgaW5wdXQgZmllbGQgYXR0YWNoZWQgdG8gdGhlIGRhdGUgcGlja2VyIG9yCgkgICAgICAgICAgICAgICAgICBldmVudCAtIGlmIHRyaWdnZXJlZCBieSBmb2N1cyAqLwoJX3Nob3dEYXRlcGlja2VyOiBmdW5jdGlvbihpbnB1dCkgewoJCWlucHV0ID0gaW5wdXQudGFyZ2V0IHx8IGlucHV0OwoJCWlmIChpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9ICdpbnB1dCcpIC8vIGZpbmQgZnJvbSBidXR0b24vaW1hZ2UgdHJpZ2dlcgoJCQlpbnB1dCA9ICQoJ2lucHV0JywgaW5wdXQucGFyZW50Tm9kZSlbMF07CgkJaWYgKCQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoaW5wdXQpIHx8ICQuZGF0ZXBpY2tlci5fbGFzdElucHV0ID09IGlucHV0KSAvLyBhbHJlYWR5IGhlcmUKCQkJcmV0dXJuOwoJCXZhciBpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGlucHV0KTsKCQlpZiAoJC5kYXRlcGlja2VyLl9jdXJJbnN0ICYmICQuZGF0ZXBpY2tlci5fY3VySW5zdCAhPSBpbnN0KSB7CgkJCSQuZGF0ZXBpY2tlci5fY3VySW5zdC5kcERpdi5zdG9wKHRydWUsIHRydWUpOwoJCQlpZiAoIGluc3QgJiYgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyApIHsKCQkJCSQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoICQuZGF0ZXBpY2tlci5fY3VySW5zdC5pbnB1dFswXSApOwoJCQl9CgkJfQoJCXZhciBiZWZvcmVTaG93ID0gJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgJ2JlZm9yZVNob3cnKTsKCQl2YXIgYmVmb3JlU2hvd1NldHRpbmdzID0gYmVmb3JlU2hvdyA/IGJlZm9yZVNob3cuYXBwbHkoaW5wdXQsIFtpbnB1dCwgaW5zdF0pIDoge307CgkJaWYoYmVmb3JlU2hvd1NldHRpbmdzID09PSBmYWxzZSl7CgkJCS8vZmFsc2UKCQkJcmV0dXJuOwoJCX0KCQlleHRlbmRSZW1vdmUoaW5zdC5zZXR0aW5ncywgYmVmb3JlU2hvd1NldHRpbmdzKTsKCQlpbnN0Lmxhc3RWYWwgPSBudWxsOwoJCSQuZGF0ZXBpY2tlci5fbGFzdElucHV0ID0gaW5wdXQ7CgkJJC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKGluc3QpOwoJCWlmICgkLmRhdGVwaWNrZXIuX2luRGlhbG9nKSAvLyBoaWRlIGN1cnNvcgoJCQlpbnB1dC52YWx1ZSA9ICcnOwoJCWlmICghJC5kYXRlcGlja2VyLl9wb3MpIHsgLy8gcG9zaXRpb24gYmVsb3cgaW5wdXQKCQkJJC5kYXRlcGlja2VyLl9wb3MgPSAkLmRhdGVwaWNrZXIuX2ZpbmRQb3MoaW5wdXQpOwoJCQkkLmRhdGVwaWNrZXIuX3Bvc1sxXSArPSBpbnB1dC5vZmZzZXRIZWlnaHQ7IC8vIGFkZCB0aGUgaGVpZ2h0CgkJfQoJCXZhciBpc0ZpeGVkID0gZmFsc2U7CgkJJChpbnB1dCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKSB7CgkJCWlzRml4ZWQgfD0gJCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJykgPT0gJ2ZpeGVkJzsKCQkJcmV0dXJuICFpc0ZpeGVkOwoJCX0pOwoJCXZhciBvZmZzZXQgPSB7bGVmdDogJC5kYXRlcGlja2VyLl9wb3NbMF0sIHRvcDogJC5kYXRlcGlja2VyLl9wb3NbMV19OwoJCSQuZGF0ZXBpY2tlci5fcG9zID0gbnVsbDsKCQkvL3RvIGF2b2lkIGZsYXNoZXMgb24gRmlyZWZveAoJCWluc3QuZHBEaXYuZW1wdHkoKTsKCQkvLyBkZXRlcm1pbmUgc2l6aW5nIG9mZnNjcmVlbgoJCWluc3QuZHBEaXYuY3NzKHtwb3NpdGlvbjogJ2Fic29sdXRlJywgZGlzcGxheTogJ2Jsb2NrJywgdG9wOiAnLTEwMDBweCd9KTsKCQkkLmRhdGVwaWNrZXIuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7CgkJLy8gZml4IHdpZHRoIGZvciBkeW5hbWljIG51bWJlciBvZiBkYXRlIHBpY2tlcnMKCQkvLyBhbmQgYWRqdXN0IHBvc2l0aW9uIGJlZm9yZSBzaG93aW5nCgkJb2Zmc2V0ID0gJC5kYXRlcGlja2VyLl9jaGVja09mZnNldChpbnN0LCBvZmZzZXQsIGlzRml4ZWQpOwoJCWluc3QuZHBEaXYuY3NzKHtwb3NpdGlvbjogKCQuZGF0ZXBpY2tlci5faW5EaWFsb2cgJiYgJC5ibG9ja1VJID8KCQkJJ3N0YXRpYycgOiAoaXNGaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnKSksIGRpc3BsYXk6ICdub25lJywKCQkJbGVmdDogb2Zmc2V0LmxlZnQgKyAncHgnLCB0b3A6IG9mZnNldC50b3AgKyAncHgnfSk7CgkJaWYgKCFpbnN0LmlubGluZSkgewoJCQl2YXIgc2hvd0FuaW0gPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnc2hvd0FuaW0nKTsKCQkJdmFyIGR1cmF0aW9uID0gJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgJ2R1cmF0aW9uJyk7CgkJCXZhciBwb3N0UHJvY2VzcyA9IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGNvdmVyID0gaW5zdC5kcERpdi5maW5kKCdpZnJhbWUudWktZGF0ZXBpY2tlci1jb3ZlcicpOyAvLyBJRTYtIG9ubHkKCQkJCWlmKCAhISBjb3Zlci5sZW5ndGggKXsKCQkJCQl2YXIgYm9yZGVycyA9ICQuZGF0ZXBpY2tlci5fZ2V0Qm9yZGVycyhpbnN0LmRwRGl2KTsKCQkJCQljb3Zlci5jc3Moe2xlZnQ6IC1ib3JkZXJzWzBdLCB0b3A6IC1ib3JkZXJzWzFdLAoJCQkJCQl3aWR0aDogaW5zdC5kcERpdi5vdXRlcldpZHRoKCksIGhlaWdodDogaW5zdC5kcERpdi5vdXRlckhlaWdodCgpfSk7CgkJCQl9CgkJCX07CgkJCWluc3QuZHBEaXYuekluZGV4KCQoaW5wdXQpLnpJbmRleCgpKzEpOwoJCQkkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nID0gdHJ1ZTsKCgkJCS8vIERFUFJFQ0FURUQ6IGFmdGVyIEJDIGZvciAxLjgueCAkLmVmZmVjdHNbIHNob3dBbmltIF0gaXMgbm90IG5lZWRlZAoJCQlpZiAoICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIHNob3dBbmltIF0gfHwgJC5lZmZlY3RzWyBzaG93QW5pbSBdICkgKQoJCQkJaW5zdC5kcERpdi5zaG93KHNob3dBbmltLCAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnc2hvd09wdGlvbnMnKSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzKTsKCQkJZWxzZQoJCQkJaW5zdC5kcERpdltzaG93QW5pbSB8fCAnc2hvdyddKChzaG93QW5pbSA/IGR1cmF0aW9uIDogbnVsbCksIHBvc3RQcm9jZXNzKTsKCQkJaWYgKCFzaG93QW5pbSB8fCAhZHVyYXRpb24pCgkJCQlwb3N0UHJvY2VzcygpOwoJCQlpZiAoaW5zdC5pbnB1dC5pcygnOnZpc2libGUnKSAmJiAhaW5zdC5pbnB1dC5pcygnOmRpc2FibGVkJykpCgkJCQlpbnN0LmlucHV0LmZvY3VzKCk7CgkJCSQuZGF0ZXBpY2tlci5fY3VySW5zdCA9IGluc3Q7CgkJfQoJfSwKCgkvKiBHZW5lcmF0ZSB0aGUgZGF0ZSBwaWNrZXIgY29udGVudC4gKi8KCV91cGRhdGVEYXRlcGlja2VyOiBmdW5jdGlvbihpbnN0KSB7CgkJdGhpcy5tYXhSb3dzID0gNDsgLy9SZXNldCB0aGUgbWF4IG51bWJlciBvZiByb3dzIGJlaW5nIGRpc3BsYXllZCAoc2VlICM3MDQzKQoJCXZhciBib3JkZXJzID0gJC5kYXRlcGlja2VyLl9nZXRCb3JkZXJzKGluc3QuZHBEaXYpOwoJCWluc3RBY3RpdmUgPSBpbnN0OyAvLyBmb3IgZGVsZWdhdGUgaG92ZXIgZXZlbnRzCgkJaW5zdC5kcERpdi5lbXB0eSgpLmFwcGVuZCh0aGlzLl9nZW5lcmF0ZUhUTUwoaW5zdCkpOwoJCXRoaXMuX2F0dGFjaEhhbmRsZXJzKGluc3QpOwoJCXZhciBjb3ZlciA9IGluc3QuZHBEaXYuZmluZCgnaWZyYW1lLnVpLWRhdGVwaWNrZXItY292ZXInKTsgLy8gSUU2LSBvbmx5CgkJaWYoICEhY292ZXIubGVuZ3RoICl7IC8vYXZvaWQgY2FsbCB0byBvdXRlclhYWFgoKSB3aGVuIG5vdCBpbiBJRTYKCQkJY292ZXIuY3NzKHtsZWZ0OiAtYm9yZGVyc1swXSwgdG9wOiAtYm9yZGVyc1sxXSwgd2lkdGg6IGluc3QuZHBEaXYub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGluc3QuZHBEaXYub3V0ZXJIZWlnaHQoKX0pCgkJfQoJCWluc3QuZHBEaXYuZmluZCgnLicgKyB0aGlzLl9kYXlPdmVyQ2xhc3MgKyAnIGEnKS5tb3VzZW92ZXIoKTsKCQl2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoaW5zdCk7CgkJdmFyIGNvbHMgPSBudW1Nb250aHNbMV07CgkJdmFyIHdpZHRoID0gMTc7CgkJaW5zdC5kcERpdi5yZW1vdmVDbGFzcygndWktZGF0ZXBpY2tlci1tdWx0aS0yIHVpLWRhdGVwaWNrZXItbXVsdGktMyB1aS1kYXRlcGlja2VyLW11bHRpLTQnKS53aWR0aCgnJyk7CgkJaWYgKGNvbHMgPiAxKQoJCQlpbnN0LmRwRGl2LmFkZENsYXNzKCd1aS1kYXRlcGlja2VyLW11bHRpLScgKyBjb2xzKS5jc3MoJ3dpZHRoJywgKHdpZHRoICogY29scykgKyAnZW0nKTsKCQlpbnN0LmRwRGl2WyhudW1Nb250aHNbMF0gIT0gMSB8fCBudW1Nb250aHNbMV0gIT0gMSA/ICdhZGQnIDogJ3JlbW92ZScpICsKCQkJJ0NsYXNzJ10oJ3VpLWRhdGVwaWNrZXItbXVsdGknKTsKCQlpbnN0LmRwRGl2Wyh0aGlzLl9nZXQoaW5zdCwgJ2lzUlRMJykgPyAnYWRkJyA6ICdyZW1vdmUnKSArCgkJCSdDbGFzcyddKCd1aS1kYXRlcGlja2VyLXJ0bCcpOwoJCWlmIChpbnN0ID09ICQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJiAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmIGluc3QuaW5wdXQgJiYKCQkJCS8vICM2Njk0IC0gZG9uJ3QgZm9jdXMgdGhlIGlucHV0IGlmIGl0J3MgYWxyZWFkeSBmb2N1c2VkCgkJCQkvLyB0aGlzIGJyZWFrcyB0aGUgY2hhbmdlIGV2ZW50IGluIElFCgkJCQlpbnN0LmlucHV0LmlzKCc6dmlzaWJsZScpICYmICFpbnN0LmlucHV0LmlzKCc6ZGlzYWJsZWQnKSAmJiBpbnN0LmlucHV0WzBdICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpCgkJCWluc3QuaW5wdXQuZm9jdXMoKTsKCQkvLyBkZWZmZXJlZCByZW5kZXIgb2YgdGhlIHllYXJzIHNlbGVjdCAodG8gYXZvaWQgZmxhc2hlcyBvbiBGaXJlZm94KQoJCWlmKCBpbnN0LnllYXJzaHRtbCApewoJCQl2YXIgb3JpZ3llYXJzaHRtbCA9IGluc3QueWVhcnNodG1sOwoJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgkJCQkvL2Fzc3VyZSB0aGF0IGluc3QueWVhcnNodG1sIGRpZG4ndCBjaGFuZ2UuCgkJCQlpZiggb3JpZ3llYXJzaHRtbCA9PT0gaW5zdC55ZWFyc2h0bWwgJiYgaW5zdC55ZWFyc2h0bWwgKXsKCQkJCQlpbnN0LmRwRGl2LmZpbmQoJ3NlbGVjdC51aS1kYXRlcGlja2VyLXllYXI6Zmlyc3QnKS5yZXBsYWNlV2l0aChpbnN0LnllYXJzaHRtbCk7CgkJCQl9CgkJCQlvcmlneWVhcnNodG1sID0gaW5zdC55ZWFyc2h0bWwgPSBudWxsOwoJCQl9LCAwKTsKCQl9Cgl9LAoKCS8qIFJldHJpZXZlIHRoZSBzaXplIG9mIGxlZnQgYW5kIHRvcCBib3JkZXJzIGZvciBhbiBlbGVtZW50LgoJICAgQHBhcmFtICBlbGVtICAoalF1ZXJ5IG9iamVjdCkgdGhlIGVsZW1lbnQgb2YgaW50ZXJlc3QKCSAgIEByZXR1cm4gIChudW1iZXJbMl0pIHRoZSBsZWZ0IGFuZCB0b3AgYm9yZGVycyAqLwoJX2dldEJvcmRlcnM6IGZ1bmN0aW9uKGVsZW0pIHsKCQl2YXIgY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7CgkJCXJldHVybiB7dGhpbjogMSwgbWVkaXVtOiAyLCB0aGljazogM31bdmFsdWVdIHx8IHZhbHVlOwoJCX07CgkJcmV0dXJuIFtwYXJzZUZsb2F0KGNvbnZlcnQoZWxlbS5jc3MoJ2JvcmRlci1sZWZ0LXdpZHRoJykpKSwKCQkJcGFyc2VGbG9hdChjb252ZXJ0KGVsZW0uY3NzKCdib3JkZXItdG9wLXdpZHRoJykpKV07Cgl9LAoKCS8qIENoZWNrIHBvc2l0aW9uaW5nIHRvIHJlbWFpbiBvbiBzY3JlZW4uICovCglfY2hlY2tPZmZzZXQ6IGZ1bmN0aW9uKGluc3QsIG9mZnNldCwgaXNGaXhlZCkgewoJCXZhciBkcFdpZHRoID0gaW5zdC5kcERpdi5vdXRlcldpZHRoKCk7CgkJdmFyIGRwSGVpZ2h0ID0gaW5zdC5kcERpdi5vdXRlckhlaWdodCgpOwoJCXZhciBpbnB1dFdpZHRoID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQub3V0ZXJXaWR0aCgpIDogMDsKCQl2YXIgaW5wdXRIZWlnaHQgPSBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC5vdXRlckhlaWdodCgpIDogMDsKCQl2YXIgdmlld1dpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoICsgKGlzRml4ZWQgPyAwIDogJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpKTsKCQl2YXIgdmlld0hlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgKyAoaXNGaXhlZCA/IDAgOiAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSk7CgoJCW9mZnNldC5sZWZ0IC09ICh0aGlzLl9nZXQoaW5zdCwgJ2lzUlRMJykgPyAoZHBXaWR0aCAtIGlucHV0V2lkdGgpIDogMCk7CgkJb2Zmc2V0LmxlZnQgLT0gKGlzRml4ZWQgJiYgb2Zmc2V0LmxlZnQgPT0gaW5zdC5pbnB1dC5vZmZzZXQoKS5sZWZ0KSA/ICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSA6IDA7CgkJb2Zmc2V0LnRvcCAtPSAoaXNGaXhlZCAmJiBvZmZzZXQudG9wID09IChpbnN0LmlucHV0Lm9mZnNldCgpLnRvcCArIGlucHV0SGVpZ2h0KSkgPyAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSA6IDA7CgoJCS8vIG5vdyBjaGVjayBpZiBkYXRlcGlja2VyIGlzIHNob3dpbmcgb3V0c2lkZSB3aW5kb3cgdmlld3BvcnQgLSBtb3ZlIHRvIGEgYmV0dGVyIHBsYWNlIGlmIHNvLgoJCW9mZnNldC5sZWZ0IC09IE1hdGgubWluKG9mZnNldC5sZWZ0LCAob2Zmc2V0LmxlZnQgKyBkcFdpZHRoID4gdmlld1dpZHRoICYmIHZpZXdXaWR0aCA+IGRwV2lkdGgpID8KCQkJTWF0aC5hYnMob2Zmc2V0LmxlZnQgKyBkcFdpZHRoIC0gdmlld1dpZHRoKSA6IDApOwoJCW9mZnNldC50b3AgLT0gTWF0aC5taW4ob2Zmc2V0LnRvcCwgKG9mZnNldC50b3AgKyBkcEhlaWdodCA+IHZpZXdIZWlnaHQgJiYgdmlld0hlaWdodCA+IGRwSGVpZ2h0KSA/CgkJCU1hdGguYWJzKGRwSGVpZ2h0ICsgaW5wdXRIZWlnaHQpIDogMCk7CgoJCXJldHVybiBvZmZzZXQ7Cgl9LAoKCS8qIEZpbmQgYW4gb2JqZWN0J3MgcG9zaXRpb24gb24gdGhlIHNjcmVlbi4gKi8KCV9maW5kUG9zOiBmdW5jdGlvbihvYmopIHsKCQl2YXIgaW5zdCA9IHRoaXMuX2dldEluc3Qob2JqKTsKCQl2YXIgaXNSVEwgPSB0aGlzLl9nZXQoaW5zdCwgJ2lzUlRMJyk7CgkJd2hpbGUgKG9iaiAmJiAob2JqLnR5cGUgPT0gJ2hpZGRlbicgfHwgb2JqLm5vZGVUeXBlICE9IDEgfHwgJC5leHByLmZpbHRlcnMuaGlkZGVuKG9iaikpKSB7CgkJCW9iaiA9IG9ialtpc1JUTCA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJ107CgkJfQoJCXZhciBwb3NpdGlvbiA9ICQob2JqKS5vZmZzZXQoKTsKCQlyZXR1cm4gW3Bvc2l0aW9uLmxlZnQsIHBvc2l0aW9uLnRvcF07Cgl9LAoKCS8qIEhpZGUgdGhlIGRhdGUgcGlja2VyIGZyb20gdmlldy4KCSAgIEBwYXJhbSAgaW5wdXQgIGVsZW1lbnQgLSB0aGUgaW5wdXQgZmllbGQgYXR0YWNoZWQgdG8gdGhlIGRhdGUgcGlja2VyICovCglfaGlkZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGlucHV0KSB7CgkJdmFyIGluc3QgPSB0aGlzLl9jdXJJbnN0OwoJCWlmICghaW5zdCB8fCAoaW5wdXQgJiYgaW5zdCAhPSAkLmRhdGEoaW5wdXQsIFBST1BfTkFNRSkpKQoJCQlyZXR1cm47CgkJaWYgKHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nKSB7CgkJCXZhciBzaG93QW5pbSA9IHRoaXMuX2dldChpbnN0LCAnc2hvd0FuaW0nKTsKCQkJdmFyIGR1cmF0aW9uID0gdGhpcy5fZ2V0KGluc3QsICdkdXJhdGlvbicpOwoJCQl2YXIgcG9zdFByb2Nlc3MgPSBmdW5jdGlvbigpIHsKCQkJCSQuZGF0ZXBpY2tlci5fdGlkeURpYWxvZyhpbnN0KTsKCQkJfTsKCgkJCS8vIERFUFJFQ0FURUQ6IGFmdGVyIEJDIGZvciAxLjgueCAkLmVmZmVjdHNbIHNob3dBbmltIF0gaXMgbm90IG5lZWRlZAoJCQlpZiAoICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIHNob3dBbmltIF0gfHwgJC5lZmZlY3RzWyBzaG93QW5pbSBdICkgKQoJCQkJaW5zdC5kcERpdi5oaWRlKHNob3dBbmltLCAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnc2hvd09wdGlvbnMnKSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzKTsKCQkJZWxzZQoJCQkJaW5zdC5kcERpdlsoc2hvd0FuaW0gPT0gJ3NsaWRlRG93bicgPyAnc2xpZGVVcCcgOgoJCQkJCShzaG93QW5pbSA9PSAnZmFkZUluJyA/ICdmYWRlT3V0JyA6ICdoaWRlJykpXSgoc2hvd0FuaW0gPyBkdXJhdGlvbiA6IG51bGwpLCBwb3N0UHJvY2Vzcyk7CgkJCWlmICghc2hvd0FuaW0pCgkJCQlwb3N0UHJvY2VzcygpOwoJCQl0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9IGZhbHNlOwoJCQl2YXIgb25DbG9zZSA9IHRoaXMuX2dldChpbnN0LCAnb25DbG9zZScpOwoJCQlpZiAob25DbG9zZSkKCQkJCW9uQ2xvc2UuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksCgkJCQkJWyhpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC52YWwoKSA6ICcnKSwgaW5zdF0pOwoJCQl0aGlzLl9sYXN0SW5wdXQgPSBudWxsOwoJCQlpZiAodGhpcy5faW5EaWFsb2cpIHsKCQkJCXRoaXMuX2RpYWxvZ0lucHV0LmNzcyh7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAnMCcsIHRvcDogJy0xMDBweCcgfSk7CgkJCQlpZiAoJC5ibG9ja1VJKSB7CgkJCQkJJC51bmJsb2NrVUkoKTsKCQkJCQkkKCdib2R5JykuYXBwZW5kKHRoaXMuZHBEaXYpOwoJCQkJfQoJCQl9CgkJCXRoaXMuX2luRGlhbG9nID0gZmFsc2U7CgkJfQoJfSwKCgkvKiBUaWR5IHVwIGFmdGVyIGEgZGlhbG9nIGRpc3BsYXkuICovCglfdGlkeURpYWxvZzogZnVuY3Rpb24oaW5zdCkgewoJCWluc3QuZHBEaXYucmVtb3ZlQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLnVuYmluZCgnLnVpLWRhdGVwaWNrZXItY2FsZW5kYXInKTsKCX0sCgoJLyogQ2xvc2UgZGF0ZSBwaWNrZXIgaWYgY2xpY2tlZCBlbHNld2hlcmUuICovCglfY2hlY2tFeHRlcm5hbENsaWNrOiBmdW5jdGlvbihldmVudCkgewoJCWlmICghJC5kYXRlcGlja2VyLl9jdXJJbnN0KQoJCQlyZXR1cm47CgoJCXZhciAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLAoJCQlpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCR0YXJnZXRbMF0pOwoKCQlpZiAoICggKCAkdGFyZ2V0WzBdLmlkICE9ICQuZGF0ZXBpY2tlci5fbWFpbkRpdklkICYmCgkJCQkkdGFyZ2V0LnBhcmVudHMoJyMnICsgJC5kYXRlcGlja2VyLl9tYWluRGl2SWQpLmxlbmd0aCA9PSAwICYmCgkJCQkhJHRhcmdldC5oYXNDbGFzcygkLmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lKSAmJgoJCQkJISR0YXJnZXQuY2xvc2VzdCgiLiIgKyAkLmRhdGVwaWNrZXIuX3RyaWdnZXJDbGFzcykubGVuZ3RoICYmCgkJCQkkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmICEoJC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiAkLmJsb2NrVUkpICkgKSB8fAoJCQkoICR0YXJnZXQuaGFzQ2xhc3MoJC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSkgJiYgJC5kYXRlcGlja2VyLl9jdXJJbnN0ICE9IGluc3QgKSApCgkJCSQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCX0sCgoJLyogQWRqdXN0IG9uZSBvZiB0aGUgZGF0ZSBzdWItZmllbGRzLiAqLwoJX2FkanVzdERhdGU6IGZ1bmN0aW9uKGlkLCBvZmZzZXQsIHBlcmlvZCkgewoJCXZhciB0YXJnZXQgPSAkKGlkKTsKCQl2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTsKCQlpZiAodGhpcy5faXNEaXNhYmxlZERhdGVwaWNrZXIodGFyZ2V0WzBdKSkgewoJCQlyZXR1cm47CgkJfQoJCXRoaXMuX2FkanVzdEluc3REYXRlKGluc3QsIG9mZnNldCArCgkJCShwZXJpb2QgPT0gJ00nID8gdGhpcy5fZ2V0KGluc3QsICdzaG93Q3VycmVudEF0UG9zJykgOiAwKSwgLy8gdW5kbyBwb3NpdGlvbmluZwoJCQlwZXJpb2QpOwoJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7Cgl9LAoKCS8qIEFjdGlvbiBmb3IgY3VycmVudCBsaW5rLiAqLwoJX2dvdG9Ub2RheTogZnVuY3Rpb24oaWQpIHsKCQl2YXIgdGFyZ2V0ID0gJChpZCk7CgkJdmFyIGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgkJaWYgKHRoaXMuX2dldChpbnN0LCAnZ290b0N1cnJlbnQnKSAmJiBpbnN0LmN1cnJlbnREYXkpIHsKCQkJaW5zdC5zZWxlY3RlZERheSA9IGluc3QuY3VycmVudERheTsKCQkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aDsKCQkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gaW5zdC5jdXJyZW50WWVhcjsKCQl9CgkJZWxzZSB7CgkJCXZhciBkYXRlID0gbmV3IERhdGUoKTsKCQkJaW5zdC5zZWxlY3RlZERheSA9IGRhdGUuZ2V0RGF0ZSgpOwoJCQlpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGRhdGUuZ2V0TW9udGgoKTsKCQkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCX0KCQl0aGlzLl9ub3RpZnlDaGFuZ2UoaW5zdCk7CgkJdGhpcy5fYWRqdXN0RGF0ZSh0YXJnZXQpOwoJfSwKCgkvKiBBY3Rpb24gZm9yIHNlbGVjdGluZyBhIG5ldyBtb250aC95ZWFyLiAqLwoJX3NlbGVjdE1vbnRoWWVhcjogZnVuY3Rpb24oaWQsIHNlbGVjdCwgcGVyaW9kKSB7CgkJdmFyIHRhcmdldCA9ICQoaWQpOwoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXRbMF0pOwoJCWluc3RbJ3NlbGVjdGVkJyArIChwZXJpb2QgPT0gJ00nID8gJ01vbnRoJyA6ICdZZWFyJyldID0KCQlpbnN0WydkcmF3JyArIChwZXJpb2QgPT0gJ00nID8gJ01vbnRoJyA6ICdZZWFyJyldID0KCQkJcGFyc2VJbnQoc2VsZWN0Lm9wdGlvbnNbc2VsZWN0LnNlbGVjdGVkSW5kZXhdLnZhbHVlLDEwKTsKCQl0aGlzLl9ub3RpZnlDaGFuZ2UoaW5zdCk7CgkJdGhpcy5fYWRqdXN0RGF0ZSh0YXJnZXQpOwoJfSwKCgkvKiBBY3Rpb24gZm9yIHNlbGVjdGluZyBhIGRheS4gKi8KCV9zZWxlY3REYXk6IGZ1bmN0aW9uKGlkLCBtb250aCwgeWVhciwgdGQpIHsKCQl2YXIgdGFyZ2V0ID0gJChpZCk7CgkJaWYgKCQodGQpLmhhc0NsYXNzKHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzKSB8fCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcih0YXJnZXRbMF0pKSB7CgkJCXJldHVybjsKCQl9CgkJdmFyIGluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgkJaW5zdC5zZWxlY3RlZERheSA9IGluc3QuY3VycmVudERheSA9ICQoJ2EnLCB0ZCkuaHRtbCgpOwoJCWluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoID0gbW9udGg7CgkJaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0geWVhcjsKCQl0aGlzLl9zZWxlY3REYXRlKGlkLCB0aGlzLl9mb3JtYXREYXRlKGluc3QsCgkJCWluc3QuY3VycmVudERheSwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudFllYXIpKTsKCX0sCgoJLyogRXJhc2UgdGhlIGlucHV0IGZpZWxkIGFuZCBoaWRlIHRoZSBkYXRlIHBpY2tlci4gKi8KCV9jbGVhckRhdGU6IGZ1bmN0aW9uKGlkKSB7CgkJdmFyIHRhcmdldCA9ICQoaWQpOwoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXRbMF0pOwoJCXRoaXMuX3NlbGVjdERhdGUodGFyZ2V0LCAnJyk7Cgl9LAoKCS8qIFVwZGF0ZSB0aGUgaW5wdXQgZmllbGQgd2l0aCB0aGUgc2VsZWN0ZWQgZGF0ZS4gKi8KCV9zZWxlY3REYXRlOiBmdW5jdGlvbihpZCwgZGF0ZVN0cikgewoJCXZhciB0YXJnZXQgPSAkKGlkKTsKCQl2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTsKCQlkYXRlU3RyID0gKGRhdGVTdHIgIT0gbnVsbCA/IGRhdGVTdHIgOiB0aGlzLl9mb3JtYXREYXRlKGluc3QpKTsKCQlpZiAoaW5zdC5pbnB1dCkKCQkJaW5zdC5pbnB1dC52YWwoZGF0ZVN0cik7CgkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCXZhciBvblNlbGVjdCA9IHRoaXMuX2dldChpbnN0LCAnb25TZWxlY3QnKTsKCQlpZiAob25TZWxlY3QpCgkJCW9uU2VsZWN0LmFwcGx5KChpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFswXSA6IG51bGwpLCBbZGF0ZVN0ciwgaW5zdF0pOyAgLy8gdHJpZ2dlciBjdXN0b20gY2FsbGJhY2sKCQllbHNlIGlmIChpbnN0LmlucHV0KQoJCQlpbnN0LmlucHV0LnRyaWdnZXIoJ2NoYW5nZScpOyAvLyBmaXJlIHRoZSBjaGFuZ2UgZXZlbnQKCQlpZiAoaW5zdC5pbmxpbmUpCgkJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7CgkJZWxzZSB7CgkJCXRoaXMuX2hpZGVEYXRlcGlja2VyKCk7CgkJCXRoaXMuX2xhc3RJbnB1dCA9IGluc3QuaW5wdXRbMF07CgkJCWlmICh0eXBlb2YoaW5zdC5pbnB1dFswXSkgIT0gJ29iamVjdCcpCgkJCQlpbnN0LmlucHV0LmZvY3VzKCk7IC8vIHJlc3RvcmUgZm9jdXMKCQkJdGhpcy5fbGFzdElucHV0ID0gbnVsbDsKCQl9Cgl9LAoKCS8qIFVwZGF0ZSBhbnkgYWx0ZXJuYXRlIGZpZWxkIHRvIHN5bmNocm9uaXNlIHdpdGggdGhlIG1haW4gZmllbGQuICovCglfdXBkYXRlQWx0ZXJuYXRlOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIGFsdEZpZWxkID0gdGhpcy5fZ2V0KGluc3QsICdhbHRGaWVsZCcpOwoJCWlmIChhbHRGaWVsZCkgeyAvLyB1cGRhdGUgYWx0ZXJuYXRlIGZpZWxkIHRvbwoJCQl2YXIgYWx0Rm9ybWF0ID0gdGhpcy5fZ2V0KGluc3QsICdhbHRGb3JtYXQnKSB8fCB0aGlzLl9nZXQoaW5zdCwgJ2RhdGVGb3JtYXQnKTsKCQkJdmFyIGRhdGUgPSB0aGlzLl9nZXREYXRlKGluc3QpOwoJCQl2YXIgZGF0ZVN0ciA9IHRoaXMuZm9ybWF0RGF0ZShhbHRGb3JtYXQsIGRhdGUsIHRoaXMuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7CgkJCSQoYWx0RmllbGQpLmVhY2goZnVuY3Rpb24oKSB7ICQodGhpcykudmFsKGRhdGVTdHIpOyB9KTsKCQl9Cgl9LAoKCS8qIFNldCBhcyBiZWZvcmVTaG93RGF5IGZ1bmN0aW9uIHRvIHByZXZlbnQgc2VsZWN0aW9uIG9mIHdlZWtlbmRzLgoJICAgQHBhcmFtICBkYXRlICBEYXRlIC0gdGhlIGRhdGUgdG8gY3VzdG9taXNlCgkgICBAcmV0dXJuIFtib29sZWFuLCBzdHJpbmddIC0gaXMgdGhpcyBkYXRlIHNlbGVjdGFibGU/LCB3aGF0IGlzIGl0cyBDU1MgY2xhc3M/ICovCglub1dlZWtlbmRzOiBmdW5jdGlvbihkYXRlKSB7CgkJdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7CgkJcmV0dXJuIFsoZGF5ID4gMCAmJiBkYXkgPCA2KSwgJyddOwoJfSwKCgkvKiBTZXQgYXMgY2FsY3VsYXRlV2VlayB0byBkZXRlcm1pbmUgdGhlIHdlZWsgb2YgdGhlIHllYXIgYmFzZWQgb24gdGhlIElTTyA4NjAxIGRlZmluaXRpb24uCgkgICBAcGFyYW0gIGRhdGUgIERhdGUgLSB0aGUgZGF0ZSB0byBnZXQgdGhlIHdlZWsgZm9yCgkgICBAcmV0dXJuICBudW1iZXIgLSB0aGUgbnVtYmVyIG9mIHRoZSB3ZWVrIHdpdGhpbiB0aGUgeWVhciB0aGF0IGNvbnRhaW5zIHRoaXMgZGF0ZSAqLwoJaXNvODYwMVdlZWs6IGZ1bmN0aW9uKGRhdGUpIHsKCQl2YXIgY2hlY2tEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpOwoJCS8vIEZpbmQgVGh1cnNkYXkgb2YgdGhpcyB3ZWVrIHN0YXJ0aW5nIG9uIE1vbmRheQoJCWNoZWNrRGF0ZS5zZXREYXRlKGNoZWNrRGF0ZS5nZXREYXRlKCkgKyA0IC0gKGNoZWNrRGF0ZS5nZXREYXkoKSB8fCA3KSk7CgkJdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpOwoJCWNoZWNrRGF0ZS5zZXRNb250aCgwKTsgLy8gQ29tcGFyZSB3aXRoIEphbiAxCgkJY2hlY2tEYXRlLnNldERhdGUoMSk7CgkJcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7Cgl9LAoKCS8qIFBhcnNlIGEgc3RyaW5nIHZhbHVlIGludG8gYSBkYXRlIG9iamVjdC4KCSAgIFNlZSBmb3JtYXREYXRlIGJlbG93IGZvciB0aGUgcG9zc2libGUgZm9ybWF0cy4KCgkgICBAcGFyYW0gIGZvcm1hdCAgICBzdHJpbmcgLSB0aGUgZXhwZWN0ZWQgZm9ybWF0IG9mIHRoZSBkYXRlCgkgICBAcGFyYW0gIHZhbHVlICAgICBzdHJpbmcgLSB0aGUgZGF0ZSBpbiB0aGUgYWJvdmUgZm9ybWF0CgkgICBAcGFyYW0gIHNldHRpbmdzICBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6CgkgICAgICAgICAgICAgICAgICAgICBzaG9ydFllYXJDdXRvZmYgIG51bWJlciAtIHRoZSBjdXRvZmYgeWVhciBmb3IgZGV0ZXJtaW5pbmcgdGhlIGNlbnR1cnkgKG9wdGlvbmFsKQoJICAgICAgICAgICAgICAgICAgICAgZGF5TmFtZXNTaG9ydCAgICBzdHJpbmdbN10gLSBhYmJyZXZpYXRlZCBuYW1lcyBvZiB0aGUgZGF5cyBmcm9tIFN1bmRheSAob3B0aW9uYWwpCgkgICAgICAgICAgICAgICAgICAgICBkYXlOYW1lcyAgICAgICAgIHN0cmluZ1s3XSAtIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbCkKCSAgICAgICAgICAgICAgICAgICAgIG1vbnRoTmFtZXNTaG9ydCAgc3RyaW5nWzEyXSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICAgICAgICAgICAgICAgICAgICAgbW9udGhOYW1lcyAgICAgICBzdHJpbmdbMTJdIC0gbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpCgkgICBAcmV0dXJuICBEYXRlIC0gdGhlIGV4dHJhY3RlZCBkYXRlIHZhbHVlIG9yIG51bGwgaWYgdmFsdWUgaXMgYmxhbmsgKi8KCXBhcnNlRGF0ZTogZnVuY3Rpb24gKGZvcm1hdCwgdmFsdWUsIHNldHRpbmdzKSB7CgkJaWYgKGZvcm1hdCA9PSBudWxsIHx8IHZhbHVlID09IG51bGwpCgkJCXRocm93ICdJbnZhbGlkIGFyZ3VtZW50cyc7CgkJdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlICsgJycpOwoJCWlmICh2YWx1ZSA9PSAnJykKCQkJcmV0dXJuIG51bGw7CgkJdmFyIHNob3J0WWVhckN1dG9mZiA9IChzZXR0aW5ncyA/IHNldHRpbmdzLnNob3J0WWVhckN1dG9mZiA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLnNob3J0WWVhckN1dG9mZjsKCQlzaG9ydFllYXJDdXRvZmYgPSAodHlwZW9mIHNob3J0WWVhckN1dG9mZiAhPSAnc3RyaW5nJyA/IHNob3J0WWVhckN1dG9mZiA6CgkJCQluZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgKyBwYXJzZUludChzaG9ydFllYXJDdXRvZmYsIDEwKSk7CgkJdmFyIGRheU5hbWVzU2hvcnQgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lc1Nob3J0IDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXNTaG9ydDsKCQl2YXIgZGF5TmFtZXMgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzOwoJCXZhciBtb250aE5hbWVzU2hvcnQgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQ7CgkJdmFyIG1vbnRoTmFtZXMgPSAoc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMubW9udGhOYW1lczsKCQl2YXIgeWVhciA9IC0xOwoJCXZhciBtb250aCA9IC0xOwoJCXZhciBkYXkgPSAtMTsKCQl2YXIgZG95ID0gLTE7CgkJdmFyIGxpdGVyYWwgPSBmYWxzZTsKCQkvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkCgkJdmFyIGxvb2tBaGVhZCA9IGZ1bmN0aW9uKG1hdGNoKSB7CgkJCXZhciBtYXRjaGVzID0gKGlGb3JtYXQgKyAxIDwgZm9ybWF0Lmxlbmd0aCAmJiBmb3JtYXQuY2hhckF0KGlGb3JtYXQgKyAxKSA9PSBtYXRjaCk7CgkJCWlmIChtYXRjaGVzKQoJCQkJaUZvcm1hdCsrOwoJCQlyZXR1cm4gbWF0Y2hlczsKCQl9OwoJCS8vIEV4dHJhY3QgYSBudW1iZXIgZnJvbSB0aGUgc3RyaW5nIHZhbHVlCgkJdmFyIGdldE51bWJlciA9IGZ1bmN0aW9uKG1hdGNoKSB7CgkJCXZhciBpc0RvdWJsZWQgPSBsb29rQWhlYWQobWF0Y2gpOwoJCQl2YXIgc2l6ZSA9IChtYXRjaCA9PSAnQCcgPyAxNCA6IChtYXRjaCA9PSAnIScgPyAyMCA6CgkJCQkobWF0Y2ggPT0gJ3knICYmIGlzRG91YmxlZCA/IDQgOiAobWF0Y2ggPT0gJ28nID8gMyA6IDIpKSkpOwoJCQl2YXIgZGlnaXRzID0gbmV3IFJlZ0V4cCgnXlxcZHsxLCcgKyBzaXplICsgJ30nKTsKCQkJdmFyIG51bSA9IHZhbHVlLnN1YnN0cmluZyhpVmFsdWUpLm1hdGNoKGRpZ2l0cyk7CgkJCWlmICghbnVtKQoJCQkJdGhyb3cgJ01pc3NpbmcgbnVtYmVyIGF0IHBvc2l0aW9uICcgKyBpVmFsdWU7CgkJCWlWYWx1ZSArPSBudW1bMF0ubGVuZ3RoOwoJCQlyZXR1cm4gcGFyc2VJbnQobnVtWzBdLCAxMCk7CgkJfTsKCQkvLyBFeHRyYWN0IGEgbmFtZSBmcm9tIHRoZSBzdHJpbmcgdmFsdWUgYW5kIGNvbnZlcnQgdG8gYW4gaW5kZXgKCQl2YXIgZ2V0TmFtZSA9IGZ1bmN0aW9uKG1hdGNoLCBzaG9ydE5hbWVzLCBsb25nTmFtZXMpIHsKCQkJdmFyIG5hbWVzID0gJC5tYXAobG9va0FoZWFkKG1hdGNoKSA/IGxvbmdOYW1lcyA6IHNob3J0TmFtZXMsIGZ1bmN0aW9uICh2LCBrKSB7CgkJCQlyZXR1cm4gWyBbaywgdl0gXTsKCQkJfSkuc29ydChmdW5jdGlvbiAoYSwgYikgewoJCQkJcmV0dXJuIC0oYVsxXS5sZW5ndGggLSBiWzFdLmxlbmd0aCk7CgkJCX0pOwoJCQl2YXIgaW5kZXggPSAtMTsKCQkJJC5lYWNoKG5hbWVzLCBmdW5jdGlvbiAoaSwgcGFpcikgewoJCQkJdmFyIG5hbWUgPSBwYWlyWzFdOwoJCQkJaWYgKHZhbHVlLnN1YnN0cihpVmFsdWUsIG5hbWUubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09IG5hbWUudG9Mb3dlckNhc2UoKSkgewoJCQkJCWluZGV4ID0gcGFpclswXTsKCQkJCQlpVmFsdWUgKz0gbmFtZS5sZW5ndGg7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9KTsKCQkJaWYgKGluZGV4ICE9IC0xKQoJCQkJcmV0dXJuIGluZGV4ICsgMTsKCQkJZWxzZQoJCQkJdGhyb3cgJ1Vua25vd24gbmFtZSBhdCBwb3NpdGlvbiAnICsgaVZhbHVlOwoJCX07CgkJLy8gQ29uZmlybSB0aGF0IGEgbGl0ZXJhbCBjaGFyYWN0ZXIgbWF0Y2hlcyB0aGUgc3RyaW5nIHZhbHVlCgkJdmFyIGNoZWNrTGl0ZXJhbCA9IGZ1bmN0aW9uKCkgewoJCQlpZiAodmFsdWUuY2hhckF0KGlWYWx1ZSkgIT0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KSkKCQkJCXRocm93ICdVbmV4cGVjdGVkIGxpdGVyYWwgYXQgcG9zaXRpb24gJyArIGlWYWx1ZTsKCQkJaVZhbHVlKys7CgkJfTsKCQl2YXIgaVZhbHVlID0gMDsKCQlmb3IgKHZhciBpRm9ybWF0ID0gMDsgaUZvcm1hdCA8IGZvcm1hdC5sZW5ndGg7IGlGb3JtYXQrKykgewoJCQlpZiAobGl0ZXJhbCkKCQkJCWlmIChmb3JtYXQuY2hhckF0KGlGb3JtYXQpID09ICInIiAmJiAhbG9va0FoZWFkKCInIikpCgkJCQkJbGl0ZXJhbCA9IGZhbHNlOwoJCQkJZWxzZQoJCQkJCWNoZWNrTGl0ZXJhbCgpOwoJCQllbHNlCgkJCQlzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHsKCQkJCQljYXNlICdkJzoKCQkJCQkJZGF5ID0gZ2V0TnVtYmVyKCdkJyk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgJ0QnOgoJCQkJCQlnZXROYW1lKCdEJywgZGF5TmFtZXNTaG9ydCwgZGF5TmFtZXMpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICdvJzoKCQkJCQkJZG95ID0gZ2V0TnVtYmVyKCdvJyk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgJ20nOgoJCQkJCQltb250aCA9IGdldE51bWJlcignbScpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICdNJzoKCQkJCQkJbW9udGggPSBnZXROYW1lKCdNJywgbW9udGhOYW1lc1Nob3J0LCBtb250aE5hbWVzKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAneSc6CgkJCQkJCXllYXIgPSBnZXROdW1iZXIoJ3knKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAnQCc6CgkJCQkJCXZhciBkYXRlID0gbmV3IERhdGUoZ2V0TnVtYmVyKCdAJykpOwoJCQkJCQl5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCQkJCQltb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7CgkJCQkJCWRheSA9IGRhdGUuZ2V0RGF0ZSgpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICchJzoKCQkJCQkJdmFyIGRhdGUgPSBuZXcgRGF0ZSgoZ2V0TnVtYmVyKCchJykgLSB0aGlzLl90aWNrc1RvMTk3MCkgLyAxMDAwMCk7CgkJCQkJCXllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7CgkJCQkJCW1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKCQkJCQkJZGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIiciOgoJCQkJCQlpZiAobG9va0FoZWFkKCInIikpCgkJCQkJCQljaGVja0xpdGVyYWwoKTsKCQkJCQkJZWxzZQoJCQkJCQkJbGl0ZXJhbCA9IHRydWU7CgkJCQkJCWJyZWFrOwoJCQkJCWRlZmF1bHQ6CgkJCQkJCWNoZWNrTGl0ZXJhbCgpOwoJCQkJfQoJCX0KCQlpZiAoaVZhbHVlIDwgdmFsdWUubGVuZ3RoKXsKCQkJdmFyIGV4dHJhID0gdmFsdWUuc3Vic3RyKGlWYWx1ZSk7CgkJCWlmICghL15ccysvLnRlc3QoZXh0cmEpKSB7CgkJCQl0aHJvdyAiRXh0cmEvdW5wYXJzZWQgY2hhcmFjdGVycyBmb3VuZCBpbiBkYXRlOiAiICsgZXh0cmE7CgkJCX0KCQl9CgkJaWYgKHllYXIgPT0gLTEpCgkJCXllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7CgkJZWxzZSBpZiAoeWVhciA8IDEwMCkKCQkJeWVhciArPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgLSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgKwoJCQkJKHllYXIgPD0gc2hvcnRZZWFyQ3V0b2ZmID8gMCA6IC0xMDApOwoJCWlmIChkb3kgPiAtMSkgewoJCQltb250aCA9IDE7CgkJCWRheSA9IGRveTsKCQkJZG8gewoJCQkJdmFyIGRpbSA9IHRoaXMuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoIC0gMSk7CgkJCQlpZiAoZGF5IDw9IGRpbSkKCQkJCQlicmVhazsKCQkJCW1vbnRoKys7CgkJCQlkYXkgLT0gZGltOwoJCQl9IHdoaWxlICh0cnVlKTsKCQl9CgkJdmFyIGRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSkpOwoJCWlmIChkYXRlLmdldEZ1bGxZZWFyKCkgIT0geWVhciB8fCBkYXRlLmdldE1vbnRoKCkgKyAxICE9IG1vbnRoIHx8IGRhdGUuZ2V0RGF0ZSgpICE9IGRheSkKCQkJdGhyb3cgJ0ludmFsaWQgZGF0ZSc7IC8vIEUuZy4gMzEvMDIvMDAKCQlyZXR1cm4gZGF0ZTsKCX0sCgoJLyogU3RhbmRhcmQgZGF0ZSBmb3JtYXRzLiAqLwoJQVRPTTogJ3l5LW1tLWRkJywgLy8gUkZDIDMzMzkgKElTTyA4NjAxKQoJQ09PS0lFOiAnRCwgZGQgTSB5eScsCglJU09fODYwMTogJ3l5LW1tLWRkJywKCVJGQ184MjI6ICdELCBkIE0geScsCglSRkNfODUwOiAnREQsIGRkLU0teScsCglSRkNfMTAzNjogJ0QsIGQgTSB5JywKCVJGQ18xMTIzOiAnRCwgZCBNIHl5JywKCVJGQ18yODIyOiAnRCwgZCBNIHl5JywKCVJTUzogJ0QsIGQgTSB5JywgLy8gUkZDIDgyMgoJVElDS1M6ICchJywKCVRJTUVTVEFNUDogJ0AnLAoJVzNDOiAneXktbW0tZGQnLCAvLyBJU08gODYwMQoKCV90aWNrc1RvMTk3MDogKCgoMTk3MCAtIDEpICogMzY1ICsgTWF0aC5mbG9vcigxOTcwIC8gNCkgLSBNYXRoLmZsb29yKDE5NzAgLyAxMDApICsKCQlNYXRoLmZsb29yKDE5NzAgLyA0MDApKSAqIDI0ICogNjAgKiA2MCAqIDEwMDAwMDAwKSwKCgkvKiBGb3JtYXQgYSBkYXRlIG9iamVjdCBpbnRvIGEgc3RyaW5nIHZhbHVlLgoJICAgVGhlIGZvcm1hdCBjYW4gYmUgY29tYmluYXRpb25zIG9mIHRoZSBmb2xsb3dpbmc6CgkgICBkICAtIGRheSBvZiBtb250aCAobm8gbGVhZGluZyB6ZXJvKQoJICAgZGQgLSBkYXkgb2YgbW9udGggKHR3byBkaWdpdCkKCSAgIG8gIC0gZGF5IG9mIHllYXIgKG5vIGxlYWRpbmcgemVyb3MpCgkgICBvbyAtIGRheSBvZiB5ZWFyICh0aHJlZSBkaWdpdCkKCSAgIEQgIC0gZGF5IG5hbWUgc2hvcnQKCSAgIEREIC0gZGF5IG5hbWUgbG9uZwoJICAgbSAgLSBtb250aCBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm8pCgkgICBtbSAtIG1vbnRoIG9mIHllYXIgKHR3byBkaWdpdCkKCSAgIE0gIC0gbW9udGggbmFtZSBzaG9ydAoJICAgTU0gLSBtb250aCBuYW1lIGxvbmcKCSAgIHkgIC0geWVhciAodHdvIGRpZ2l0KQoJICAgeXkgLSB5ZWFyIChmb3VyIGRpZ2l0KQoJICAgQCAtIFVuaXggdGltZXN0YW1wIChtcyBzaW5jZSAwMS8wMS8xOTcwKQoJICAgISAtIFdpbmRvd3MgdGlja3MgKDEwMG5zIHNpbmNlIDAxLzAxLzAwMDEpCgkgICAnLi4uJyAtIGxpdGVyYWwgdGV4dAoJICAgJycgLSBzaW5nbGUgcXVvdGUKCgkgICBAcGFyYW0gIGZvcm1hdCAgICBzdHJpbmcgLSB0aGUgZGVzaXJlZCBmb3JtYXQgb2YgdGhlIGRhdGUKCSAgIEBwYXJhbSAgZGF0ZSAgICAgIERhdGUgLSB0aGUgZGF0ZSB2YWx1ZSB0byBmb3JtYXQKCSAgIEBwYXJhbSAgc2V0dGluZ3MgIE9iamVjdCAtIGF0dHJpYnV0ZXMgaW5jbHVkZToKCSAgICAgICAgICAgICAgICAgICAgIGRheU5hbWVzU2hvcnQgICAgc3RyaW5nWzddIC0gYWJicmV2aWF0ZWQgbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKQoJICAgICAgICAgICAgICAgICAgICAgZGF5TmFtZXMgICAgICAgICBzdHJpbmdbN10gLSBuYW1lcyBvZiB0aGUgZGF5cyBmcm9tIFN1bmRheSAob3B0aW9uYWwpCgkgICAgICAgICAgICAgICAgICAgICBtb250aE5hbWVzU2hvcnQgIHN0cmluZ1sxMl0gLSBhYmJyZXZpYXRlZCBuYW1lcyBvZiB0aGUgbW9udGhzIChvcHRpb25hbCkKCSAgICAgICAgICAgICAgICAgICAgIG1vbnRoTmFtZXMgICAgICAgc3RyaW5nWzEyXSAtIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICAgQHJldHVybiAgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdCAqLwoJZm9ybWF0RGF0ZTogZnVuY3Rpb24gKGZvcm1hdCwgZGF0ZSwgc2V0dGluZ3MpIHsKCQlpZiAoIWRhdGUpCgkJCXJldHVybiAnJzsKCQl2YXIgZGF5TmFtZXNTaG9ydCA9IChzZXR0aW5ncyA/IHNldHRpbmdzLmRheU5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0OwoJCXZhciBkYXlOYW1lcyA9IChzZXR0aW5ncyA/IHNldHRpbmdzLmRheU5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXM7CgkJdmFyIG1vbnRoTmFtZXNTaG9ydCA9IChzZXR0aW5ncyA/IHNldHRpbmdzLm1vbnRoTmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydDsKCQl2YXIgbW9udGhOYW1lcyA9IChzZXR0aW5ncyA/IHNldHRpbmdzLm1vbnRoTmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzOwoJCS8vIENoZWNrIHdoZXRoZXIgYSBmb3JtYXQgY2hhcmFjdGVyIGlzIGRvdWJsZWQKCQl2YXIgbG9va0FoZWFkID0gZnVuY3Rpb24obWF0Y2gpIHsKCQkJdmFyIG1hdGNoZXMgPSAoaUZvcm1hdCArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdC5jaGFyQXQoaUZvcm1hdCArIDEpID09IG1hdGNoKTsKCQkJaWYgKG1hdGNoZXMpCgkJCQlpRm9ybWF0Kys7CgkJCXJldHVybiBtYXRjaGVzOwoJCX07CgkJLy8gRm9ybWF0IGEgbnVtYmVyLCB3aXRoIGxlYWRpbmcgemVybyBpZiBuZWNlc3NhcnkKCQl2YXIgZm9ybWF0TnVtYmVyID0gZnVuY3Rpb24obWF0Y2gsIHZhbHVlLCBsZW4pIHsKCQkJdmFyIG51bSA9ICcnICsgdmFsdWU7CgkJCWlmIChsb29rQWhlYWQobWF0Y2gpKQoJCQkJd2hpbGUgKG51bS5sZW5ndGggPCBsZW4pCgkJCQkJbnVtID0gJzAnICsgbnVtOwoJCQlyZXR1cm4gbnVtOwoJCX07CgkJLy8gRm9ybWF0IGEgbmFtZSwgc2hvcnQgb3IgbG9uZyBhcyByZXF1ZXN0ZWQKCQl2YXIgZm9ybWF0TmFtZSA9IGZ1bmN0aW9uKG1hdGNoLCB2YWx1ZSwgc2hvcnROYW1lcywgbG9uZ05hbWVzKSB7CgkJCXJldHVybiAobG9va0FoZWFkKG1hdGNoKSA/IGxvbmdOYW1lc1t2YWx1ZV0gOiBzaG9ydE5hbWVzW3ZhbHVlXSk7CgkJfTsKCQl2YXIgb3V0cHV0ID0gJyc7CgkJdmFyIGxpdGVyYWwgPSBmYWxzZTsKCQlpZiAoZGF0ZSkKCQkJZm9yICh2YXIgaUZvcm1hdCA9IDA7IGlGb3JtYXQgPCBmb3JtYXQubGVuZ3RoOyBpRm9ybWF0KyspIHsKCQkJCWlmIChsaXRlcmFsKQoJCQkJCWlmIChmb3JtYXQuY2hhckF0KGlGb3JtYXQpID09ICInIiAmJiAhbG9va0FoZWFkKCInIikpCgkJCQkJCWxpdGVyYWwgPSBmYWxzZTsKCQkJCQllbHNlCgkJCQkJCW91dHB1dCArPSBmb3JtYXQuY2hhckF0KGlGb3JtYXQpOwoJCQkJZWxzZQoJCQkJCXN3aXRjaCAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSkgewoJCQkJCQljYXNlICdkJzoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROdW1iZXIoJ2QnLCBkYXRlLmdldERhdGUoKSwgMik7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAnRCc6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TmFtZSgnRCcsIGRhdGUuZ2V0RGF5KCksIGRheU5hbWVzU2hvcnQsIGRheU5hbWVzKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICdvJzoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROdW1iZXIoJ28nLAoJCQkJCQkJCU1hdGgucm91bmQoKG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAwKS5nZXRUaW1lKCkpIC8gODY0MDAwMDApLCAzKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICdtJzoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROdW1iZXIoJ20nLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAyKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICdNJzoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROYW1lKCdNJywgZGF0ZS5nZXRNb250aCgpLCBtb250aE5hbWVzU2hvcnQsIG1vbnRoTmFtZXMpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgJ3knOgoJCQkJCQkJb3V0cHV0ICs9IChsb29rQWhlYWQoJ3knKSA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6CgkJCQkJCQkJKGRhdGUuZ2V0WWVhcigpICUgMTAwIDwgMTAgPyAnMCcgOiAnJykgKyBkYXRlLmdldFllYXIoKSAlIDEwMCk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAnQCc6CgkJCQkJCQlvdXRwdXQgKz0gZGF0ZS5nZXRUaW1lKCk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAnISc6CgkJCQkJCQlvdXRwdXQgKz0gZGF0ZS5nZXRUaW1lKCkgKiAxMDAwMCArIHRoaXMuX3RpY2tzVG8xOTcwOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIiciOgoJCQkJCQkJaWYgKGxvb2tBaGVhZCgiJyIpKQoJCQkJCQkJCW91dHB1dCArPSAiJyI7CgkJCQkJCQllbHNlCgkJCQkJCQkJbGl0ZXJhbCA9IHRydWU7CgkJCQkJCQlicmVhazsKCQkJCQkJZGVmYXVsdDoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXQuY2hhckF0KGlGb3JtYXQpOwoJCQkJCX0KCQkJfQoJCXJldHVybiBvdXRwdXQ7Cgl9LAoKCS8qIEV4dHJhY3QgYWxsIHBvc3NpYmxlIGNoYXJhY3RlcnMgZnJvbSB0aGUgZGF0ZSBmb3JtYXQuICovCglfcG9zc2libGVDaGFyczogZnVuY3Rpb24gKGZvcm1hdCkgewoJCXZhciBjaGFycyA9ICcnOwoJCXZhciBsaXRlcmFsID0gZmFsc2U7CgkJLy8gQ2hlY2sgd2hldGhlciBhIGZvcm1hdCBjaGFyYWN0ZXIgaXMgZG91YmxlZAoJCXZhciBsb29rQWhlYWQgPSBmdW5jdGlvbihtYXRjaCkgewoJCQl2YXIgbWF0Y2hlcyA9IChpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdChpRm9ybWF0ICsgMSkgPT0gbWF0Y2gpOwoJCQlpZiAobWF0Y2hlcykKCQkJCWlGb3JtYXQrKzsKCQkJcmV0dXJuIG1hdGNoZXM7CgkJfTsKCQlmb3IgKHZhciBpRm9ybWF0ID0gMDsgaUZvcm1hdCA8IGZvcm1hdC5sZW5ndGg7IGlGb3JtYXQrKykKCQkJaWYgKGxpdGVyYWwpCgkJCQlpZiAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSA9PSAiJyIgJiYgIWxvb2tBaGVhZCgiJyIpKQoJCQkJCWxpdGVyYWwgPSBmYWxzZTsKCQkJCWVsc2UKCQkJCQljaGFycyArPSBmb3JtYXQuY2hhckF0KGlGb3JtYXQpOwoJCQllbHNlCgkJCQlzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHsKCQkJCQljYXNlICdkJzogY2FzZSAnbSc6IGNhc2UgJ3knOiBjYXNlICdAJzoKCQkJCQkJY2hhcnMgKz0gJzAxMjM0NTY3ODknOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICdEJzogY2FzZSAnTSc6CgkJCQkJCXJldHVybiBudWxsOyAvLyBBY2NlcHQgYW55dGhpbmcKCQkJCQljYXNlICInIjoKCQkJCQkJaWYgKGxvb2tBaGVhZCgiJyIpKQoJCQkJCQkJY2hhcnMgKz0gIiciOwoJCQkJCQllbHNlCgkJCQkJCQlsaXRlcmFsID0gdHJ1ZTsKCQkJCQkJYnJlYWs7CgkJCQkJZGVmYXVsdDoKCQkJCQkJY2hhcnMgKz0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KTsKCQkJCX0KCQlyZXR1cm4gY2hhcnM7Cgl9LAoKCS8qIEdldCBhIHNldHRpbmcgdmFsdWUsIGRlZmF1bHRpbmcgaWYgbmVjZXNzYXJ5LiAqLwoJX2dldDogZnVuY3Rpb24oaW5zdCwgbmFtZSkgewoJCXJldHVybiBpbnN0LnNldHRpbmdzW25hbWVdICE9PSB1bmRlZmluZWQgPwoJCQlpbnN0LnNldHRpbmdzW25hbWVdIDogdGhpcy5fZGVmYXVsdHNbbmFtZV07Cgl9LAoKCS8qIFBhcnNlIGV4aXN0aW5nIGRhdGUgYW5kIGluaXRpYWxpc2UgZGF0ZSBwaWNrZXIuICovCglfc2V0RGF0ZUZyb21GaWVsZDogZnVuY3Rpb24oaW5zdCwgbm9EZWZhdWx0KSB7CgkJaWYgKGluc3QuaW5wdXQudmFsKCkgPT0gaW5zdC5sYXN0VmFsKSB7CgkJCXJldHVybjsKCQl9CgkJdmFyIGRhdGVGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgJ2RhdGVGb3JtYXQnKTsKCQl2YXIgZGF0ZXMgPSBpbnN0Lmxhc3RWYWwgPSBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC52YWwoKSA6IG51bGw7CgkJdmFyIGRhdGUsIGRlZmF1bHREYXRlOwoJCWRhdGUgPSBkZWZhdWx0RGF0ZSA9IHRoaXMuX2dldERlZmF1bHREYXRlKGluc3QpOwoJCXZhciBzZXR0aW5ncyA9IHRoaXMuX2dldEZvcm1hdENvbmZpZyhpbnN0KTsKCQl0cnkgewoJCQlkYXRlID0gdGhpcy5wYXJzZURhdGUoZGF0ZUZvcm1hdCwgZGF0ZXMsIHNldHRpbmdzKSB8fCBkZWZhdWx0RGF0ZTsKCQl9IGNhdGNoIChldmVudCkgewoJCQl0aGlzLmxvZyhldmVudCk7CgkJCWRhdGVzID0gKG5vRGVmYXVsdCA/ICcnIDogZGF0ZXMpOwoJCX0KCQlpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7CgkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCWluc3QuY3VycmVudERheSA9IChkYXRlcyA/IGRhdGUuZ2V0RGF0ZSgpIDogMCk7CgkJaW5zdC5jdXJyZW50TW9udGggPSAoZGF0ZXMgPyBkYXRlLmdldE1vbnRoKCkgOiAwKTsKCQlpbnN0LmN1cnJlbnRZZWFyID0gKGRhdGVzID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogMCk7CgkJdGhpcy5fYWRqdXN0SW5zdERhdGUoaW5zdCk7Cgl9LAoKCS8qIFJldHJpZXZlIHRoZSBkZWZhdWx0IGRhdGUgc2hvd24gb24gb3BlbmluZy4gKi8KCV9nZXREZWZhdWx0RGF0ZTogZnVuY3Rpb24oaW5zdCkgewoJCXJldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heChpbnN0LAoJCQl0aGlzLl9kZXRlcm1pbmVEYXRlKGluc3QsIHRoaXMuX2dldChpbnN0LCAnZGVmYXVsdERhdGUnKSwgbmV3IERhdGUoKSkpOwoJfSwKCgkvKiBBIGRhdGUgbWF5IGJlIHNwZWNpZmllZCBhcyBhbiBleGFjdCB2YWx1ZSBvciBhIHJlbGF0aXZlIG9uZS4gKi8KCV9kZXRlcm1pbmVEYXRlOiBmdW5jdGlvbihpbnN0LCBkYXRlLCBkZWZhdWx0RGF0ZSkgewoJCXZhciBvZmZzZXROdW1lcmljID0gZnVuY3Rpb24ob2Zmc2V0KSB7CgkJCXZhciBkYXRlID0gbmV3IERhdGUoKTsKCQkJZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgb2Zmc2V0KTsKCQkJcmV0dXJuIGRhdGU7CgkJfTsKCQl2YXIgb2Zmc2V0U3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7CgkJCXRyeSB7CgkJCQlyZXR1cm4gJC5kYXRlcGlja2VyLnBhcnNlRGF0ZSgkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAnZGF0ZUZvcm1hdCcpLAoJCQkJCW9mZnNldCwgJC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpOwoJCQl9CgkJCWNhdGNoIChlKSB7CgkJCQkvLyBJZ25vcmUKCQkJfQoJCQl2YXIgZGF0ZSA9IChvZmZzZXQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXmMvKSA/CgkJCQkkLmRhdGVwaWNrZXIuX2dldERhdGUoaW5zdCkgOiBudWxsKSB8fCBuZXcgRGF0ZSgpOwoJCQl2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKCQkJdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpOwoJCQl2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJCXZhciBwYXR0ZXJuID0gLyhbKy1dP1swLTldKylccyooZHxEfHd8V3xtfE18eXxZKT8vZzsKCQkJdmFyIG1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWMob2Zmc2V0KTsKCQkJd2hpbGUgKG1hdGNoZXMpIHsKCQkJCXN3aXRjaCAobWF0Y2hlc1syXSB8fCAnZCcpIHsKCQkJCQljYXNlICdkJyA6IGNhc2UgJ0QnIDoKCQkJCQkJZGF5ICs9IHBhcnNlSW50KG1hdGNoZXNbMV0sMTApOyBicmVhazsKCQkJCQljYXNlICd3JyA6IGNhc2UgJ1cnIDoKCQkJCQkJZGF5ICs9IHBhcnNlSW50KG1hdGNoZXNbMV0sMTApICogNzsgYnJlYWs7CgkJCQkJY2FzZSAnbScgOiBjYXNlICdNJyA6CgkJCQkJCW1vbnRoICs9IHBhcnNlSW50KG1hdGNoZXNbMV0sMTApOwoJCQkJCQlkYXkgPSBNYXRoLm1pbihkYXksICQuZGF0ZXBpY2tlci5fZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAneSc6IGNhc2UgJ1knIDoKCQkJCQkJeWVhciArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKTsKCQkJCQkJZGF5ID0gTWF0aC5taW4oZGF5LCAkLmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSk7CgkJCQkJCWJyZWFrOwoJCQkJfQoJCQkJbWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyhvZmZzZXQpOwoJCQl9CgkJCXJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KTsKCQl9OwoJCXZhciBuZXdEYXRlID0gKGRhdGUgPT0gbnVsbCB8fCBkYXRlID09PSAnJyA/IGRlZmF1bHREYXRlIDogKHR5cGVvZiBkYXRlID09ICdzdHJpbmcnID8gb2Zmc2V0U3RyaW5nKGRhdGUpIDoKCQkJKHR5cGVvZiBkYXRlID09ICdudW1iZXInID8gKGlzTmFOKGRhdGUpID8gZGVmYXVsdERhdGUgOiBvZmZzZXROdW1lcmljKGRhdGUpKSA6IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKSkpKTsKCQluZXdEYXRlID0gKG5ld0RhdGUgJiYgbmV3RGF0ZS50b1N0cmluZygpID09ICdJbnZhbGlkIERhdGUnID8gZGVmYXVsdERhdGUgOiBuZXdEYXRlKTsKCQlpZiAobmV3RGF0ZSkgewoJCQluZXdEYXRlLnNldEhvdXJzKDApOwoJCQluZXdEYXRlLnNldE1pbnV0ZXMoMCk7CgkJCW5ld0RhdGUuc2V0U2Vjb25kcygwKTsKCQkJbmV3RGF0ZS5zZXRNaWxsaXNlY29uZHMoMCk7CgkJfQoJCXJldHVybiB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXdEYXRlKTsKCX0sCgoJLyogSGFuZGxlIHN3aXRjaCB0by9mcm9tIGRheWxpZ2h0IHNhdmluZy4KCSAgIEhvdXJzIG1heSBiZSBub24temVybyBvbiBkYXlsaWdodCBzYXZpbmcgY3V0LW92ZXI6CgkgICA+IDEyIHdoZW4gbWlkbmlnaHQgY2hhbmdlb3ZlciwgYnV0IHRoZW4gY2Fubm90IGdlbmVyYXRlCgkgICBtaWRuaWdodCBkYXRldGltZSwgc28ganVtcCB0byAxQU0sIG90aGVyd2lzZSByZXNldC4KCSAgIEBwYXJhbSAgZGF0ZSAgKERhdGUpIHRoZSBkYXRlIHRvIGNoZWNrCgkgICBAcmV0dXJuICAoRGF0ZSkgdGhlIGNvcnJlY3RlZCBkYXRlICovCglfZGF5bGlnaHRTYXZpbmdBZGp1c3Q6IGZ1bmN0aW9uKGRhdGUpIHsKCQlpZiAoIWRhdGUpIHJldHVybiBudWxsOwoJCWRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpID4gMTIgPyBkYXRlLmdldEhvdXJzKCkgKyAyIDogMCk7CgkJcmV0dXJuIGRhdGU7Cgl9LAoKCS8qIFNldCB0aGUgZGF0ZShzKSBkaXJlY3RseS4gKi8KCV9zZXREYXRlOiBmdW5jdGlvbihpbnN0LCBkYXRlLCBub0NoYW5nZSkgewoJCXZhciBjbGVhciA9ICFkYXRlOwoJCXZhciBvcmlnTW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGg7CgkJdmFyIG9yaWdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXI7CgkJdmFyIG5ld0RhdGUgPSB0aGlzLl9yZXN0cmljdE1pbk1heChpbnN0LCB0aGlzLl9kZXRlcm1pbmVEYXRlKGluc3QsIGRhdGUsIG5ldyBEYXRlKCkpKTsKCQlpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5ID0gbmV3RGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aCA9IG5ld0RhdGUuZ2V0TW9udGgoKTsKCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0gbmV3RGF0ZS5nZXRGdWxsWWVhcigpOwoJCWlmICgob3JpZ01vbnRoICE9IGluc3Quc2VsZWN0ZWRNb250aCB8fCBvcmlnWWVhciAhPSBpbnN0LnNlbGVjdGVkWWVhcikgJiYgIW5vQ2hhbmdlKQoJCQl0aGlzLl9ub3RpZnlDaGFuZ2UoaW5zdCk7CgkJdGhpcy5fYWRqdXN0SW5zdERhdGUoaW5zdCk7CgkJaWYgKGluc3QuaW5wdXQpIHsKCQkJaW5zdC5pbnB1dC52YWwoY2xlYXIgPyAnJyA6IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCkpOwoJCX0KCX0sCgoJLyogUmV0cmlldmUgdGhlIGRhdGUocykgZGlyZWN0bHkuICovCglfZ2V0RGF0ZTogZnVuY3Rpb24oaW5zdCkgewoJCXZhciBzdGFydERhdGUgPSAoIWluc3QuY3VycmVudFllYXIgfHwgKGluc3QuaW5wdXQgJiYgaW5zdC5pbnB1dC52YWwoKSA9PSAnJykgPyBudWxsIDoKCQkJdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoCgkJCWluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkpKSk7CgkJCXJldHVybiBzdGFydERhdGU7Cgl9LAoKCS8qIEF0dGFjaCB0aGUgb254eHggaGFuZGxlcnMuICBUaGVzZSBhcmUgZGVjbGFyZWQgc3RhdGljYWxseSBzbwoJICogdGhleSB3b3JrIHdpdGggc3RhdGljIGNvZGUgdHJhbnNmb3JtZXJzIGxpa2UgQ2FqYS4KCSAqLwoJX2F0dGFjaEhhbmRsZXJzOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIHN0ZXBNb250aHMgPSB0aGlzLl9nZXQoaW5zdCwgJ3N0ZXBNb250aHMnKTsKCQl2YXIgaWQgPSAnIycgKyBpbnN0LmlkLnJlcGxhY2UoIC9cXFxcL2csICJcXCIgKTsKCQlpbnN0LmRwRGl2LmZpbmQoJ1tkYXRhLWhhbmRsZXJdJykubWFwKGZ1bmN0aW9uICgpIHsKCQkJdmFyIGhhbmRsZXIgPSB7CgkJCQlwcmV2OiBmdW5jdGlvbiAoKSB7CgkJCQkJd2luZG93WydEUF9qUXVlcnlfJyArIGRwdXVpZF0uZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShpZCwgLXN0ZXBNb250aHMsICdNJyk7CgkJCQl9LAoJCQkJbmV4dDogZnVuY3Rpb24gKCkgewoJCQkJCXdpbmRvd1snRFBfalF1ZXJ5XycgKyBkcHV1aWRdLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoaWQsICtzdGVwTW9udGhzLCAnTScpOwoJCQkJfSwKCQkJCWhpZGU6IGZ1bmN0aW9uICgpIHsKCQkJCQl3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJfSwKCQkJCXRvZGF5OiBmdW5jdGlvbiAoKSB7CgkJCQkJd2luZG93WydEUF9qUXVlcnlfJyArIGRwdXVpZF0uZGF0ZXBpY2tlci5fZ290b1RvZGF5KGlkKTsKCQkJCX0sCgkJCQlzZWxlY3REYXk6IGZ1bmN0aW9uICgpIHsKCQkJCQl3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3REYXkoaWQsICt0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1tb250aCcpLCArdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEteWVhcicpLCB0aGlzKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9LAoJCQkJc2VsZWN0TW9udGg6IGZ1bmN0aW9uICgpIHsKCQkJCQl3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3RNb250aFllYXIoaWQsIHRoaXMsICdNJyk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfSwKCQkJCXNlbGVjdFllYXI6IGZ1bmN0aW9uICgpIHsKCQkJCQl3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3RNb250aFllYXIoaWQsIHRoaXMsICdZJyk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9OwoJCQkkKHRoaXMpLmJpbmQodGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQnKSwgaGFuZGxlclt0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1oYW5kbGVyJyldKTsKCQl9KTsKCX0sCgoJLyogR2VuZXJhdGUgdGhlIEhUTUwgZm9yIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBkYXRlIHBpY2tlci4gKi8KCV9nZW5lcmF0ZUhUTUw6IGZ1bmN0aW9uKGluc3QpIHsKCQl2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpOwoJCXRvZGF5ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoCgkJCW5ldyBEYXRlKHRvZGF5LmdldEZ1bGxZZWFyKCksIHRvZGF5LmdldE1vbnRoKCksIHRvZGF5LmdldERhdGUoKSkpOyAvLyBjbGVhciB0aW1lCgkJdmFyIGlzUlRMID0gdGhpcy5fZ2V0KGluc3QsICdpc1JUTCcpOwoJCXZhciBzaG93QnV0dG9uUGFuZWwgPSB0aGlzLl9nZXQoaW5zdCwgJ3Nob3dCdXR0b25QYW5lbCcpOwoJCXZhciBoaWRlSWZOb1ByZXZOZXh0ID0gdGhpcy5fZ2V0KGluc3QsICdoaWRlSWZOb1ByZXZOZXh0Jyk7CgkJdmFyIG5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgJ25hdmlnYXRpb25Bc0RhdGVGb3JtYXQnKTsKCQl2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoaW5zdCk7CgkJdmFyIHNob3dDdXJyZW50QXRQb3MgPSB0aGlzLl9nZXQoaW5zdCwgJ3Nob3dDdXJyZW50QXRQb3MnKTsKCQl2YXIgc3RlcE1vbnRocyA9IHRoaXMuX2dldChpbnN0LCAnc3RlcE1vbnRocycpOwoJCXZhciBpc011bHRpTW9udGggPSAobnVtTW9udGhzWzBdICE9IDEgfHwgbnVtTW9udGhzWzFdICE9IDEpOwoJCXZhciBjdXJyZW50RGF0ZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCghaW5zdC5jdXJyZW50RGF5ID8gbmV3IERhdGUoOTk5OSwgOSwgOSkgOgoJCQluZXcgRGF0ZShpbnN0LmN1cnJlbnRZZWFyLCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50RGF5KSkpOwoJCXZhciBtaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCAnbWluJyk7CgkJdmFyIG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICdtYXgnKTsKCQl2YXIgZHJhd01vbnRoID0gaW5zdC5kcmF3TW9udGggLSBzaG93Q3VycmVudEF0UG9zOwoJCXZhciBkcmF3WWVhciA9IGluc3QuZHJhd1llYXI7CgkJaWYgKGRyYXdNb250aCA8IDApIHsKCQkJZHJhd01vbnRoICs9IDEyOwoJCQlkcmF3WWVhci0tOwoJCX0KCQlpZiAobWF4RGF0ZSkgewoJCQl2YXIgbWF4RHJhdyA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKG1heERhdGUuZ2V0RnVsbFllYXIoKSwKCQkJCW1heERhdGUuZ2V0TW9udGgoKSAtIChudW1Nb250aHNbMF0gKiBudW1Nb250aHNbMV0pICsgMSwgbWF4RGF0ZS5nZXREYXRlKCkpKTsKCQkJbWF4RHJhdyA9IChtaW5EYXRlICYmIG1heERyYXcgPCBtaW5EYXRlID8gbWluRGF0ZSA6IG1heERyYXcpOwoJCQl3aGlsZSAodGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZHJhd1llYXIsIGRyYXdNb250aCwgMSkpID4gbWF4RHJhdykgewoJCQkJZHJhd01vbnRoLS07CgkJCQlpZiAoZHJhd01vbnRoIDwgMCkgewoJCQkJCWRyYXdNb250aCA9IDExOwoJCQkJCWRyYXdZZWFyLS07CgkJCQl9CgkJCX0KCQl9CgkJaW5zdC5kcmF3TW9udGggPSBkcmF3TW9udGg7CgkJaW5zdC5kcmF3WWVhciA9IGRyYXdZZWFyOwoJCXZhciBwcmV2VGV4dCA9IHRoaXMuX2dldChpbnN0LCAncHJldlRleHQnKTsKCQlwcmV2VGV4dCA9ICghbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA/IHByZXZUZXh0IDogdGhpcy5mb3JtYXREYXRlKHByZXZUZXh0LAoJCQl0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoIC0gc3RlcE1vbnRocywgMSkpLAoJCQl0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTsKCQl2YXIgcHJldiA9ICh0aGlzLl9jYW5BZGp1c3RNb250aChpbnN0LCAtMSwgZHJhd1llYXIsIGRyYXdNb250aCkgPwoJCQknPGEgY2xhc3M9InVpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsIiBkYXRhLWhhbmRsZXI9InByZXYiIGRhdGEtZXZlbnQ9ImNsaWNrIicgKwoJCQknIHRpdGxlPSInICsgcHJldlRleHQgKyAnIj48c3BhbiBjbGFzcz0idWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0nICsgKCBpc1JUTCA/ICdlJyA6ICd3JykgKyAnIj4nICsgcHJldlRleHQgKyAnPC9zcGFuPjwvYT4nIDoKCQkJKGhpZGVJZk5vUHJldk5leHQgPyAnJyA6ICc8YSBjbGFzcz0idWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQiIHRpdGxlPSInKyBwcmV2VGV4dCArJyI+PHNwYW4gY2xhc3M9InVpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtJyArICggaXNSVEwgPyAnZScgOiAndycpICsgJyI+JyArIHByZXZUZXh0ICsgJzwvc3Bhbj48L2E+JykpOwoJCXZhciBuZXh0VGV4dCA9IHRoaXMuX2dldChpbnN0LCAnbmV4dFRleHQnKTsKCQluZXh0VGV4dCA9ICghbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA/IG5leHRUZXh0IDogdGhpcy5mb3JtYXREYXRlKG5leHRUZXh0LAoJCQl0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoICsgc3RlcE1vbnRocywgMSkpLAoJCQl0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTsKCQl2YXIgbmV4dCA9ICh0aGlzLl9jYW5BZGp1c3RNb250aChpbnN0LCArMSwgZHJhd1llYXIsIGRyYXdNb250aCkgPwoJCQknPGEgY2xhc3M9InVpLWRhdGVwaWNrZXItbmV4dCB1aS1jb3JuZXItYWxsIiBkYXRhLWhhbmRsZXI9Im5leHQiIGRhdGEtZXZlbnQ9ImNsaWNrIicgKwoJCQknIHRpdGxlPSInICsgbmV4dFRleHQgKyAnIj48c3BhbiBjbGFzcz0idWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0nICsgKCBpc1JUTCA/ICd3JyA6ICdlJykgKyAnIj4nICsgbmV4dFRleHQgKyAnPC9zcGFuPjwvYT4nIDoKCQkJKGhpZGVJZk5vUHJldk5leHQgPyAnJyA6ICc8YSBjbGFzcz0idWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQiIHRpdGxlPSInKyBuZXh0VGV4dCArICciPjxzcGFuIGNsYXNzPSJ1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLScgKyAoIGlzUlRMID8gJ3cnIDogJ2UnKSArICciPicgKyBuZXh0VGV4dCArICc8L3NwYW4+PC9hPicpKTsKCQl2YXIgY3VycmVudFRleHQgPSB0aGlzLl9nZXQoaW5zdCwgJ2N1cnJlbnRUZXh0Jyk7CgkJdmFyIGdvdG9EYXRlID0gKHRoaXMuX2dldChpbnN0LCAnZ290b0N1cnJlbnQnKSAmJiBpbnN0LmN1cnJlbnREYXkgPyBjdXJyZW50RGF0ZSA6IHRvZGF5KTsKCQljdXJyZW50VGV4dCA9ICghbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA/IGN1cnJlbnRUZXh0IDoKCQkJdGhpcy5mb3JtYXREYXRlKGN1cnJlbnRUZXh0LCBnb3RvRGF0ZSwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGluc3QpKSk7CgkJdmFyIGNvbnRyb2xzID0gKCFpbnN0LmlubGluZSA/ICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InVpLWRhdGVwaWNrZXItY2xvc2UgdWktc3RhdGUtZGVmYXVsdCB1aS1wcmlvcml0eS1wcmltYXJ5IHVpLWNvcm5lci1hbGwiIGRhdGEtaGFuZGxlcj0iaGlkZSIgZGF0YS1ldmVudD0iY2xpY2siPicgKwoJCQl0aGlzLl9nZXQoaW5zdCwgJ2Nsb3NlVGV4dCcpICsgJzwvYnV0dG9uPicgOiAnJyk7CgkJdmFyIGJ1dHRvblBhbmVsID0gKHNob3dCdXR0b25QYW5lbCkgPyAnPGRpdiBjbGFzcz0idWktZGF0ZXBpY2tlci1idXR0b25wYW5lIHVpLXdpZGdldC1jb250ZW50Ij4nICsgKGlzUlRMID8gY29udHJvbHMgOiAnJykgKwoJCQkodGhpcy5faXNJblJhbmdlKGluc3QsIGdvdG9EYXRlKSA/ICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9InVpLWRhdGVwaWNrZXItY3VycmVudCB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXNlY29uZGFyeSB1aS1jb3JuZXItYWxsIiBkYXRhLWhhbmRsZXI9InRvZGF5IiBkYXRhLWV2ZW50PSJjbGljayInICsKCQkJJz4nICsgY3VycmVudFRleHQgKyAnPC9idXR0b24+JyA6ICcnKSArIChpc1JUTCA/ICcnIDogY29udHJvbHMpICsgJzwvZGl2PicgOiAnJzsKCQl2YXIgZmlyc3REYXkgPSBwYXJzZUludCh0aGlzLl9nZXQoaW5zdCwgJ2ZpcnN0RGF5JyksMTApOwoJCWZpcnN0RGF5ID0gKGlzTmFOKGZpcnN0RGF5KSA/IDAgOiBmaXJzdERheSk7CgkJdmFyIHNob3dXZWVrID0gdGhpcy5fZ2V0KGluc3QsICdzaG93V2VlaycpOwoJCXZhciBkYXlOYW1lcyA9IHRoaXMuX2dldChpbnN0LCAnZGF5TmFtZXMnKTsKCQl2YXIgZGF5TmFtZXNTaG9ydCA9IHRoaXMuX2dldChpbnN0LCAnZGF5TmFtZXNTaG9ydCcpOwoJCXZhciBkYXlOYW1lc01pbiA9IHRoaXMuX2dldChpbnN0LCAnZGF5TmFtZXNNaW4nKTsKCQl2YXIgbW9udGhOYW1lcyA9IHRoaXMuX2dldChpbnN0LCAnbW9udGhOYW1lcycpOwoJCXZhciBtb250aE5hbWVzU2hvcnQgPSB0aGlzLl9nZXQoaW5zdCwgJ21vbnRoTmFtZXNTaG9ydCcpOwoJCXZhciBiZWZvcmVTaG93RGF5ID0gdGhpcy5fZ2V0KGluc3QsICdiZWZvcmVTaG93RGF5Jyk7CgkJdmFyIHNob3dPdGhlck1vbnRocyA9IHRoaXMuX2dldChpbnN0LCAnc2hvd090aGVyTW9udGhzJyk7CgkJdmFyIHNlbGVjdE90aGVyTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsICdzZWxlY3RPdGhlck1vbnRocycpOwoJCXZhciBjYWxjdWxhdGVXZWVrID0gdGhpcy5fZ2V0KGluc3QsICdjYWxjdWxhdGVXZWVrJykgfHwgdGhpcy5pc284NjAxV2VlazsKCQl2YXIgZGVmYXVsdERhdGUgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZShpbnN0KTsKCQl2YXIgaHRtbCA9ICcnOwoJCWZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG51bU1vbnRoc1swXTsgcm93KyspIHsKCQkJdmFyIGdyb3VwID0gJyc7CgkJCXRoaXMubWF4Um93cyA9IDQ7CgkJCWZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG51bU1vbnRoc1sxXTsgY29sKyspIHsKCQkJCXZhciBzZWxlY3RlZERhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoLCBpbnN0LnNlbGVjdGVkRGF5KSk7CgkJCQl2YXIgY29ybmVyQ2xhc3MgPSAnIHVpLWNvcm5lci1hbGwnOwoJCQkJdmFyIGNhbGVuZGVyID0gJyc7CgkJCQlpZiAoaXNNdWx0aU1vbnRoKSB7CgkJCQkJY2FsZW5kZXIgKz0gJzxkaXYgY2xhc3M9InVpLWRhdGVwaWNrZXItZ3JvdXAnOwoJCQkJCWlmIChudW1Nb250aHNbMV0gPiAxKQoJCQkJCQlzd2l0Y2ggKGNvbCkgewoJCQkJCQkJY2FzZSAwOiBjYWxlbmRlciArPSAnIHVpLWRhdGVwaWNrZXItZ3JvdXAtZmlyc3QnOwoJCQkJCQkJCWNvcm5lckNsYXNzID0gJyB1aS1jb3JuZXItJyArIChpc1JUTCA/ICdyaWdodCcgOiAnbGVmdCcpOyBicmVhazsKCQkJCQkJCWNhc2UgbnVtTW9udGhzWzFdLTE6IGNhbGVuZGVyICs9ICcgdWktZGF0ZXBpY2tlci1ncm91cC1sYXN0JzsKCQkJCQkJCQljb3JuZXJDbGFzcyA9ICcgdWktY29ybmVyLScgKyAoaXNSVEwgPyAnbGVmdCcgOiAncmlnaHQnKTsgYnJlYWs7CgkJCQkJCQlkZWZhdWx0OiBjYWxlbmRlciArPSAnIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlJzsgY29ybmVyQ2xhc3MgPSAnJzsgYnJlYWs7CgkJCQkJCX0KCQkJCQljYWxlbmRlciArPSAnIj4nOwoJCQkJfQoJCQkJY2FsZW5kZXIgKz0gJzxkaXYgY2xhc3M9InVpLWRhdGVwaWNrZXItaGVhZGVyIHVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4JyArIGNvcm5lckNsYXNzICsgJyI+JyArCgkJCQkJKC9hbGx8bGVmdC8udGVzdChjb3JuZXJDbGFzcykgJiYgcm93ID09IDAgPyAoaXNSVEwgPyBuZXh0IDogcHJldikgOiAnJykgKwoJCQkJCSgvYWxsfHJpZ2h0Ly50ZXN0KGNvcm5lckNsYXNzKSAmJiByb3cgPT0gMCA/IChpc1JUTCA/IHByZXYgOiBuZXh0KSA6ICcnKSArCgkJCQkJdGhpcy5fZ2VuZXJhdGVNb250aFllYXJIZWFkZXIoaW5zdCwgZHJhd01vbnRoLCBkcmF3WWVhciwgbWluRGF0ZSwgbWF4RGF0ZSwKCQkJCQlyb3cgPiAwIHx8IGNvbCA+IDAsIG1vbnRoTmFtZXMsIG1vbnRoTmFtZXNTaG9ydCkgKyAvLyBkcmF3IG1vbnRoIGhlYWRlcnMKCQkJCQknPC9kaXY+PHRhYmxlIGNsYXNzPSJ1aS1kYXRlcGlja2VyLWNhbGVuZGFyIj48dGhlYWQ+JyArCgkJCQkJJzx0cj4nOwoJCQkJdmFyIHRoZWFkID0gKHNob3dXZWVrID8gJzx0aCBjbGFzcz0idWktZGF0ZXBpY2tlci13ZWVrLWNvbCI+JyArIHRoaXMuX2dldChpbnN0LCAnd2Vla0hlYWRlcicpICsgJzwvdGg+JyA6ICcnKTsKCQkJCWZvciAodmFyIGRvdyA9IDA7IGRvdyA8IDc7IGRvdysrKSB7IC8vIGRheXMgb2YgdGhlIHdlZWsKCQkJCQl2YXIgZGF5ID0gKGRvdyArIGZpcnN0RGF5KSAlIDc7CgkJCQkJdGhlYWQgKz0gJzx0aCcgKyAoKGRvdyArIGZpcnN0RGF5ICsgNikgJSA3ID49IDUgPyAnIGNsYXNzPSJ1aS1kYXRlcGlja2VyLXdlZWstZW5kIicgOiAnJykgKyAnPicgKwoJCQkJCQknPHNwYW4gdGl0bGU9IicgKyBkYXlOYW1lc1tkYXldICsgJyI+JyArIGRheU5hbWVzTWluW2RheV0gKyAnPC9zcGFuPjwvdGg+JzsKCQkJCX0KCQkJCWNhbGVuZGVyICs9IHRoZWFkICsgJzwvdHI+PC90aGVhZD48dGJvZHk+JzsKCQkJCXZhciBkYXlzSW5Nb250aCA9IHRoaXMuX2dldERheXNJbk1vbnRoKGRyYXdZZWFyLCBkcmF3TW9udGgpOwoJCQkJaWYgKGRyYXdZZWFyID09IGluc3Quc2VsZWN0ZWRZZWFyICYmIGRyYXdNb250aCA9PSBpbnN0LnNlbGVjdGVkTW9udGgpCgkJCQkJaW5zdC5zZWxlY3RlZERheSA9IE1hdGgubWluKGluc3Quc2VsZWN0ZWREYXksIGRheXNJbk1vbnRoKTsKCQkJCXZhciBsZWFkRGF5cyA9ICh0aGlzLl9nZXRGaXJzdERheU9mTW9udGgoZHJhd1llYXIsIGRyYXdNb250aCkgLSBmaXJzdERheSArIDcpICUgNzsKCQkJCXZhciBjdXJSb3dzID0gTWF0aC5jZWlsKChsZWFkRGF5cyArIGRheXNJbk1vbnRoKSAvIDcpOyAvLyBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiByb3dzIHRvIGdlbmVyYXRlCgkJCQl2YXIgbnVtUm93cyA9IChpc011bHRpTW9udGggPyB0aGlzLm1heFJvd3MgPiBjdXJSb3dzID8gdGhpcy5tYXhSb3dzIDogY3VyUm93cyA6IGN1clJvd3MpOyAvL0lmIG11bHRpcGxlIG1vbnRocywgdXNlIHRoZSBoaWdoZXIgbnVtYmVyIG9mIHJvd3MgKHNlZSAjNzA0MykKCQkJCXRoaXMubWF4Um93cyA9IG51bVJvd3M7CgkJCQl2YXIgcHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZHJhd1llYXIsIGRyYXdNb250aCwgMSAtIGxlYWREYXlzKSk7CgkJCQlmb3IgKHZhciBkUm93ID0gMDsgZFJvdyA8IG51bVJvd3M7IGRSb3crKykgeyAvLyBjcmVhdGUgZGF0ZSBwaWNrZXIgcm93cwoJCQkJCWNhbGVuZGVyICs9ICc8dHI+JzsKCQkJCQl2YXIgdGJvZHkgPSAoIXNob3dXZWVrID8gJycgOiAnPHRkIGNsYXNzPSJ1aS1kYXRlcGlja2VyLXdlZWstY29sIj4nICsKCQkJCQkJdGhpcy5fZ2V0KGluc3QsICdjYWxjdWxhdGVXZWVrJykocHJpbnREYXRlKSArICc8L3RkPicpOwoJCQkJCWZvciAodmFyIGRvdyA9IDA7IGRvdyA8IDc7IGRvdysrKSB7IC8vIGNyZWF0ZSBkYXRlIHBpY2tlciBkYXlzCgkJCQkJCXZhciBkYXlTZXR0aW5ncyA9IChiZWZvcmVTaG93RGF5ID8KCQkJCQkJCWJlZm9yZVNob3dEYXkuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksIFtwcmludERhdGVdKSA6IFt0cnVlLCAnJ10pOwoJCQkJCQl2YXIgb3RoZXJNb250aCA9IChwcmludERhdGUuZ2V0TW9udGgoKSAhPSBkcmF3TW9udGgpOwoJCQkJCQl2YXIgdW5zZWxlY3RhYmxlID0gKG90aGVyTW9udGggJiYgIXNlbGVjdE90aGVyTW9udGhzKSB8fCAhZGF5U2V0dGluZ3NbMF0gfHwKCQkJCQkJCShtaW5EYXRlICYmIHByaW50RGF0ZSA8IG1pbkRhdGUpIHx8IChtYXhEYXRlICYmIHByaW50RGF0ZSA+IG1heERhdGUpOwoJCQkJCQl0Ym9keSArPSAnPHRkIGNsYXNzPSInICsKCQkJCQkJCSgoZG93ICsgZmlyc3REYXkgKyA2KSAlIDcgPj0gNSA/ICcgdWktZGF0ZXBpY2tlci13ZWVrLWVuZCcgOiAnJykgKyAvLyBoaWdobGlnaHQgd2Vla2VuZHMKCQkJCQkJCShvdGhlck1vbnRoID8gJyB1aS1kYXRlcGlja2VyLW90aGVyLW1vbnRoJyA6ICcnKSArIC8vIGhpZ2hsaWdodCBkYXlzIGZyb20gb3RoZXIgbW9udGhzCgkJCQkJCQkoKHByaW50RGF0ZS5nZXRUaW1lKCkgPT0gc2VsZWN0ZWREYXRlLmdldFRpbWUoKSAmJiBkcmF3TW9udGggPT0gaW5zdC5zZWxlY3RlZE1vbnRoICYmIGluc3QuX2tleUV2ZW50KSB8fCAvLyB1c2VyIHByZXNzZWQga2V5CgkJCQkJCQkoZGVmYXVsdERhdGUuZ2V0VGltZSgpID09IHByaW50RGF0ZS5nZXRUaW1lKCkgJiYgZGVmYXVsdERhdGUuZ2V0VGltZSgpID09IHNlbGVjdGVkRGF0ZS5nZXRUaW1lKCkpID8KCQkJCQkJCS8vIG9yIGRlZmF1bHREYXRlIGlzIGN1cnJlbnQgcHJpbnRlZERhdGUgYW5kIGRlZmF1bHREYXRlIGlzIHNlbGVjdGVkRGF0ZQoJCQkJCQkJJyAnICsgdGhpcy5fZGF5T3ZlckNsYXNzIDogJycpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKHVuc2VsZWN0YWJsZSA/ICcgJyArIHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzICsgJyB1aS1zdGF0ZS1kaXNhYmxlZCc6ICcnKSArICAvLyBoaWdobGlnaHQgdW5zZWxlY3RhYmxlIGRheXMKCQkJCQkJCShvdGhlck1vbnRoICYmICFzaG93T3RoZXJNb250aHMgPyAnJyA6ICcgJyArIGRheVNldHRpbmdzWzFdICsgLy8gaGlnaGxpZ2h0IGN1c3RvbSBkYXRlcwoJCQkJCQkJKHByaW50RGF0ZS5nZXRUaW1lKCkgPT0gY3VycmVudERhdGUuZ2V0VGltZSgpID8gJyAnICsgdGhpcy5fY3VycmVudENsYXNzIDogJycpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKHByaW50RGF0ZS5nZXRUaW1lKCkgPT0gdG9kYXkuZ2V0VGltZSgpID8gJyB1aS1kYXRlcGlja2VyLXRvZGF5JyA6ICcnKSkgKyAnIicgKyAvLyBoaWdobGlnaHQgdG9kYXkgKGlmIGRpZmZlcmVudCkKCQkJCQkJCSgoIW90aGVyTW9udGggfHwgc2hvd090aGVyTW9udGhzKSAmJiBkYXlTZXR0aW5nc1syXSA/ICcgdGl0bGU9IicgKyBkYXlTZXR0aW5nc1syXSArICciJyA6ICcnKSArIC8vIGNlbGwgdGl0bGUKCQkJCQkJCSh1bnNlbGVjdGFibGUgPyAnJyA6ICcgZGF0YS1oYW5kbGVyPSJzZWxlY3REYXkiIGRhdGEtZXZlbnQ9ImNsaWNrIiBkYXRhLW1vbnRoPSInICsgcHJpbnREYXRlLmdldE1vbnRoKCkgKyAnIiBkYXRhLXllYXI9IicgKyBwcmludERhdGUuZ2V0RnVsbFllYXIoKSArICciJykgKyAnPicgKyAvLyBhY3Rpb25zCgkJCQkJCQkob3RoZXJNb250aCAmJiAhc2hvd090aGVyTW9udGhzID8gJyYjeGEwOycgOiAvLyBkaXNwbGF5IGZvciBvdGhlciBtb250aHMKCQkJCQkJCSh1bnNlbGVjdGFibGUgPyAnPHNwYW4gY2xhc3M9InVpLXN0YXRlLWRlZmF1bHQiPicgKyBwcmludERhdGUuZ2V0RGF0ZSgpICsgJzwvc3Bhbj4nIDogJzxhIGNsYXNzPSJ1aS1zdGF0ZS1kZWZhdWx0JyArCgkJCQkJCQkocHJpbnREYXRlLmdldFRpbWUoKSA9PSB0b2RheS5nZXRUaW1lKCkgPyAnIHVpLXN0YXRlLWhpZ2hsaWdodCcgOiAnJykgKwoJCQkJCQkJKHByaW50RGF0ZS5nZXRUaW1lKCkgPT0gY3VycmVudERhdGUuZ2V0VGltZSgpID8gJyB1aS1zdGF0ZS1hY3RpdmUnIDogJycpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKG90aGVyTW9udGggPyAnIHVpLXByaW9yaXR5LXNlY29uZGFyeScgOiAnJykgKyAvLyBkaXN0aW5ndWlzaCBkYXRlcyBmcm9tIG90aGVyIG1vbnRocwoJCQkJCQkJJyIgaHJlZj0iIyI+JyArIHByaW50RGF0ZS5nZXREYXRlKCkgKyAnPC9hPicpKSArICc8L3RkPic7IC8vIGRpc3BsYXkgc2VsZWN0YWJsZSBkYXRlCgkJCQkJCXByaW50RGF0ZS5zZXREYXRlKHByaW50RGF0ZS5nZXREYXRlKCkgKyAxKTsKCQkJCQkJcHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QocHJpbnREYXRlKTsKCQkJCQl9CgkJCQkJY2FsZW5kZXIgKz0gdGJvZHkgKyAnPC90cj4nOwoJCQkJfQoJCQkJZHJhd01vbnRoKys7CgkJCQlpZiAoZHJhd01vbnRoID4gMTEpIHsKCQkJCQlkcmF3TW9udGggPSAwOwoJCQkJCWRyYXdZZWFyKys7CgkJCQl9CgkJCQljYWxlbmRlciArPSAnPC90Ym9keT48L3RhYmxlPicgKyAoaXNNdWx0aU1vbnRoID8gJzwvZGl2PicgKwoJCQkJCQkJKChudW1Nb250aHNbMF0gPiAwICYmIGNvbCA9PSBudW1Nb250aHNbMV0tMSkgPyAnPGRpdiBjbGFzcz0idWktZGF0ZXBpY2tlci1yb3ctYnJlYWsiPjwvZGl2PicgOiAnJykgOiAnJyk7CgkJCQlncm91cCArPSBjYWxlbmRlcjsKCQkJfQoJCQlodG1sICs9IGdyb3VwOwoJCX0KCQlodG1sICs9IGJ1dHRvblBhbmVsICsgKCQudWkuaWU2ICYmICFpbnN0LmlubGluZSA/CgkJCSc8aWZyYW1lIHNyYz0iamF2YXNjcmlwdDpmYWxzZTsiIGNsYXNzPSJ1aS1kYXRlcGlja2VyLWNvdmVyIiBmcmFtZWJvcmRlcj0iMCI+PC9pZnJhbWU+JyA6ICcnKTsKCQlpbnN0Ll9rZXlFdmVudCA9IGZhbHNlOwoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBHZW5lcmF0ZSB0aGUgbW9udGggYW5kIHllYXIgaGVhZGVyLiAqLwoJX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyOiBmdW5jdGlvbihpbnN0LCBkcmF3TW9udGgsIGRyYXdZZWFyLCBtaW5EYXRlLCBtYXhEYXRlLAoJCQlzZWNvbmRhcnksIG1vbnRoTmFtZXMsIG1vbnRoTmFtZXNTaG9ydCkgewoJCXZhciBjaGFuZ2VNb250aCA9IHRoaXMuX2dldChpbnN0LCAnY2hhbmdlTW9udGgnKTsKCQl2YXIgY2hhbmdlWWVhciA9IHRoaXMuX2dldChpbnN0LCAnY2hhbmdlWWVhcicpOwoJCXZhciBzaG93TW9udGhBZnRlclllYXIgPSB0aGlzLl9nZXQoaW5zdCwgJ3Nob3dNb250aEFmdGVyWWVhcicpOwoJCXZhciBodG1sID0gJzxkaXYgY2xhc3M9InVpLWRhdGVwaWNrZXItdGl0bGUiPic7CgkJdmFyIG1vbnRoSHRtbCA9ICcnOwoJCS8vIG1vbnRoIHNlbGVjdGlvbgoJCWlmIChzZWNvbmRhcnkgfHwgIWNoYW5nZU1vbnRoKQoJCQltb250aEh0bWwgKz0gJzxzcGFuIGNsYXNzPSJ1aS1kYXRlcGlja2VyLW1vbnRoIj4nICsgbW9udGhOYW1lc1tkcmF3TW9udGhdICsgJzwvc3Bhbj4nOwoJCWVsc2UgewoJCQl2YXIgaW5NaW5ZZWFyID0gKG1pbkRhdGUgJiYgbWluRGF0ZS5nZXRGdWxsWWVhcigpID09IGRyYXdZZWFyKTsKCQkJdmFyIGluTWF4WWVhciA9IChtYXhEYXRlICYmIG1heERhdGUuZ2V0RnVsbFllYXIoKSA9PSBkcmF3WWVhcik7CgkJCW1vbnRoSHRtbCArPSAnPHNlbGVjdCBjbGFzcz0idWktZGF0ZXBpY2tlci1tb250aCIgZGF0YS1oYW5kbGVyPSJzZWxlY3RNb250aCIgZGF0YS1ldmVudD0iY2hhbmdlIj4nOwoJCQlmb3IgKHZhciBtb250aCA9IDA7IG1vbnRoIDwgMTI7IG1vbnRoKyspIHsKCQkJCWlmICgoIWluTWluWWVhciB8fCBtb250aCA+PSBtaW5EYXRlLmdldE1vbnRoKCkpICYmCgkJCQkJCSghaW5NYXhZZWFyIHx8IG1vbnRoIDw9IG1heERhdGUuZ2V0TW9udGgoKSkpCgkJCQkJbW9udGhIdG1sICs9ICc8b3B0aW9uIHZhbHVlPSInICsgbW9udGggKyAnIicgKwoJCQkJCQkobW9udGggPT0gZHJhd01vbnRoID8gJyBzZWxlY3RlZD0ic2VsZWN0ZWQiJyA6ICcnKSArCgkJCQkJCSc+JyArIG1vbnRoTmFtZXNTaG9ydFttb250aF0gKyAnPC9vcHRpb24+JzsKCQkJfQoJCQltb250aEh0bWwgKz0gJzwvc2VsZWN0Pic7CgkJfQoJCWlmICghc2hvd01vbnRoQWZ0ZXJZZWFyKQoJCQlodG1sICs9IG1vbnRoSHRtbCArIChzZWNvbmRhcnkgfHwgIShjaGFuZ2VNb250aCAmJiBjaGFuZ2VZZWFyKSA/ICcmI3hhMDsnIDogJycpOwoJCS8vIHllYXIgc2VsZWN0aW9uCgkJaWYgKCAhaW5zdC55ZWFyc2h0bWwgKSB7CgkJCWluc3QueWVhcnNodG1sID0gJyc7CgkJCWlmIChzZWNvbmRhcnkgfHwgIWNoYW5nZVllYXIpCgkJCQlodG1sICs9ICc8c3BhbiBjbGFzcz0idWktZGF0ZXBpY2tlci15ZWFyIj4nICsgZHJhd1llYXIgKyAnPC9zcGFuPic7CgkJCWVsc2UgewoJCQkJLy8gZGV0ZXJtaW5lIHJhbmdlIG9mIHllYXJzIHRvIGRpc3BsYXkKCQkJCXZhciB5ZWFycyA9IHRoaXMuX2dldChpbnN0LCAneWVhclJhbmdlJykuc3BsaXQoJzonKTsKCQkJCXZhciB0aGlzWWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTsKCQkJCXZhciBkZXRlcm1pbmVZZWFyID0gZnVuY3Rpb24odmFsdWUpIHsKCQkJCQl2YXIgeWVhciA9ICh2YWx1ZS5tYXRjaCgvY1srLV0uKi8pID8gZHJhd1llYXIgKyBwYXJzZUludCh2YWx1ZS5zdWJzdHJpbmcoMSksIDEwKSA6CgkJCQkJCSh2YWx1ZS5tYXRjaCgvWystXS4qLykgPyB0aGlzWWVhciArIHBhcnNlSW50KHZhbHVlLCAxMCkgOgoJCQkJCQlwYXJzZUludCh2YWx1ZSwgMTApKSk7CgkJCQkJcmV0dXJuIChpc05hTih5ZWFyKSA/IHRoaXNZZWFyIDogeWVhcik7CgkJCQl9OwoJCQkJdmFyIHllYXIgPSBkZXRlcm1pbmVZZWFyKHllYXJzWzBdKTsKCQkJCXZhciBlbmRZZWFyID0gTWF0aC5tYXgoeWVhciwgZGV0ZXJtaW5lWWVhcih5ZWFyc1sxXSB8fCAnJykpOwoJCQkJeWVhciA9IChtaW5EYXRlID8gTWF0aC5tYXgoeWVhciwgbWluRGF0ZS5nZXRGdWxsWWVhcigpKSA6IHllYXIpOwoJCQkJZW5kWWVhciA9IChtYXhEYXRlID8gTWF0aC5taW4oZW5kWWVhciwgbWF4RGF0ZS5nZXRGdWxsWWVhcigpKSA6IGVuZFllYXIpOwoJCQkJaW5zdC55ZWFyc2h0bWwgKz0gJzxzZWxlY3QgY2xhc3M9InVpLWRhdGVwaWNrZXIteWVhciIgZGF0YS1oYW5kbGVyPSJzZWxlY3RZZWFyIiBkYXRhLWV2ZW50PSJjaGFuZ2UiPic7CgkJCQlmb3IgKDsgeWVhciA8PSBlbmRZZWFyOyB5ZWFyKyspIHsKCQkJCQlpbnN0LnllYXJzaHRtbCArPSAnPG9wdGlvbiB2YWx1ZT0iJyArIHllYXIgKyAnIicgKwoJCQkJCQkoeWVhciA9PSBkcmF3WWVhciA/ICcgc2VsZWN0ZWQ9InNlbGVjdGVkIicgOiAnJykgKwoJCQkJCQknPicgKyB5ZWFyICsgJzwvb3B0aW9uPic7CgkJCQl9CgkJCQlpbnN0LnllYXJzaHRtbCArPSAnPC9zZWxlY3Q+JzsKCgkJCQlodG1sICs9IGluc3QueWVhcnNodG1sOwoJCQkJaW5zdC55ZWFyc2h0bWwgPSBudWxsOwoJCQl9CgkJfQoJCWh0bWwgKz0gdGhpcy5fZ2V0KGluc3QsICd5ZWFyU3VmZml4Jyk7CgkJaWYgKHNob3dNb250aEFmdGVyWWVhcikKCQkJaHRtbCArPSAoc2Vjb25kYXJ5IHx8ICEoY2hhbmdlTW9udGggJiYgY2hhbmdlWWVhcikgPyAnJiN4YTA7JyA6ICcnKSArIG1vbnRoSHRtbDsKCQlodG1sICs9ICc8L2Rpdj4nOyAvLyBDbG9zZSBkYXRlcGlja2VyX2hlYWRlcgoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBBZGp1c3Qgb25lIG9mIHRoZSBkYXRlIHN1Yi1maWVsZHMuICovCglfYWRqdXN0SW5zdERhdGU6IGZ1bmN0aW9uKGluc3QsIG9mZnNldCwgcGVyaW9kKSB7CgkJdmFyIHllYXIgPSBpbnN0LmRyYXdZZWFyICsgKHBlcmlvZCA9PSAnWScgPyBvZmZzZXQgOiAwKTsKCQl2YXIgbW9udGggPSBpbnN0LmRyYXdNb250aCArIChwZXJpb2QgPT0gJ00nID8gb2Zmc2V0IDogMCk7CgkJdmFyIGRheSA9IE1hdGgubWluKGluc3Quc2VsZWN0ZWREYXksIHRoaXMuX2dldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSkgKwoJCQkocGVyaW9kID09ICdEJyA/IG9mZnNldCA6IDApOwoJCXZhciBkYXRlID0gdGhpcy5fcmVzdHJpY3RNaW5NYXgoaW5zdCwKCQkJdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoeWVhciwgbW9udGgsIGRheSkpKTsKCQlpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7CgkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCWlmIChwZXJpb2QgPT0gJ00nIHx8IHBlcmlvZCA9PSAnWScpCgkJCXRoaXMuX25vdGlmeUNoYW5nZShpbnN0KTsKCX0sCgoJLyogRW5zdXJlIGEgZGF0ZSBpcyB3aXRoaW4gYW55IG1pbi9tYXggYm91bmRzLiAqLwoJX3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbihpbnN0LCBkYXRlKSB7CgkJdmFyIG1pbkRhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICdtaW4nKTsKCQl2YXIgbWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgJ21heCcpOwoJCXZhciBuZXdEYXRlID0gKG1pbkRhdGUgJiYgZGF0ZSA8IG1pbkRhdGUgPyBtaW5EYXRlIDogZGF0ZSk7CgkJbmV3RGF0ZSA9IChtYXhEYXRlICYmIG5ld0RhdGUgPiBtYXhEYXRlID8gbWF4RGF0ZSA6IG5ld0RhdGUpOwoJCXJldHVybiBuZXdEYXRlOwoJfSwKCgkvKiBOb3RpZnkgY2hhbmdlIG9mIG1vbnRoL3llYXIuICovCglfbm90aWZ5Q2hhbmdlOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIG9uQ2hhbmdlID0gdGhpcy5fZ2V0KGluc3QsICdvbkNoYW5nZU1vbnRoWWVhcicpOwoJCWlmIChvbkNoYW5nZSkKCQkJb25DaGFuZ2UuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksCgkJCQlbaW5zdC5zZWxlY3RlZFllYXIsIGluc3Quc2VsZWN0ZWRNb250aCArIDEsIGluc3RdKTsKCX0sCgoJLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgbW9udGhzIHRvIHNob3cuICovCglfZ2V0TnVtYmVyT2ZNb250aHM6IGZ1bmN0aW9uKGluc3QpIHsKCQl2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsICdudW1iZXJPZk1vbnRocycpOwoJCXJldHVybiAobnVtTW9udGhzID09IG51bGwgPyBbMSwgMV0gOiAodHlwZW9mIG51bU1vbnRocyA9PSAnbnVtYmVyJyA/IFsxLCBudW1Nb250aHNdIDogbnVtTW9udGhzKSk7Cgl9LAoKCS8qIERldGVybWluZSB0aGUgY3VycmVudCBtYXhpbXVtIGRhdGUgLSBlbnN1cmUgbm8gdGltZSBjb21wb25lbnRzIGFyZSBzZXQuICovCglfZ2V0TWluTWF4RGF0ZTogZnVuY3Rpb24oaW5zdCwgbWluTWF4KSB7CgkJcmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUoaW5zdCwgdGhpcy5fZ2V0KGluc3QsIG1pbk1heCArICdEYXRlJyksIG51bGwpOwoJfSwKCgkvKiBGaW5kIHRoZSBudW1iZXIgb2YgZGF5cyBpbiBhIGdpdmVuIG1vbnRoLiAqLwoJX2dldERheXNJbk1vbnRoOiBmdW5jdGlvbih5ZWFyLCBtb250aCkgewoJCXJldHVybiAzMiAtIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHllYXIsIG1vbnRoLCAzMikpLmdldERhdGUoKTsKCX0sCgoJLyogRmluZCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBmaXJzdCBvZiBhIG1vbnRoLiAqLwoJX2dldEZpcnN0RGF5T2ZNb250aDogZnVuY3Rpb24oeWVhciwgbW9udGgpIHsKCQlyZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpLmdldERheSgpOwoJfSwKCgkvKiBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBhbGxvdyBhICJuZXh0L3ByZXYiIG1vbnRoIGRpc3BsYXkgY2hhbmdlLiAqLwoJX2NhbkFkanVzdE1vbnRoOiBmdW5jdGlvbihpbnN0LCBvZmZzZXQsIGN1clllYXIsIGN1ck1vbnRoKSB7CgkJdmFyIG51bU1vbnRocyA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGluc3QpOwoJCXZhciBkYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoY3VyWWVhciwKCQkJY3VyTW9udGggKyAob2Zmc2V0IDwgMCA/IG9mZnNldCA6IG51bU1vbnRoc1swXSAqIG51bU1vbnRoc1sxXSksIDEpKTsKCQlpZiAob2Zmc2V0IDwgMCkKCQkJZGF0ZS5zZXREYXRlKHRoaXMuX2dldERheXNJbk1vbnRoKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpKSk7CgkJcmV0dXJuIHRoaXMuX2lzSW5SYW5nZShpbnN0LCBkYXRlKTsKCX0sCgoJLyogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIGFjY2VwdGVkIHJhbmdlPyAqLwoJX2lzSW5SYW5nZTogZnVuY3Rpb24oaW5zdCwgZGF0ZSkgewoJCXZhciBtaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCAnbWluJyk7CgkJdmFyIG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICdtYXgnKTsKCQlyZXR1cm4gKCghbWluRGF0ZSB8fCBkYXRlLmdldFRpbWUoKSA+PSBtaW5EYXRlLmdldFRpbWUoKSkgJiYKCQkJKCFtYXhEYXRlIHx8IGRhdGUuZ2V0VGltZSgpIDw9IG1heERhdGUuZ2V0VGltZSgpKSk7Cgl9LAoKCS8qIFByb3ZpZGUgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIGZvcm1hdHRpbmcvcGFyc2luZy4gKi8KCV9nZXRGb3JtYXRDb25maWc6IGZ1bmN0aW9uKGluc3QpIHsKCQl2YXIgc2hvcnRZZWFyQ3V0b2ZmID0gdGhpcy5fZ2V0KGluc3QsICdzaG9ydFllYXJDdXRvZmYnKTsKCQlzaG9ydFllYXJDdXRvZmYgPSAodHlwZW9mIHNob3J0WWVhckN1dG9mZiAhPSAnc3RyaW5nJyA/IHNob3J0WWVhckN1dG9mZiA6CgkJCW5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArIHBhcnNlSW50KHNob3J0WWVhckN1dG9mZiwgMTApKTsKCQlyZXR1cm4ge3Nob3J0WWVhckN1dG9mZjogc2hvcnRZZWFyQ3V0b2ZmLAoJCQlkYXlOYW1lc1Nob3J0OiB0aGlzLl9nZXQoaW5zdCwgJ2RheU5hbWVzU2hvcnQnKSwgZGF5TmFtZXM6IHRoaXMuX2dldChpbnN0LCAnZGF5TmFtZXMnKSwKCQkJbW9udGhOYW1lc1Nob3J0OiB0aGlzLl9nZXQoaW5zdCwgJ21vbnRoTmFtZXNTaG9ydCcpLCBtb250aE5hbWVzOiB0aGlzLl9nZXQoaW5zdCwgJ21vbnRoTmFtZXMnKX07Cgl9LAoKCS8qIEZvcm1hdCB0aGUgZ2l2ZW4gZGF0ZSBmb3IgZGlzcGxheS4gKi8KCV9mb3JtYXREYXRlOiBmdW5jdGlvbihpbnN0LCBkYXksIG1vbnRoLCB5ZWFyKSB7CgkJaWYgKCFkYXkpIHsKCQkJaW5zdC5jdXJyZW50RGF5ID0gaW5zdC5zZWxlY3RlZERheTsKCQkJaW5zdC5jdXJyZW50TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGg7CgkJCWluc3QuY3VycmVudFllYXIgPSBpbnN0LnNlbGVjdGVkWWVhcjsKCQl9CgkJdmFyIGRhdGUgPSAoZGF5ID8gKHR5cGVvZiBkYXkgPT0gJ29iamVjdCcgPyBkYXkgOgoJCQl0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KSkpIDoKCQkJdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoaW5zdC5jdXJyZW50WWVhciwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudERheSkpKTsKCQlyZXR1cm4gdGhpcy5mb3JtYXREYXRlKHRoaXMuX2dldChpbnN0LCAnZGF0ZUZvcm1hdCcpLCBkYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpOwoJfQp9KTsKCi8qCiAqIEJpbmQgaG92ZXIgZXZlbnRzIGZvciBkYXRlcGlja2VyIGVsZW1lbnRzLgogKiBEb25lIHZpYSBkZWxlZ2F0ZSBzbyB0aGUgYmluZGluZyBvbmx5IG9jY3VycyBvbmNlIGluIHRoZSBsaWZldGltZSBvZiB0aGUgcGFyZW50IGRpdi4KICogR2xvYmFsIGluc3RBY3RpdmUsIHNldCBieSBfdXBkYXRlRGF0ZXBpY2tlciBhbGxvd3MgdGhlIGhhbmRsZXJzIHRvIGZpbmQgdGhlaXIgd2F5IGJhY2sgdG8gdGhlIGFjdGl2ZSBwaWNrZXIuCiAqLwpmdW5jdGlvbiBiaW5kSG92ZXIoZHBEaXYpIHsKCXZhciBzZWxlY3RvciA9ICdidXR0b24sIC51aS1kYXRlcGlja2VyLXByZXYsIC51aS1kYXRlcGlja2VyLW5leHQsIC51aS1kYXRlcGlja2VyLWNhbGVuZGFyIHRkIGEnOwoJcmV0dXJuIGRwRGl2LmRlbGVnYXRlKHNlbGVjdG9yLCAnbW91c2VvdXQnLCBmdW5jdGlvbigpIHsKCQkJJCh0aGlzKS5yZW1vdmVDbGFzcygndWktc3RhdGUtaG92ZXInKTsKCQkJaWYgKHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoJ3VpLWRhdGVwaWNrZXItcHJldicpICE9IC0xKSAkKHRoaXMpLnJlbW92ZUNsYXNzKCd1aS1kYXRlcGlja2VyLXByZXYtaG92ZXInKTsKCQkJaWYgKHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoJ3VpLWRhdGVwaWNrZXItbmV4dCcpICE9IC0xKSAkKHRoaXMpLnJlbW92ZUNsYXNzKCd1aS1kYXRlcGlja2VyLW5leHQtaG92ZXInKTsKCQl9KQoJCS5kZWxlZ2F0ZShzZWxlY3RvciwgJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCl7CgkJCWlmICghJC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggaW5zdEFjdGl2ZS5pbmxpbmUgPyBkcERpdi5wYXJlbnQoKVswXSA6IGluc3RBY3RpdmUuaW5wdXRbMF0pKSB7CgkJCQkkKHRoaXMpLnBhcmVudHMoJy51aS1kYXRlcGlja2VyLWNhbGVuZGFyJykuZmluZCgnYScpLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1ob3ZlcicpOwoJCQkJJCh0aGlzKS5hZGRDbGFzcygndWktc3RhdGUtaG92ZXInKTsKCQkJCWlmICh0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCd1aS1kYXRlcGlja2VyLXByZXYnKSAhPSAtMSkgJCh0aGlzKS5hZGRDbGFzcygndWktZGF0ZXBpY2tlci1wcmV2LWhvdmVyJyk7CgkJCQlpZiAodGhpcy5jbGFzc05hbWUuaW5kZXhPZigndWktZGF0ZXBpY2tlci1uZXh0JykgIT0gLTEpICQodGhpcykuYWRkQ2xhc3MoJ3VpLWRhdGVwaWNrZXItbmV4dC1ob3ZlcicpOwoJCQl9CgkJfSk7Cn0KCi8qIGpRdWVyeSBleHRlbmQgbm93IGlnbm9yZXMgbnVsbHMhICovCmZ1bmN0aW9uIGV4dGVuZFJlbW92ZSh0YXJnZXQsIHByb3BzKSB7CgkkLmV4dGVuZCh0YXJnZXQsIHByb3BzKTsKCWZvciAodmFyIG5hbWUgaW4gcHJvcHMpCgkJaWYgKHByb3BzW25hbWVdID09IG51bGwgfHwgcHJvcHNbbmFtZV0gPT0gdW5kZWZpbmVkKQoJCQl0YXJnZXRbbmFtZV0gPSBwcm9wc1tuYW1lXTsKCXJldHVybiB0YXJnZXQ7Cn07CgovKiBJbnZva2UgdGhlIGRhdGVwaWNrZXIgZnVuY3Rpb25hbGl0eS4KICAgQHBhcmFtICBvcHRpb25zICBzdHJpbmcgLSBhIGNvbW1hbmQsIG9wdGlvbmFsbHkgZm9sbG93ZWQgYnkgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIG9yCgkgICAgICAgICAgICAgICAgT2JqZWN0IC0gc2V0dGluZ3MgZm9yIGF0dGFjaGluZyBuZXcgZGF0ZXBpY2tlciBmdW5jdGlvbmFsaXR5CiAgIEByZXR1cm4gIGpRdWVyeSBvYmplY3QgKi8KJC5mbi5kYXRlcGlja2VyID0gZnVuY3Rpb24ob3B0aW9ucyl7CgoJLyogVmVyaWZ5IGFuIGVtcHR5IGNvbGxlY3Rpb24gd2Fzbid0IHBhc3NlZCAtIEZpeGVzICM2OTc2ICovCglpZiAoICF0aGlzLmxlbmd0aCApIHsKCQlyZXR1cm4gdGhpczsKCX0KCgkvKiBJbml0aWFsaXNlIHRoZSBkYXRlIHBpY2tlci4gKi8KCWlmICghJC5kYXRlcGlja2VyLmluaXRpYWxpemVkKSB7CgkJJChkb2N1bWVudCkubW91c2Vkb3duKCQuZGF0ZXBpY2tlci5fY2hlY2tFeHRlcm5hbENsaWNrKS4KCQkJZmluZChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJC5kYXRlcGlja2VyLmRwRGl2KTsKCQkkLmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgPSB0cnVlOwoJfQoKCXZhciBvdGhlckFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwoJaWYgKHR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnICYmIChvcHRpb25zID09ICdpc0Rpc2FibGVkJyB8fCBvcHRpb25zID09ICdnZXREYXRlJyB8fCBvcHRpb25zID09ICd3aWRnZXQnKSkKCQlyZXR1cm4gJC5kYXRlcGlja2VyWydfJyArIG9wdGlvbnMgKyAnRGF0ZXBpY2tlciddLgoJCQlhcHBseSgkLmRhdGVwaWNrZXIsIFt0aGlzWzBdXS5jb25jYXQob3RoZXJBcmdzKSk7CglpZiAob3B0aW9ucyA9PSAnb3B0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09IDIgJiYgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PSAnc3RyaW5nJykKCQlyZXR1cm4gJC5kYXRlcGlja2VyWydfJyArIG9wdGlvbnMgKyAnRGF0ZXBpY2tlciddLgoJCQlhcHBseSgkLmRhdGVwaWNrZXIsIFt0aGlzWzBdXS5jb25jYXQob3RoZXJBcmdzKSk7CglyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCXR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnID8KCQkJJC5kYXRlcGlja2VyWydfJyArIG9wdGlvbnMgKyAnRGF0ZXBpY2tlciddLgoJCQkJYXBwbHkoJC5kYXRlcGlja2VyLCBbdGhpc10uY29uY2F0KG90aGVyQXJncykpIDoKCQkJJC5kYXRlcGlja2VyLl9hdHRhY2hEYXRlcGlja2VyKHRoaXMsIG9wdGlvbnMpOwoJfSk7Cn07CgokLmRhdGVwaWNrZXIgPSBuZXcgRGF0ZXBpY2tlcigpOyAvLyBzaW5nbGV0b24gaW5zdGFuY2UKJC5kYXRlcGlja2VyLmluaXRpYWxpemVkID0gZmFsc2U7CiQuZGF0ZXBpY2tlci51dWlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiQuZGF0ZXBpY2tlci52ZXJzaW9uID0gIjEuOS4yIjsKCi8vIFdvcmthcm91bmQgZm9yICM0MDU1Ci8vIEFkZCBhbm90aGVyIGdsb2JhbCB0byBhdm9pZCBub0NvbmZsaWN0IGlzc3VlcyB3aXRoIGlubGluZSBldmVudCBoYW5kbGVycwp3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXSA9ICQ7Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciB1aURpYWxvZ0NsYXNzZXMgPSAidWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsICIsCglzaXplUmVsYXRlZE9wdGlvbnMgPSB7CgkJYnV0dG9uczogdHJ1ZSwKCQloZWlnaHQ6IHRydWUsCgkJbWF4SGVpZ2h0OiB0cnVlLAoJCW1heFdpZHRoOiB0cnVlLAoJCW1pbkhlaWdodDogdHJ1ZSwKCQltaW5XaWR0aDogdHJ1ZSwKCQl3aWR0aDogdHJ1ZQoJfSwKCXJlc2l6YWJsZVJlbGF0ZWRPcHRpb25zID0gewoJCW1heEhlaWdodDogdHJ1ZSwKCQltYXhXaWR0aDogdHJ1ZSwKCQltaW5IZWlnaHQ6IHRydWUsCgkJbWluV2lkdGg6IHRydWUKCX07CgokLndpZGdldCgidWkuZGlhbG9nIiwgewoJdmVyc2lvbjogIjEuOS4yIiwKCW9wdGlvbnM6IHsKCQlhdXRvT3BlbjogdHJ1ZSwKCQlidXR0b25zOiB7fSwKCQljbG9zZU9uRXNjYXBlOiB0cnVlLAoJCWNsb3NlVGV4dDogImNsb3NlIiwKCQlkaWFsb2dDbGFzczogIiIsCgkJZHJhZ2dhYmxlOiB0cnVlLAoJCWhpZGU6IG51bGwsCgkJaGVpZ2h0OiAiYXV0byIsCgkJbWF4SGVpZ2h0OiBmYWxzZSwKCQltYXhXaWR0aDogZmFsc2UsCgkJbWluSGVpZ2h0OiAxNTAsCgkJbWluV2lkdGg6IDE1MCwKCQltb2RhbDogZmFsc2UsCgkJcG9zaXRpb246IHsKCQkJbXk6ICJjZW50ZXIiLAoJCQlhdDogImNlbnRlciIsCgkJCW9mOiB3aW5kb3csCgkJCWNvbGxpc2lvbjogImZpdCIsCgkJCS8vIGVuc3VyZSB0aGF0IHRoZSB0aXRsZWJhciBpcyBuZXZlciBvdXRzaWRlIHRoZSBkb2N1bWVudAoJCQl1c2luZzogZnVuY3Rpb24oIHBvcyApIHsKCQkJCXZhciB0b3BPZmZzZXQgPSAkKCB0aGlzICkuY3NzKCBwb3MgKS5vZmZzZXQoKS50b3A7CgkJCQlpZiAoIHRvcE9mZnNldCA8IDAgKSB7CgkJCQkJJCggdGhpcyApLmNzcyggInRvcCIsIHBvcy50b3AgLSB0b3BPZmZzZXQgKTsKCQkJCX0KCQkJfQoJCX0sCgkJcmVzaXphYmxlOiB0cnVlLAoJCXNob3c6IG51bGwsCgkJc3RhY2s6IHRydWUsCgkJdGl0bGU6ICIiLAoJCXdpZHRoOiAzMDAsCgkJekluZGV4OiAxMDAwCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMub3JpZ2luYWxUaXRsZSA9IHRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiICk7CgkJLy8gIzU3NDIgLSAuYXR0cigpIG1pZ2h0IHJldHVybiBhIERPTUVsZW1lbnQKCQlpZiAoIHR5cGVvZiB0aGlzLm9yaWdpbmFsVGl0bGUgIT09ICJzdHJpbmciICkgewoJCQl0aGlzLm9yaWdpbmFsVGl0bGUgPSAiIjsKCQl9CgkJdGhpcy5vbGRQb3NpdGlvbiA9IHsKCQkJcGFyZW50OiB0aGlzLmVsZW1lbnQucGFyZW50KCksCgkJCWluZGV4OiB0aGlzLmVsZW1lbnQucGFyZW50KCkuY2hpbGRyZW4oKS5pbmRleCggdGhpcy5lbGVtZW50ICkKCQl9OwoJCXRoaXMub3B0aW9ucy50aXRsZSA9IHRoaXMub3B0aW9ucy50aXRsZSB8fCB0aGlzLm9yaWdpbmFsVGl0bGU7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zLAoKCQkJdGl0bGUgPSBvcHRpb25zLnRpdGxlIHx8ICImIzE2MDsiLAoJCQl1aURpYWxvZywKCQkJdWlEaWFsb2dUaXRsZWJhciwKCQkJdWlEaWFsb2dUaXRsZWJhckNsb3NlLAoJCQl1aURpYWxvZ1RpdGxlLAoJCQl1aURpYWxvZ0J1dHRvblBhbmU7CgoJCQl1aURpYWxvZyA9ICggdGhpcy51aURpYWxvZyA9ICQoICI8ZGl2PiIgKSApCgkJCQkuYWRkQ2xhc3MoIHVpRGlhbG9nQ2xhc3NlcyArIG9wdGlvbnMuZGlhbG9nQ2xhc3MgKQoJCQkJLmNzcyh7CgkJCQkJZGlzcGxheTogIm5vbmUiLAoJCQkJCW91dGxpbmU6IDAsIC8vIFRPRE86IG1vdmUgdG8gc3R5bGVzaGVldAoJCQkJCXpJbmRleDogb3B0aW9ucy56SW5kZXgKCQkJCX0pCgkJCQkvLyBzZXR0aW5nIHRhYkluZGV4IG1ha2VzIHRoZSBkaXYgZm9jdXNhYmxlCgkJCQkuYXR0ciggInRhYkluZGV4IiwgLTEpCgkJCQkua2V5ZG93bihmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJaWYgKCBvcHRpb25zLmNsb3NlT25Fc2NhcGUgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIGV2ZW50LmtleUNvZGUgJiYKCQkJCQkJCWV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5FU0NBUEUgKSB7CgkJCQkJCXRoYXQuY2xvc2UoIGV2ZW50ICk7CgkJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJfQoJCQkJfSkKCQkJCS5tb3VzZWRvd24oZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCXRoYXQubW92ZVRvVG9wKCBmYWxzZSwgZXZlbnQgKTsKCQkJCX0pCgkJCQkuYXBwZW5kVG8oICJib2R5IiApOwoKCQkJdGhpcy5lbGVtZW50CgkJCQkuc2hvdygpCgkJCQkucmVtb3ZlQXR0ciggInRpdGxlIiApCgkJCQkuYWRkQ2xhc3MoICJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIgKQoJCQkJLmFwcGVuZFRvKCB1aURpYWxvZyApOwoKCQkJdWlEaWFsb2dUaXRsZWJhciA9ICggdGhpcy51aURpYWxvZ1RpdGxlYmFyID0gJCggIjxkaXY+IiApICkKCQkJCS5hZGRDbGFzcyggInVpLWRpYWxvZy10aXRsZWJhciAgdWktd2lkZ2V0LWhlYWRlciAgIiArCgkJCQkJInVpLWNvcm5lci1hbGwgIHVpLWhlbHBlci1jbGVhcmZpeCIgKQoJCQkJLmJpbmQoICJtb3VzZWRvd24iLCBmdW5jdGlvbigpIHsKCQkJCQkvLyBEaWFsb2cgaXNuJ3QgZ2V0dGluZyBmb2N1cyB3aGVuIGRyYWdnaW5nICgjODA2MykKCQkJCQl1aURpYWxvZy5mb2N1cygpOwoJCQkJfSkKCQkJCS5wcmVwZW5kVG8oIHVpRGlhbG9nICk7CgoJCQl1aURpYWxvZ1RpdGxlYmFyQ2xvc2UgPSAkKCAiPGEgaHJlZj0nIyc+PC9hPiIgKQoJCQkJLmFkZENsYXNzKCAidWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlICB1aS1jb3JuZXItYWxsIiApCgkJCQkuYXR0ciggInJvbGUiLCAiYnV0dG9uIiApCgkJCQkuY2xpY2soZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJdGhhdC5jbG9zZSggZXZlbnQgKTsKCQkJCX0pCgkJCQkuYXBwZW5kVG8oIHVpRGlhbG9nVGl0bGViYXIgKTsKCgkJCSggdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2VUZXh0ID0gJCggIjxzcGFuPiIgKSApCgkJCQkuYWRkQ2xhc3MoICJ1aS1pY29uIHVpLWljb24tY2xvc2V0aGljayIgKQoJCQkJLnRleHQoIG9wdGlvbnMuY2xvc2VUZXh0ICkKCQkJCS5hcHBlbmRUbyggdWlEaWFsb2dUaXRsZWJhckNsb3NlICk7CgoJCQl1aURpYWxvZ1RpdGxlID0gJCggIjxzcGFuPiIgKQoJCQkJLnVuaXF1ZUlkKCkKCQkJCS5hZGRDbGFzcyggInVpLWRpYWxvZy10aXRsZSIgKQoJCQkJLmh0bWwoIHRpdGxlICkKCQkJCS5wcmVwZW5kVG8oIHVpRGlhbG9nVGl0bGViYXIgKTsKCgkJCXVpRGlhbG9nQnV0dG9uUGFuZSA9ICggdGhpcy51aURpYWxvZ0J1dHRvblBhbmUgPSAkKCAiPGRpdj4iICkgKQoJCQkJLmFkZENsYXNzKCAidWktZGlhbG9nLWJ1dHRvbnBhbmUgdWktd2lkZ2V0LWNvbnRlbnQgdWktaGVscGVyLWNsZWFyZml4IiApOwoKCQkJKCB0aGlzLnVpQnV0dG9uU2V0ID0gJCggIjxkaXY+IiApICkKCQkJCS5hZGRDbGFzcyggInVpLWRpYWxvZy1idXR0b25zZXQiICkKCQkJCS5hcHBlbmRUbyggdWlEaWFsb2dCdXR0b25QYW5lICk7CgoJCXVpRGlhbG9nLmF0dHIoewoJCQlyb2xlOiAiZGlhbG9nIiwKCQkJImFyaWEtbGFiZWxsZWRieSI6IHVpRGlhbG9nVGl0bGUuYXR0ciggImlkIiApCgkJfSk7CgoJCXVpRGlhbG9nVGl0bGViYXIuZmluZCggIioiICkuYWRkKCB1aURpYWxvZ1RpdGxlYmFyICkuZGlzYWJsZVNlbGVjdGlvbigpOwoJCXRoaXMuX2hvdmVyYWJsZSggdWlEaWFsb2dUaXRsZWJhckNsb3NlICk7CgkJdGhpcy5fZm9jdXNhYmxlKCB1aURpYWxvZ1RpdGxlYmFyQ2xvc2UgKTsKCgkJaWYgKCBvcHRpb25zLmRyYWdnYWJsZSAmJiAkLmZuLmRyYWdnYWJsZSApIHsKCQkJdGhpcy5fbWFrZURyYWdnYWJsZSgpOwoJCX0KCQlpZiAoIG9wdGlvbnMucmVzaXphYmxlICYmICQuZm4ucmVzaXphYmxlICkgewoJCQl0aGlzLl9tYWtlUmVzaXphYmxlKCk7CgkJfQoKCQl0aGlzLl9jcmVhdGVCdXR0b25zKCBvcHRpb25zLmJ1dHRvbnMgKTsKCQl0aGlzLl9pc09wZW4gPSBmYWxzZTsKCgkJaWYgKCAkLmZuLmJnaWZyYW1lICkgewoJCQl1aURpYWxvZy5iZ2lmcmFtZSgpOwoJCX0KCgkJLy8gcHJldmVudCB0YWJiaW5nIG91dCBvZiBtb2RhbCBkaWFsb2dzCgkJdGhpcy5fb24oIHVpRGlhbG9nLCB7IGtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJaWYgKCAhb3B0aW9ucy5tb2RhbCB8fCBldmVudC5rZXlDb2RlICE9PSAkLnVpLmtleUNvZGUuVEFCICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgdGFiYmFibGVzID0gJCggIjp0YWJiYWJsZSIsIHVpRGlhbG9nICksCgkJCQlmaXJzdCA9IHRhYmJhYmxlcy5maWx0ZXIoICI6Zmlyc3QiICksCgkJCQlsYXN0ICA9IHRhYmJhYmxlcy5maWx0ZXIoICI6bGFzdCIgKTsKCgkJCWlmICggZXZlbnQudGFyZ2V0ID09PSBsYXN0WzBdICYmICFldmVudC5zaGlmdEtleSApIHsKCQkJCWZpcnN0LmZvY3VzKCAxICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gZWxzZSBpZiAoIGV2ZW50LnRhcmdldCA9PT0gZmlyc3RbMF0gJiYgZXZlbnQuc2hpZnRLZXkgKSB7CgkJCQlsYXN0LmZvY3VzKCAxICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9fSk7Cgl9LAoKCV9pbml0OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMub3B0aW9ucy5hdXRvT3BlbiApIHsKCQkJdGhpcy5vcGVuKCk7CgkJfQoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIG5leHQsCgkJCW9sZFBvc2l0aW9uID0gdGhpcy5vbGRQb3NpdGlvbjsKCgkJaWYgKCB0aGlzLm92ZXJsYXkgKSB7CgkJCXRoaXMub3ZlcmxheS5kZXN0cm95KCk7CgkJfQoJCXRoaXMudWlEaWFsb2cuaGlkZSgpOwoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIgKQoJCQkuaGlkZSgpCgkJCS5hcHBlbmRUbyggImJvZHkiICk7CgkJdGhpcy51aURpYWxvZy5yZW1vdmUoKTsKCgkJaWYgKCB0aGlzLm9yaWdpbmFsVGl0bGUgKSB7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiLCB0aGlzLm9yaWdpbmFsVGl0bGUgKTsKCQl9CgoJCW5leHQgPSBvbGRQb3NpdGlvbi5wYXJlbnQuY2hpbGRyZW4oKS5lcSggb2xkUG9zaXRpb24uaW5kZXggKTsKCQkvLyBEb24ndCB0cnkgdG8gcGxhY2UgdGhlIGRpYWxvZyBuZXh0IHRvIGl0c2VsZiAoIzg2MTMpCgkJaWYgKCBuZXh0Lmxlbmd0aCAmJiBuZXh0WyAwIF0gIT09IHRoaXMuZWxlbWVudFsgMCBdICkgewoJCQluZXh0LmJlZm9yZSggdGhpcy5lbGVtZW50ICk7CgkJfSBlbHNlIHsKCQkJb2xkUG9zaXRpb24ucGFyZW50LmFwcGVuZCggdGhpcy5lbGVtZW50ICk7CgkJfQoJfSwKCgl3aWRnZXQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnVpRGlhbG9nOwoJfSwKCgljbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJbWF4WiwgdGhpc1o7CgoJCWlmICggIXRoaXMuX2lzT3BlbiApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlciggImJlZm9yZUNsb3NlIiwgZXZlbnQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdGhpcy5faXNPcGVuID0gZmFsc2U7CgoJCWlmICggdGhpcy5vdmVybGF5ICkgewoJCQl0aGlzLm92ZXJsYXkuZGVzdHJveSgpOwoJCX0KCgkJaWYgKCB0aGlzLm9wdGlvbnMuaGlkZSApIHsKCQkJdGhpcy5faGlkZSggdGhpcy51aURpYWxvZywgdGhpcy5vcHRpb25zLmhpZGUsIGZ1bmN0aW9uKCkgewoJCQkJdGhhdC5fdHJpZ2dlciggImNsb3NlIiwgZXZlbnQgKTsKCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy51aURpYWxvZy5oaWRlKCk7CgkJCXRoaXMuX3RyaWdnZXIoICJjbG9zZSIsIGV2ZW50ICk7CgkJfQoKCQkkLnVpLmRpYWxvZy5vdmVybGF5LnJlc2l6ZSgpOwoKCQkvLyBhZGp1c3QgdGhlIG1heFogdG8gYWxsb3cgb3RoZXIgbW9kYWwgZGlhbG9ncyB0byBjb250aW51ZSB0byB3b3JrIChzZWUgIzQzMDkpCgkJaWYgKCB0aGlzLm9wdGlvbnMubW9kYWwgKSB7CgkJCW1heFogPSAwOwoJCQkkKCAiLnVpLWRpYWxvZyIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB0aGlzICE9PSB0aGF0LnVpRGlhbG9nWzBdICkgewoJCQkJCXRoaXNaID0gJCggdGhpcyApLmNzcyggInotaW5kZXgiICk7CgkJCQkJaWYgKCAhaXNOYU4oIHRoaXNaICkgKSB7CgkJCQkJCW1heFogPSBNYXRoLm1heCggbWF4WiwgdGhpc1ogKTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCQkkLnVpLmRpYWxvZy5tYXhaID0gbWF4WjsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCglpc09wZW46IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9pc09wZW47Cgl9LAoKCS8vIHRoZSBmb3JjZSBwYXJhbWV0ZXIgYWxsb3dzIHVzIHRvIG1vdmUgbW9kYWwgZGlhbG9ncyB0byB0aGVpciBjb3JyZWN0CgkvLyBwb3NpdGlvbiBvbiBvcGVuCgltb3ZlVG9Ub3A6IGZ1bmN0aW9uKCBmb3JjZSwgZXZlbnQgKSB7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCXNhdmVTY3JvbGw7CgoJCWlmICggKCBvcHRpb25zLm1vZGFsICYmICFmb3JjZSApIHx8CgkJCQkoICFvcHRpb25zLnN0YWNrICYmICFvcHRpb25zLm1vZGFsICkgKSB7CgkJCXJldHVybiB0aGlzLl90cmlnZ2VyKCAiZm9jdXMiLCBldmVudCApOwoJCX0KCgkJaWYgKCBvcHRpb25zLnpJbmRleCA+ICQudWkuZGlhbG9nLm1heFogKSB7CgkJCSQudWkuZGlhbG9nLm1heFogPSBvcHRpb25zLnpJbmRleDsKCQl9CgkJaWYgKCB0aGlzLm92ZXJsYXkgKSB7CgkJCSQudWkuZGlhbG9nLm1heFogKz0gMTsKCQkJJC51aS5kaWFsb2cub3ZlcmxheS5tYXhaID0gJC51aS5kaWFsb2cubWF4WjsKCQkJdGhpcy5vdmVybGF5LiRlbC5jc3MoICJ6LWluZGV4IiwgJC51aS5kaWFsb2cub3ZlcmxheS5tYXhaICk7CgkJfQoKCQkvLyBTYXZlIGFuZCB0aGVuIHJlc3RvcmUgc2Nyb2xsCgkJLy8gT3BlcmEgOS41KyByZXNldHMgd2hlbiBwYXJlbnQgei1pbmRleCBpcyBjaGFuZ2VkLgoJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeXVpLmNvbS90aWNrZXQvMzE5MwoJCXNhdmVTY3JvbGwgPSB7CgkJCXNjcm9sbFRvcDogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCgpLAoJCQlzY3JvbGxMZWZ0OiB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCgpCgkJfTsKCQkkLnVpLmRpYWxvZy5tYXhaICs9IDE7CgkJdGhpcy51aURpYWxvZy5jc3MoICJ6LWluZGV4IiwgJC51aS5kaWFsb2cubWF4WiApOwoJCXRoaXMuZWxlbWVudC5hdHRyKCBzYXZlU2Nyb2xsICk7CgkJdGhpcy5fdHJpZ2dlciggImZvY3VzIiwgZXZlbnQgKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCW9wZW46IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5faXNPcGVuICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgaGFzRm9jdXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCXVpRGlhbG9nID0gdGhpcy51aURpYWxvZzsKCgkJdGhpcy5fc2l6ZSgpOwoJCXRoaXMuX3Bvc2l0aW9uKCBvcHRpb25zLnBvc2l0aW9uICk7CgkJdWlEaWFsb2cuc2hvdyggb3B0aW9ucy5zaG93ICk7CgkJdGhpcy5vdmVybGF5ID0gb3B0aW9ucy5tb2RhbCA/IG5ldyAkLnVpLmRpYWxvZy5vdmVybGF5KCB0aGlzICkgOiBudWxsOwoJCXRoaXMubW92ZVRvVG9wKCB0cnVlICk7CgoJCS8vIHNldCBmb2N1cyB0byB0aGUgZmlyc3QgdGFiYmFibGUgZWxlbWVudCBpbiB0aGUgY29udGVudCBhcmVhIG9yIHRoZSBmaXJzdCBidXR0b24KCQkvLyBpZiB0aGVyZSBhcmUgbm8gdGFiYmFibGUgZWxlbWVudHMsIHNldCBmb2N1cyBvbiB0aGUgZGlhbG9nIGl0c2VsZgoJCWhhc0ZvY3VzID0gdGhpcy5lbGVtZW50LmZpbmQoICI6dGFiYmFibGUiICk7CgkJaWYgKCAhaGFzRm9jdXMubGVuZ3RoICkgewoJCQloYXNGb2N1cyA9IHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmZpbmQoICI6dGFiYmFibGUiICk7CgkJCWlmICggIWhhc0ZvY3VzLmxlbmd0aCApIHsKCQkJCWhhc0ZvY3VzID0gdWlEaWFsb2c7CgkJCX0KCQl9CgkJaGFzRm9jdXMuZXEoIDAgKS5mb2N1cygpOwoKCQl0aGlzLl9pc09wZW4gPSB0cnVlOwoJCXRoaXMuX3RyaWdnZXIoICJvcGVuIiApOwoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX2NyZWF0ZUJ1dHRvbnM6IGZ1bmN0aW9uKCBidXR0b25zICkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJaGFzQnV0dG9ucyA9IGZhbHNlOwoKCQkvLyBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBidXR0b24gcGFuZSwgcmVtb3ZlIGl0CgkJdGhpcy51aURpYWxvZ0J1dHRvblBhbmUucmVtb3ZlKCk7CgkJdGhpcy51aUJ1dHRvblNldC5lbXB0eSgpOwoKCQlpZiAoIHR5cGVvZiBidXR0b25zID09PSAib2JqZWN0IiAmJiBidXR0b25zICE9PSBudWxsICkgewoJCQkkLmVhY2goIGJ1dHRvbnMsIGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICEoaGFzQnV0dG9ucyA9IHRydWUpOwoJCQl9KTsKCQl9CgkJaWYgKCBoYXNCdXR0b25zICkgewoJCQkkLmVhY2goIGJ1dHRvbnMsIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHsKCQkJCXZhciBidXR0b24sIGNsaWNrOwoJCQkJcHJvcHMgPSAkLmlzRnVuY3Rpb24oIHByb3BzICkgPwoJCQkJCXsgY2xpY2s6IHByb3BzLCB0ZXh0OiBuYW1lIH0gOgoJCQkJCXByb3BzOwoJCQkJLy8gRGVmYXVsdCB0byBhIG5vbi1zdWJtaXR0aW5nIGJ1dHRvbgoJCQkJcHJvcHMgPSAkLmV4dGVuZCggeyB0eXBlOiAiYnV0dG9uIiB9LCBwcm9wcyApOwoJCQkJLy8gQ2hhbmdlIHRoZSBjb250ZXh0IGZvciB0aGUgY2xpY2sgY2FsbGJhY2sgdG8gYmUgdGhlIG1haW4gZWxlbWVudAoJCQkJY2xpY2sgPSBwcm9wcy5jbGljazsKCQkJCXByb3BzLmNsaWNrID0gZnVuY3Rpb24oKSB7CgkJCQkJY2xpY2suYXBwbHkoIHRoYXQuZWxlbWVudFswXSwgYXJndW1lbnRzICk7CgkJCQl9OwoJCQkJYnV0dG9uID0gJCggIjxidXR0b24+PC9idXR0b24+IiwgcHJvcHMgKQoJCQkJCS5hcHBlbmRUbyggdGhhdC51aUJ1dHRvblNldCApOwoJCQkJaWYgKCAkLmZuLmJ1dHRvbiApIHsKCQkJCQlidXR0b24uYnV0dG9uKCk7CgkJCQl9CgkJCX0pOwoJCQl0aGlzLnVpRGlhbG9nLmFkZENsYXNzKCAidWktZGlhbG9nLWJ1dHRvbnMiICk7CgkJCXRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmFwcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7CgkJfSBlbHNlIHsKCQkJdGhpcy51aURpYWxvZy5yZW1vdmVDbGFzcyggInVpLWRpYWxvZy1idXR0b25zIiApOwoJCX0KCX0sCgoJX21ha2VEcmFnZ2FibGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJZnVuY3Rpb24gZmlsdGVyZWRVaSggdWkgKSB7CgkJCXJldHVybiB7CgkJCQlwb3NpdGlvbjogdWkucG9zaXRpb24sCgkJCQlvZmZzZXQ6IHVpLm9mZnNldAoJCQl9OwoJCX0KCgkJdGhpcy51aURpYWxvZy5kcmFnZ2FibGUoewoJCQljYW5jZWw6ICIudWktZGlhbG9nLWNvbnRlbnQsIC51aS1kaWFsb2ctdGl0bGViYXItY2xvc2UiLAoJCQloYW5kbGU6ICIudWktZGlhbG9nLXRpdGxlYmFyIiwKCQkJY29udGFpbm1lbnQ6ICJkb2N1bWVudCIsCgkJCXN0YXJ0OiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJJCggdGhpcyApCgkJCQkJLmFkZENsYXNzKCAidWktZGlhbG9nLWRyYWdnaW5nIiApOwoJCQkJdGhhdC5fdHJpZ2dlciggImRyYWdTdGFydCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCWRyYWc6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQl0aGF0Ll90cmlnZ2VyKCAiZHJhZyIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCXN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQlvcHRpb25zLnBvc2l0aW9uID0gWwoJCQkJCXVpLnBvc2l0aW9uLmxlZnQgLSB0aGF0LmRvY3VtZW50LnNjcm9sbExlZnQoKSwKCQkJCQl1aS5wb3NpdGlvbi50b3AgLSB0aGF0LmRvY3VtZW50LnNjcm9sbFRvcCgpCgkJCQldOwoJCQkJJCggdGhpcyApCgkJCQkJLnJlbW92ZUNsYXNzKCAidWktZGlhbG9nLWRyYWdnaW5nIiApOwoJCQkJdGhhdC5fdHJpZ2dlciggImRyYWdTdG9wIiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTsKCQkJCSQudWkuZGlhbG9nLm92ZXJsYXkucmVzaXplKCk7CgkJCX0KCQl9KTsKCX0sCgoJX21ha2VSZXNpemFibGU6IGZ1bmN0aW9uKCBoYW5kbGVzICkgewoJCWhhbmRsZXMgPSAoaGFuZGxlcyA9PT0gdW5kZWZpbmVkID8gdGhpcy5vcHRpb25zLnJlc2l6YWJsZSA6IGhhbmRsZXMpOwoJCXZhciB0aGF0ID0gdGhpcywKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJLy8gLnVpLXJlc2l6YWJsZSBoYXMgcG9zaXRpb246IHJlbGF0aXZlIGRlZmluZWQgaW4gdGhlIHN0eWxlc2hlZXQKCQkJLy8gYnV0IGRpYWxvZ3MgaGF2ZSB0byB1c2UgYWJzb2x1dGUgb3IgZml4ZWQgcG9zaXRpb25pbmcKCQkJcG9zaXRpb24gPSB0aGlzLnVpRGlhbG9nLmNzcyggInBvc2l0aW9uIiApLAoJCQlyZXNpemVIYW5kbGVzID0gdHlwZW9mIGhhbmRsZXMgPT09ICdzdHJpbmcnID8KCQkJCWhhbmRsZXMJOgoJCQkJIm4sZSxzLHcsc2Usc3csbmUsbnciOwoKCQlmdW5jdGlvbiBmaWx0ZXJlZFVpKCB1aSApIHsKCQkJcmV0dXJuIHsKCQkJCW9yaWdpbmFsUG9zaXRpb246IHVpLm9yaWdpbmFsUG9zaXRpb24sCgkJCQlvcmlnaW5hbFNpemU6IHVpLm9yaWdpbmFsU2l6ZSwKCQkJCXBvc2l0aW9uOiB1aS5wb3NpdGlvbiwKCQkJCXNpemU6IHVpLnNpemUKCQkJfTsKCQl9CgoJCXRoaXMudWlEaWFsb2cucmVzaXphYmxlKHsKCQkJY2FuY2VsOiAiLnVpLWRpYWxvZy1jb250ZW50IiwKCQkJY29udGFpbm1lbnQ6ICJkb2N1bWVudCIsCgkJCWFsc29SZXNpemU6IHRoaXMuZWxlbWVudCwKCQkJbWF4V2lkdGg6IG9wdGlvbnMubWF4V2lkdGgsCgkJCW1heEhlaWdodDogb3B0aW9ucy5tYXhIZWlnaHQsCgkJCW1pbldpZHRoOiBvcHRpb25zLm1pbldpZHRoLAoJCQltaW5IZWlnaHQ6IHRoaXMuX21pbkhlaWdodCgpLAoJCQloYW5kbGVzOiByZXNpemVIYW5kbGVzLAoJCQlzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCSQoIHRoaXMgKS5hZGRDbGFzcyggInVpLWRpYWxvZy1yZXNpemluZyIgKTsKCQkJCXRoYXQuX3RyaWdnZXIoICJyZXNpemVTdGFydCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCXJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCXRoYXQuX3RyaWdnZXIoICJyZXNpemUiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApOwoJCQl9LAoJCQlzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCAidWktZGlhbG9nLXJlc2l6aW5nIiApOwoJCQkJb3B0aW9ucy5oZWlnaHQgPSAkKCB0aGlzICkuaGVpZ2h0KCk7CgkJCQlvcHRpb25zLndpZHRoID0gJCggdGhpcyApLndpZHRoKCk7CgkJCQl0aGF0Ll90cmlnZ2VyKCAicmVzaXplU3RvcCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCQkkLnVpLmRpYWxvZy5vdmVybGF5LnJlc2l6ZSgpOwoJCQl9CgkJfSkKCQkuY3NzKCAicG9zaXRpb24iLCBwb3NpdGlvbiApCgkJLmZpbmQoICIudWktcmVzaXphYmxlLXNlIiApCgkJCS5hZGRDbGFzcyggInVpLWljb24gdWktaWNvbi1ncmlwLWRpYWdvbmFsLXNlIiApOwoJfSwKCglfbWluSGVpZ2h0OiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBvcHRpb25zLmhlaWdodCA9PT0gImF1dG8iICkgewoJCQlyZXR1cm4gb3B0aW9ucy5taW5IZWlnaHQ7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIE1hdGgubWluKCBvcHRpb25zLm1pbkhlaWdodCwgb3B0aW9ucy5oZWlnaHQgKTsKCQl9Cgl9LAoKCV9wb3NpdGlvbjogZnVuY3Rpb24oIHBvc2l0aW9uICkgewoJCXZhciBteUF0ID0gW10sCgkJCW9mZnNldCA9IFsgMCwgMCBdLAoJCQlpc1Zpc2libGU7CgoJCWlmICggcG9zaXRpb24gKSB7CgkJCS8vIGRlZXAgZXh0ZW5kaW5nIGNvbnZlcnRzIGFycmF5cyB0byBvYmplY3RzIGluIGpRdWVyeSA8PSAxLjMuMiA6LSgKCS8vCQlpZiAodHlwZW9mIHBvc2l0aW9uID09ICdzdHJpbmcnIHx8ICQuaXNBcnJheShwb3NpdGlvbikpIHsKCS8vCQkJbXlBdCA9ICQuaXNBcnJheShwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uLnNwbGl0KCcgJyk7CgoJCQlpZiAoIHR5cGVvZiBwb3NpdGlvbiA9PT0gInN0cmluZyIgfHwgKHR5cGVvZiBwb3NpdGlvbiA9PT0gIm9iamVjdCIgJiYgIjAiIGluIHBvc2l0aW9uICkgKSB7CgkJCQlteUF0ID0gcG9zaXRpb24uc3BsaXQgPyBwb3NpdGlvbi5zcGxpdCggIiAiICkgOiBbIHBvc2l0aW9uWyAwIF0sIHBvc2l0aW9uWyAxIF0gXTsKCQkJCWlmICggbXlBdC5sZW5ndGggPT09IDEgKSB7CgkJCQkJbXlBdFsgMSBdID0gbXlBdFsgMCBdOwoJCQkJfQoKCQkJCSQuZWFjaCggWyAibGVmdCIsICJ0b3AiIF0sIGZ1bmN0aW9uKCBpLCBvZmZzZXRQb3NpdGlvbiApIHsKCQkJCQlpZiAoICtteUF0WyBpIF0gPT09IG15QXRbIGkgXSApIHsKCQkJCQkJb2Zmc2V0WyBpIF0gPSBteUF0WyBpIF07CgkJCQkJCW15QXRbIGkgXSA9IG9mZnNldFBvc2l0aW9uOwoJCQkJCX0KCQkJCX0pOwoKCQkJCXBvc2l0aW9uID0gewoJCQkJCW15OiBteUF0WzBdICsgKG9mZnNldFswXSA8IDAgPyBvZmZzZXRbMF0gOiAiKyIgKyBvZmZzZXRbMF0pICsgIiAiICsKCQkJCQkJbXlBdFsxXSArIChvZmZzZXRbMV0gPCAwID8gb2Zmc2V0WzFdIDogIisiICsgb2Zmc2V0WzFdKSwKCQkJCQlhdDogbXlBdC5qb2luKCAiICIgKQoJCQkJfTsKCQkJfQoKCQkJcG9zaXRpb24gPSAkLmV4dGVuZCgge30sICQudWkuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zLnBvc2l0aW9uLCBwb3NpdGlvbiApOwoJCX0gZWxzZSB7CgkJCXBvc2l0aW9uID0gJC51aS5kaWFsb2cucHJvdG90eXBlLm9wdGlvbnMucG9zaXRpb247CgkJfQoKCQkvLyBuZWVkIHRvIHNob3cgdGhlIGRpYWxvZyB0byBnZXQgdGhlIGFjdHVhbCBvZmZzZXQgaW4gdGhlIHBvc2l0aW9uIHBsdWdpbgoJCWlzVmlzaWJsZSA9IHRoaXMudWlEaWFsb2cuaXMoICI6dmlzaWJsZSIgKTsKCQlpZiAoICFpc1Zpc2libGUgKSB7CgkJCXRoaXMudWlEaWFsb2cuc2hvdygpOwoJCX0KCQl0aGlzLnVpRGlhbG9nLnBvc2l0aW9uKCBwb3NpdGlvbiApOwoJCWlmICggIWlzVmlzaWJsZSApIHsKCQkJdGhpcy51aURpYWxvZy5oaWRlKCk7CgkJfQoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlyZXNpemFibGVPcHRpb25zID0ge30sCgkJCXJlc2l6ZSA9IGZhbHNlOwoKCQkkLmVhY2goIG9wdGlvbnMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCQl0aGF0Ll9zZXRPcHRpb24oIGtleSwgdmFsdWUgKTsKCgkJCWlmICgga2V5IGluIHNpemVSZWxhdGVkT3B0aW9ucyApIHsKCQkJCXJlc2l6ZSA9IHRydWU7CgkJCX0KCQkJaWYgKCBrZXkgaW4gcmVzaXphYmxlUmVsYXRlZE9wdGlvbnMgKSB7CgkJCQlyZXNpemFibGVPcHRpb25zWyBrZXkgXSA9IHZhbHVlOwoJCQl9CgkJfSk7CgoJCWlmICggcmVzaXplICkgewoJCQl0aGlzLl9zaXplKCk7CgkJfQoJCWlmICggdGhpcy51aURpYWxvZy5pcyggIjpkYXRhKHJlc2l6YWJsZSkiICkgKSB7CgkJCXRoaXMudWlEaWFsb2cucmVzaXphYmxlKCAib3B0aW9uIiwgcmVzaXphYmxlT3B0aW9ucyApOwoJCX0KCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdmFyIGlzRHJhZ2dhYmxlLCBpc1Jlc2l6YWJsZSwKCQkJdWlEaWFsb2cgPSB0aGlzLnVpRGlhbG9nOwoKCQlzd2l0Y2ggKCBrZXkgKSB7CgkJCWNhc2UgImJ1dHRvbnMiOgoJCQkJdGhpcy5fY3JlYXRlQnV0dG9ucyggdmFsdWUgKTsKCQkJCWJyZWFrOwoJCQljYXNlICJjbG9zZVRleHQiOgoJCQkJLy8gZW5zdXJlIHRoYXQgd2UgYWx3YXlzIHBhc3MgYSBzdHJpbmcKCQkJCXRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlVGV4dC50ZXh0KCAiIiArIHZhbHVlICk7CgkJCQlicmVhazsKCQkJY2FzZSAiZGlhbG9nQ2xhc3MiOgoJCQkJdWlEaWFsb2cKCQkJCQkucmVtb3ZlQ2xhc3MoIHRoaXMub3B0aW9ucy5kaWFsb2dDbGFzcyApCgkJCQkJLmFkZENsYXNzKCB1aURpYWxvZ0NsYXNzZXMgKyB2YWx1ZSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgImRpc2FibGVkIjoKCQkJCWlmICggdmFsdWUgKSB7CgkJCQkJdWlEaWFsb2cuYWRkQ2xhc3MoICJ1aS1kaWFsb2ctZGlzYWJsZWQiICk7CgkJCQl9IGVsc2UgewoJCQkJCXVpRGlhbG9nLnJlbW92ZUNsYXNzKCAidWktZGlhbG9nLWRpc2FibGVkIiApOwoJCQkJfQoJCQkJYnJlYWs7CgkJCWNhc2UgImRyYWdnYWJsZSI6CgkJCQlpc0RyYWdnYWJsZSA9IHVpRGlhbG9nLmlzKCAiOmRhdGEoZHJhZ2dhYmxlKSIgKTsKCQkJCWlmICggaXNEcmFnZ2FibGUgJiYgIXZhbHVlICkgewoJCQkJCXVpRGlhbG9nLmRyYWdnYWJsZSggImRlc3Ryb3kiICk7CgkJCQl9CgoJCQkJaWYgKCAhaXNEcmFnZ2FibGUgJiYgdmFsdWUgKSB7CgkJCQkJdGhpcy5fbWFrZURyYWdnYWJsZSgpOwoJCQkJfQoJCQkJYnJlYWs7CgkJCWNhc2UgInBvc2l0aW9uIjoKCQkJCXRoaXMuX3Bvc2l0aW9uKCB2YWx1ZSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgInJlc2l6YWJsZSI6CgkJCQkvLyBjdXJyZW50bHkgcmVzaXphYmxlLCBiZWNvbWluZyBub24tcmVzaXphYmxlCgkJCQlpc1Jlc2l6YWJsZSA9IHVpRGlhbG9nLmlzKCAiOmRhdGEocmVzaXphYmxlKSIgKTsKCQkJCWlmICggaXNSZXNpemFibGUgJiYgIXZhbHVlICkgewoJCQkJCXVpRGlhbG9nLnJlc2l6YWJsZSggImRlc3Ryb3kiICk7CgkJCQl9CgoJCQkJLy8gY3VycmVudGx5IHJlc2l6YWJsZSwgY2hhbmdpbmcgaGFuZGxlcwoJCQkJaWYgKCBpc1Jlc2l6YWJsZSAmJiB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICkgewoJCQkJCXVpRGlhbG9nLnJlc2l6YWJsZSggIm9wdGlvbiIsICJoYW5kbGVzIiwgdmFsdWUgKTsKCQkJCX0KCgkJCQkvLyBjdXJyZW50bHkgbm9uLXJlc2l6YWJsZSwgYmVjb21pbmcgcmVzaXphYmxlCgkJCQlpZiAoICFpc1Jlc2l6YWJsZSAmJiB2YWx1ZSAhPT0gZmFsc2UgKSB7CgkJCQkJdGhpcy5fbWFrZVJlc2l6YWJsZSggdmFsdWUgKTsKCQkJCX0KCQkJCWJyZWFrOwoJCQljYXNlICJ0aXRsZSI6CgkJCQkvLyBjb252ZXJ0IHdoYXRldmVyIHdhcyBwYXNzZWQgaW4gbyBhIHN0cmluZywgZm9yIGh0bWwoKSB0byBub3QgdGhyb3cgdXAKCQkJCSQoICIudWktZGlhbG9nLXRpdGxlIiwgdGhpcy51aURpYWxvZ1RpdGxlYmFyICkKCQkJCQkuaHRtbCggIiIgKyAoIHZhbHVlIHx8ICImIzE2MDsiICkgKTsKCQkJCWJyZWFrOwoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCX0sCgoJX3NpemU6IGZ1bmN0aW9uKCkgewoJCS8qIElmIHRoZSB1c2VyIGhhcyByZXNpemVkIHRoZSBkaWFsb2csIHRoZSAudWktZGlhbG9nIGFuZCAudWktZGlhbG9nLWNvbnRlbnQKCQkgKiBkaXZzIHdpbGwgYm90aCBoYXZlIHdpZHRoIGFuZCBoZWlnaHQgc2V0LCBzbyB3ZSBuZWVkIHRvIHJlc2V0IHRoZW0KCQkgKi8KCQl2YXIgbm9uQ29udGVudEhlaWdodCwgbWluQ29udGVudEhlaWdodCwgYXV0b0hlaWdodCwKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJaXNWaXNpYmxlID0gdGhpcy51aURpYWxvZy5pcyggIjp2aXNpYmxlIiApOwoKCQkvLyByZXNldCBjb250ZW50IHNpemluZwoJCXRoaXMuZWxlbWVudC5zaG93KCkuY3NzKHsKCQkJd2lkdGg6ICJhdXRvIiwKCQkJbWluSGVpZ2h0OiAwLAoJCQloZWlnaHQ6IDAKCQl9KTsKCgkJaWYgKCBvcHRpb25zLm1pbldpZHRoID4gb3B0aW9ucy53aWR0aCApIHsKCQkJb3B0aW9ucy53aWR0aCA9IG9wdGlvbnMubWluV2lkdGg7CgkJfQoKCQkvLyByZXNldCB3cmFwcGVyIHNpemluZwoJCS8vIGRldGVybWluZSB0aGUgaGVpZ2h0IG9mIGFsbCB0aGUgbm9uLWNvbnRlbnQgZWxlbWVudHMKCQlub25Db250ZW50SGVpZ2h0ID0gdGhpcy51aURpYWxvZy5jc3MoewoJCQkJaGVpZ2h0OiAiYXV0byIsCgkJCQl3aWR0aDogb3B0aW9ucy53aWR0aAoJCQl9KQoJCQkub3V0ZXJIZWlnaHQoKTsKCQltaW5Db250ZW50SGVpZ2h0ID0gTWF0aC5tYXgoIDAsIG9wdGlvbnMubWluSGVpZ2h0IC0gbm9uQ29udGVudEhlaWdodCApOwoKCQlpZiAoIG9wdGlvbnMuaGVpZ2h0ID09PSAiYXV0byIgKSB7CgkJCS8vIG9ubHkgbmVlZGVkIGZvciBJRTYgc3VwcG9ydAoJCQlpZiAoICQuc3VwcG9ydC5taW5IZWlnaHQgKSB7CgkJCQl0aGlzLmVsZW1lbnQuY3NzKHsKCQkJCQltaW5IZWlnaHQ6IG1pbkNvbnRlbnRIZWlnaHQsCgkJCQkJaGVpZ2h0OiAiYXV0byIKCQkJCX0pOwoJCQl9IGVsc2UgewoJCQkJdGhpcy51aURpYWxvZy5zaG93KCk7CgkJCQlhdXRvSGVpZ2h0ID0gdGhpcy5lbGVtZW50LmNzcyggImhlaWdodCIsICJhdXRvIiApLmhlaWdodCgpOwoJCQkJaWYgKCAhaXNWaXNpYmxlICkgewoJCQkJCXRoaXMudWlEaWFsb2cuaGlkZSgpOwoJCQkJfQoJCQkJdGhpcy5lbGVtZW50LmhlaWdodCggTWF0aC5tYXgoIGF1dG9IZWlnaHQsIG1pbkNvbnRlbnRIZWlnaHQgKSApOwoJCQl9CgkJfSBlbHNlIHsKCQkJdGhpcy5lbGVtZW50LmhlaWdodCggTWF0aC5tYXgoIG9wdGlvbnMuaGVpZ2h0IC0gbm9uQ29udGVudEhlaWdodCwgMCApICk7CgkJfQoKCQlpZiAodGhpcy51aURpYWxvZy5pcyggIjpkYXRhKHJlc2l6YWJsZSkiICkgKSB7CgkJCXRoaXMudWlEaWFsb2cucmVzaXphYmxlKCAib3B0aW9uIiwgIm1pbkhlaWdodCIsIHRoaXMuX21pbkhlaWdodCgpICk7CgkJfQoJfQp9KTsKCiQuZXh0ZW5kKCQudWkuZGlhbG9nLCB7Cgl1dWlkOiAwLAoJbWF4WjogMCwKCglnZXRUaXRsZUlkOiBmdW5jdGlvbigkZWwpIHsKCQl2YXIgaWQgPSAkZWwuYXR0ciggImlkIiApOwoJCWlmICggIWlkICkgewoJCQl0aGlzLnV1aWQgKz0gMTsKCQkJaWQgPSB0aGlzLnV1aWQ7CgkJfQoJCXJldHVybiAidWktZGlhbG9nLXRpdGxlLSIgKyBpZDsKCX0sCgoJb3ZlcmxheTogZnVuY3Rpb24oIGRpYWxvZyApIHsKCQl0aGlzLiRlbCA9ICQudWkuZGlhbG9nLm92ZXJsYXkuY3JlYXRlKCBkaWFsb2cgKTsKCX0KfSk7CgokLmV4dGVuZCggJC51aS5kaWFsb2cub3ZlcmxheSwgewoJaW5zdGFuY2VzOiBbXSwKCS8vIHJldXNlIG9sZCBpbnN0YW5jZXMgZHVlIHRvIElFIG1lbW9yeSBsZWFrIHdpdGggYWxwaGEgdHJhbnNwYXJlbmN5IChzZWUgIzUxODUpCglvbGRJbnN0YW5jZXM6IFtdLAoJbWF4WjogMCwKCWV2ZW50czogJC5tYXAoCgkJImZvY3VzLG1vdXNlZG93bixtb3VzZXVwLGtleWRvd24sa2V5cHJlc3MsY2xpY2siLnNwbGl0KCAiLCIgKSwKCQlmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXJldHVybiBldmVudCArICIuZGlhbG9nLW92ZXJsYXkiOwoJCX0KCSkuam9pbiggIiAiICksCgljcmVhdGU6IGZ1bmN0aW9uKCBkaWFsb2cgKSB7CgkJaWYgKCB0aGlzLmluc3RhbmNlcy5sZW5ndGggPT09IDAgKSB7CgkJCS8vIHByZXZlbnQgdXNlIG9mIGFuY2hvcnMgYW5kIGlucHV0cwoJCQkvLyB3ZSB1c2UgYSBzZXRUaW1lb3V0IGluIGNhc2UgdGhlIG92ZXJsYXkgaXMgY3JlYXRlZCBmcm9tIGFuCgkJCS8vIGV2ZW50IHRoYXQgd2UncmUgZ29pbmcgdG8gYmUgY2FuY2VsbGluZyAoc2VlICMyODA0KQoJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJLy8gaGFuZGxlICQoZWwpLmRpYWxvZygpLmRpYWxvZygnY2xvc2UnKSAoc2VlICM0MDY1KQoJCQkJaWYgKCAkLnVpLmRpYWxvZy5vdmVybGF5Lmluc3RhbmNlcy5sZW5ndGggKSB7CgkJCQkJJCggZG9jdW1lbnQgKS5iaW5kKCAkLnVpLmRpYWxvZy5vdmVybGF5LmV2ZW50cywgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQkvLyBzdG9wIGV2ZW50cyBpZiB0aGUgei1pbmRleCBvZiB0aGUgdGFyZ2V0IGlzIDwgdGhlIHotaW5kZXggb2YgdGhlIG92ZXJsYXkKCQkJCQkJLy8gd2UgY2Fubm90IHJldHVybiB0cnVlIHdoZW4gd2UgZG9uJ3Qgd2FudCB0byBjYW5jZWwgdGhlIGV2ZW50ICgjMzUyMykKCQkJCQkJaWYgKCAkKCBldmVudC50YXJnZXQgKS56SW5kZXgoKSA8ICQudWkuZGlhbG9nLm92ZXJsYXkubWF4WiApIHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCX0pOwoJCQkJfQoJCQl9LCAxICk7CgoJCQkvLyBoYW5kbGUgd2luZG93IHJlc2l6ZQoJCQkkKCB3aW5kb3cgKS5iaW5kKCAicmVzaXplLmRpYWxvZy1vdmVybGF5IiwgJC51aS5kaWFsb2cub3ZlcmxheS5yZXNpemUgKTsKCQl9CgoJCXZhciAkZWwgPSAoIHRoaXMub2xkSW5zdGFuY2VzLnBvcCgpIHx8ICQoICI8ZGl2PiIgKS5hZGRDbGFzcyggInVpLXdpZGdldC1vdmVybGF5IiApICk7CgoJCS8vIGFsbG93IGNsb3NpbmcgYnkgcHJlc3NpbmcgdGhlIGVzY2FwZSBrZXkKCQkkKCBkb2N1bWVudCApLmJpbmQoICJrZXlkb3duLmRpYWxvZy1vdmVybGF5IiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgaW5zdGFuY2VzID0gJC51aS5kaWFsb2cub3ZlcmxheS5pbnN0YW5jZXM7CgkJCS8vIG9ubHkgcmVhY3QgdG8gdGhlIGV2ZW50IGlmIHdlJ3JlIHRoZSB0b3Agb3ZlcmxheQoJCQlpZiAoIGluc3RhbmNlcy5sZW5ndGggIT09IDAgJiYgaW5zdGFuY2VzWyBpbnN0YW5jZXMubGVuZ3RoIC0gMSBdID09PSAkZWwgJiYKCQkJCWRpYWxvZy5vcHRpb25zLmNsb3NlT25Fc2NhcGUgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIGV2ZW50LmtleUNvZGUgJiYKCQkJCWV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5FU0NBUEUgKSB7CgoJCQkJZGlhbG9nLmNsb3NlKCBldmVudCApOwoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJfQoJCX0pOwoKCQkkZWwuYXBwZW5kVG8oIGRvY3VtZW50LmJvZHkgKS5jc3MoewoJCQl3aWR0aDogdGhpcy53aWR0aCgpLAoJCQloZWlnaHQ6IHRoaXMuaGVpZ2h0KCkKCQl9KTsKCgkJaWYgKCAkLmZuLmJnaWZyYW1lICkgewoJCQkkZWwuYmdpZnJhbWUoKTsKCQl9CgoJCXRoaXMuaW5zdGFuY2VzLnB1c2goICRlbCApOwoJCXJldHVybiAkZWw7Cgl9LAoKCWRlc3Ryb3k6IGZ1bmN0aW9uKCAkZWwgKSB7CgkJdmFyIGluZGV4T2YgPSAkLmluQXJyYXkoICRlbCwgdGhpcy5pbnN0YW5jZXMgKSwKCQkJbWF4WiA9IDA7CgoJCWlmICggaW5kZXhPZiAhPT0gLTEgKSB7CgkJCXRoaXMub2xkSW5zdGFuY2VzLnB1c2goIHRoaXMuaW5zdGFuY2VzLnNwbGljZSggaW5kZXhPZiwgMSApWyAwIF0gKTsKCQl9CgoJCWlmICggdGhpcy5pbnN0YW5jZXMubGVuZ3RoID09PSAwICkgewoJCQkkKCBbIGRvY3VtZW50LCB3aW5kb3cgXSApLnVuYmluZCggIi5kaWFsb2ctb3ZlcmxheSIgKTsKCQl9CgoJCSRlbC5oZWlnaHQoIDAgKS53aWR0aCggMCApLnJlbW92ZSgpOwoKCQkvLyBhZGp1c3QgdGhlIG1heFogdG8gYWxsb3cgb3RoZXIgbW9kYWwgZGlhbG9ncyB0byBjb250aW51ZSB0byB3b3JrIChzZWUgIzQzMDkpCgkJJC5lYWNoKCB0aGlzLmluc3RhbmNlcywgZnVuY3Rpb24oKSB7CgkJCW1heFogPSBNYXRoLm1heCggbWF4WiwgdGhpcy5jc3MoICJ6LWluZGV4IiApICk7CgkJfSk7CgkJdGhpcy5tYXhaID0gbWF4WjsKCX0sCgoJaGVpZ2h0OiBmdW5jdGlvbigpIHsKCQl2YXIgc2Nyb2xsSGVpZ2h0LAoJCQlvZmZzZXRIZWlnaHQ7CgkJLy8gaGFuZGxlIElFCgkJaWYgKCAkLnVpLmllICkgewoJCQlzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgKCQkJCWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQsCgkJCQlkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodAoJCQkpOwoJCQlvZmZzZXRIZWlnaHQgPSBNYXRoLm1heCgKCQkJCWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQsCgkJCQlkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodAoJCQkpOwoKCQkJaWYgKCBzY3JvbGxIZWlnaHQgPCBvZmZzZXRIZWlnaHQgKSB7CgkJCQlyZXR1cm4gJCggd2luZG93ICkuaGVpZ2h0KCkgKyAicHgiOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHNjcm9sbEhlaWdodCArICJweCI7CgkJCX0KCQkvLyBoYW5kbGUgImdvb2QiIGJyb3dzZXJzCgkJfSBlbHNlIHsKCQkJcmV0dXJuICQoIGRvY3VtZW50ICkuaGVpZ2h0KCkgKyAicHgiOwoJCX0KCX0sCgoJd2lkdGg6IGZ1bmN0aW9uKCkgewoJCXZhciBzY3JvbGxXaWR0aCwKCQkJb2Zmc2V0V2lkdGg7CgkJLy8gaGFuZGxlIElFCgkJaWYgKCAkLnVpLmllICkgewoJCQlzY3JvbGxXaWR0aCA9IE1hdGgubWF4KAoJCQkJZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoLAoJCQkJZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aAoJCQkpOwoJCQlvZmZzZXRXaWR0aCA9IE1hdGgubWF4KAoJCQkJZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLAoJCQkJZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aAoJCQkpOwoKCQkJaWYgKCBzY3JvbGxXaWR0aCA8IG9mZnNldFdpZHRoICkgewoJCQkJcmV0dXJuICQoIHdpbmRvdyApLndpZHRoKCkgKyAicHgiOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHNjcm9sbFdpZHRoICsgInB4IjsKCQkJfQoJCS8vIGhhbmRsZSAiZ29vZCIgYnJvd3NlcnMKCQl9IGVsc2UgewoJCQlyZXR1cm4gJCggZG9jdW1lbnQgKS53aWR0aCgpICsgInB4IjsKCQl9Cgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24oKSB7CgkJLyogSWYgdGhlIGRpYWxvZyBpcyBkcmFnZ2FibGUgYW5kIHRoZSB1c2VyIGRyYWdzIGl0IHBhc3QgdGhlCgkJICogcmlnaHQgZWRnZSBvZiB0aGUgd2luZG93LCB0aGUgZG9jdW1lbnQgYmVjb21lcyB3aWRlciBzbyB3ZQoJCSAqIG5lZWQgdG8gc3RyZXRjaCB0aGUgb3ZlcmxheS4gSWYgdGhlIHVzZXIgdGhlbiBkcmFncyB0aGUKCQkgKiBkaWFsb2cgYmFjayB0byB0aGUgbGVmdCwgdGhlIGRvY3VtZW50IHdpbGwgYmVjb21lIG5hcnJvd2VyLAoJCSAqIHNvIHdlIG5lZWQgdG8gc2hyaW5rIHRoZSBvdmVybGF5IHRvIHRoZSBhcHByb3ByaWF0ZSBzaXplLgoJCSAqIFRoaXMgaXMgaGFuZGxlZCBieSBzaHJpbmtpbmcgdGhlIG92ZXJsYXkgYmVmb3JlIHNldHRpbmcgaXQKCQkgKiB0byB0aGUgZnVsbCBkb2N1bWVudCBzaXplLgoJCSAqLwoJCXZhciAkb3ZlcmxheXMgPSAkKCBbXSApOwoJCSQuZWFjaCggJC51aS5kaWFsb2cub3ZlcmxheS5pbnN0YW5jZXMsIGZ1bmN0aW9uKCkgewoJCQkkb3ZlcmxheXMgPSAkb3ZlcmxheXMuYWRkKCB0aGlzICk7CgkJfSk7CgoJCSRvdmVybGF5cy5jc3MoewoJCQl3aWR0aDogMCwKCQkJaGVpZ2h0OiAwCgkJfSkuY3NzKHsKCQkJd2lkdGg6ICQudWkuZGlhbG9nLm92ZXJsYXkud2lkdGgoKSwKCQkJaGVpZ2h0OiAkLnVpLmRpYWxvZy5vdmVybGF5LmhlaWdodCgpCgkJfSk7Cgl9Cn0pOwoKJC5leHRlbmQoICQudWkuZGlhbG9nLm92ZXJsYXkucHJvdG90eXBlLCB7CglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQkkLnVpLmRpYWxvZy5vdmVybGF5LmRlc3Ryb3koIHRoaXMuJGVsICk7Cgl9Cn0pOwoKfSggalF1ZXJ5ICkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgbW91c2VIYW5kbGVkID0gZmFsc2U7CgokLndpZGdldCggInVpLm1lbnUiLCB7Cgl2ZXJzaW9uOiAiMS45LjIiLAoJZGVmYXVsdEVsZW1lbnQ6ICI8dWw+IiwKCWRlbGF5OiAzMDAsCglvcHRpb25zOiB7CgkJaWNvbnM6IHsKCQkJc3VibWVudTogInVpLWljb24tY2FyYXQtMS1lIgoJCX0sCgkJbWVudXM6ICJ1bCIsCgkJcG9zaXRpb246IHsKCQkJbXk6ICJsZWZ0IHRvcCIsCgkJCWF0OiAicmlnaHQgdG9wIgoJCX0sCgkJcm9sZTogIm1lbnUiLAoKCQkvLyBjYWxsYmFja3MKCQlibHVyOiBudWxsLAoJCWZvY3VzOiBudWxsLAoJCXNlbGVjdDogbnVsbAoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmFjdGl2ZU1lbnUgPSB0aGlzLmVsZW1lbnQ7CgkJdGhpcy5lbGVtZW50CgkJCS51bmlxdWVJZCgpCgkJCS5hZGRDbGFzcyggInVpLW1lbnUgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiICkKCQkJLnRvZ2dsZUNsYXNzKCAidWktbWVudS1pY29ucyIsICEhdGhpcy5lbGVtZW50LmZpbmQoICIudWktaWNvbiIgKS5sZW5ndGggKQoJCQkuYXR0cih7CgkJCQlyb2xlOiB0aGlzLm9wdGlvbnMucm9sZSwKCQkJCXRhYkluZGV4OiAwCgkJCX0pCgkJCS8vIG5lZWQgdG8gY2F0Y2ggYWxsIGNsaWNrcyBvbiBkaXNhYmxlZCBtZW51CgkJCS8vIG5vdCBwb3NzaWJsZSB0aHJvdWdoIF9vbgoJCQkuYmluZCggImNsaWNrIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsICQucHJveHkoZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCX0KCQkJfSwgdGhpcyApKTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCXRoaXMuZWxlbWVudAoJCQkJLmFkZENsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkKCQkJCS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIiApOwoJCX0KCgkJdGhpcy5fb24oewoJCQkvLyBQcmV2ZW50IGZvY3VzIGZyb20gc3RpY2tpbmcgdG8gbGlua3MgaW5zaWRlIG1lbnUgYWZ0ZXIgY2xpY2tpbmcKCQkJLy8gdGhlbSAoZm9jdXMgc2hvdWxkIGFsd2F5cyBzdGF5IG9uIFVMIGR1cmluZyBuYXZpZ2F0aW9uKS4KCQkJIm1vdXNlZG93biAudWktbWVudS1pdGVtID4gYSI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0sCgkJCSJjbGljayAudWktc3RhdGUtZGlzYWJsZWQgPiBhIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJfSwKCQkJImNsaWNrIC51aS1tZW51LWl0ZW06aGFzKGEpIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdmFyIHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoICIudWktbWVudS1pdGVtIiApOwoJCQkJaWYgKCAhbW91c2VIYW5kbGVkICYmIHRhcmdldC5ub3QoICIudWktc3RhdGUtZGlzYWJsZWQiICkubGVuZ3RoICkgewoJCQkJCW1vdXNlSGFuZGxlZCA9IHRydWU7CgoJCQkJCXRoaXMuc2VsZWN0KCBldmVudCApOwoJCQkJCS8vIE9wZW4gc3VibWVudSBvbiBjbGljawoJCQkJCWlmICggdGFyZ2V0LmhhcyggIi51aS1tZW51IiApLmxlbmd0aCApIHsKCQkJCQkJdGhpcy5leHBhbmQoIGV2ZW50ICk7CgkJCQkJfSBlbHNlIGlmICggIXRoaXMuZWxlbWVudC5pcyggIjpmb2N1cyIgKSApIHsKCQkJCQkJLy8gUmVkaXJlY3QgZm9jdXMgdG8gdGhlIG1lbnUKCQkJCQkJdGhpcy5lbGVtZW50LnRyaWdnZXIoICJmb2N1cyIsIFsgdHJ1ZSBdICk7CgoJCQkJCQkvLyBJZiB0aGUgYWN0aXZlIGl0ZW0gaXMgb24gdGhlIHRvcCBsZXZlbCwgbGV0IGl0IHN0YXkgYWN0aXZlLgoJCQkJCQkvLyBPdGhlcndpc2UsIGJsdXIgdGhlIGFjdGl2ZSBpdGVtIHNpbmNlIGl0IGlzIG5vIGxvbmdlciB2aXNpYmxlLgoJCQkJCQlpZiAoIHRoaXMuYWN0aXZlICYmIHRoaXMuYWN0aXZlLnBhcmVudHMoICIudWktbWVudSIgKS5sZW5ndGggPT09IDEgKSB7CgkJCQkJCQljbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfSwKCQkJIm1vdXNlZW50ZXIgLnVpLW1lbnUtaXRlbSI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXZhciB0YXJnZXQgPSAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICk7CgkJCQkvLyBSZW1vdmUgdWktc3RhdGUtYWN0aXZlIGNsYXNzIGZyb20gc2libGluZ3Mgb2YgdGhlIG5ld2x5IGZvY3VzZWQgbWVudSBpdGVtCgkJCQkvLyB0byBhdm9pZCBhIGp1bXAgY2F1c2VkIGJ5IGFkamFjZW50IGVsZW1lbnRzIGJvdGggaGF2aW5nIGEgY2xhc3Mgd2l0aCBhIGJvcmRlcgoJCQkJdGFyZ2V0LnNpYmxpbmdzKCkuY2hpbGRyZW4oICIudWktc3RhdGUtYWN0aXZlIiApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJdGhpcy5mb2N1cyggZXZlbnQsIHRhcmdldCApOwoJCQl9LAoJCQltb3VzZWxlYXZlOiAiY29sbGFwc2VBbGwiLAoJCQkibW91c2VsZWF2ZSAudWktbWVudSI6ICJjb2xsYXBzZUFsbCIsCgkJCWZvY3VzOiBmdW5jdGlvbiggZXZlbnQsIGtlZXBBY3RpdmVJdGVtICkgewoJCQkJLy8gSWYgdGhlcmUncyBhbHJlYWR5IGFuIGFjdGl2ZSBpdGVtLCBrZWVwIGl0IGFjdGl2ZQoJCQkJLy8gSWYgbm90LCBhY3RpdmF0ZSB0aGUgZmlyc3QgaXRlbQoJCQkJdmFyIGl0ZW0gPSB0aGlzLmFjdGl2ZSB8fCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oICIudWktbWVudS1pdGVtIiApLmVxKCAwICk7CgoJCQkJaWYgKCAha2VlcEFjdGl2ZUl0ZW0gKSB7CgkJCQkJdGhpcy5mb2N1cyggZXZlbnQsIGl0ZW0gKTsKCQkJCX0KCQkJfSwKCQkJYmx1cjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQkJaWYgKCAhJC5jb250YWlucyggdGhpcy5lbGVtZW50WzBdLCB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgKSApIHsKCQkJCQkJdGhpcy5jb2xsYXBzZUFsbCggZXZlbnQgKTsKCQkJCQl9CgkJCQl9KTsKCQkJfSwKCQkJa2V5ZG93bjogIl9rZXlkb3duIgoJCX0pOwoKCQl0aGlzLnJlZnJlc2goKTsKCgkJLy8gQ2xpY2tzIG91dHNpZGUgb2YgYSBtZW51IGNvbGxhcHNlIGFueSBvcGVuIG1lbnVzCgkJdGhpcy5fb24oIHRoaXMuZG9jdW1lbnQsIHsKCQkJY2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggISQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoICIudWktbWVudSIgKS5sZW5ndGggKSB7CgkJCQkJdGhpcy5jb2xsYXBzZUFsbCggZXZlbnQgKTsKCQkJCX0KCgkJCQkvLyBSZXNldCB0aGUgbW91c2VIYW5kbGVkIGZsYWcKCQkJCW1vdXNlSGFuZGxlZCA9IGZhbHNlOwoJCQl9CgkJfSk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQkvLyBEZXN0cm95IChzdWIpbWVudXMKCQl0aGlzLmVsZW1lbnQKCQkJLnJlbW92ZUF0dHIoICJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiICkKCQkJLmZpbmQoICIudWktbWVudSIgKS5hbmRTZWxmKCkKCQkJCS5yZW1vdmVDbGFzcyggInVpLW1lbnUgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwgdWktbWVudS1pY29ucyIgKQoJCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCQkucmVtb3ZlQXR0ciggInRhYkluZGV4IiApCgkJCQkucmVtb3ZlQXR0ciggImFyaWEtbGFiZWxsZWRieSIgKQoJCQkJLnJlbW92ZUF0dHIoICJhcmlhLWV4cGFuZGVkIiApCgkJCQkucmVtb3ZlQXR0ciggImFyaWEtaGlkZGVuIiApCgkJCQkucmVtb3ZlQXR0ciggImFyaWEtZGlzYWJsZWQiICkKCQkJCS5yZW1vdmVVbmlxdWVJZCgpCgkJCQkuc2hvdygpOwoKCQkvLyBEZXN0cm95IG1lbnUgaXRlbXMKCQl0aGlzLmVsZW1lbnQuZmluZCggIi51aS1tZW51LWl0ZW0iICkKCQkJLnJlbW92ZUNsYXNzKCAidWktbWVudS1pdGVtIiApCgkJCS5yZW1vdmVBdHRyKCAicm9sZSIgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtZGlzYWJsZWQiICkKCQkJLmNoaWxkcmVuKCAiYSIgKQoJCQkJLnJlbW92ZVVuaXF1ZUlkKCkKCQkJCS5yZW1vdmVDbGFzcyggInVpLWNvcm5lci1hbGwgdWktc3RhdGUtaG92ZXIiICkKCQkJCS5yZW1vdmVBdHRyKCAidGFiSW5kZXgiICkKCQkJCS5yZW1vdmVBdHRyKCAicm9sZSIgKQoJCQkJLnJlbW92ZUF0dHIoICJhcmlhLWhhc3BvcHVwIiApCgkJCQkuY2hpbGRyZW4oKS5lYWNoKCBmdW5jdGlvbigpIHsKCQkJCQl2YXIgZWxlbSA9ICQoIHRoaXMgKTsKCQkJCQlpZiAoIGVsZW0uZGF0YSggInVpLW1lbnUtc3VibWVudS1jYXJhdCIgKSApIHsKCQkJCQkJZWxlbS5yZW1vdmUoKTsKCQkJCQl9CgkJCQl9KTsKCgkJLy8gRGVzdHJveSBtZW51IGRpdmlkZXJzCgkJdGhpcy5lbGVtZW50LmZpbmQoICIudWktbWVudS1kaXZpZGVyIiApLnJlbW92ZUNsYXNzKCAidWktbWVudS1kaXZpZGVyIHVpLXdpZGdldC1jb250ZW50IiApOwoJfSwKCglfa2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBtYXRjaCwgcHJldiwgY2hhcmFjdGVyLCBza2lwLCByZWdleCwKCQkJcHJldmVudERlZmF1bHQgPSB0cnVlOwoKCQlmdW5jdGlvbiBlc2NhcGUoIHZhbHVlICkgewoJCQlyZXR1cm4gdmFsdWUucmVwbGFjZSggL1tcLVxbXF17fSgpKis/LixcXFxeJHwjXHNdL2csICJcXCQmIiApOwoJCX0KCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQljYXNlICQudWkua2V5Q29kZS5QQUdFX1VQOgoJCQl0aGlzLnByZXZpb3VzUGFnZSggZXZlbnQgKTsKCQkJYnJlYWs7CgkJY2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOgoJCQl0aGlzLm5leHRQYWdlKCBldmVudCApOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5IT01FOgoJCQl0aGlzLl9tb3ZlKCAiZmlyc3QiLCAiZmlyc3QiLCBldmVudCApOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5FTkQ6CgkJCXRoaXMuX21vdmUoICJsYXN0IiwgImxhc3QiLCBldmVudCApOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5VUDoKCQkJdGhpcy5wcmV2aW91cyggZXZlbnQgKTsKCQkJYnJlYWs7CgkJY2FzZSAkLnVpLmtleUNvZGUuRE9XTjoKCQkJdGhpcy5uZXh0KCBldmVudCApOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5MRUZUOgoJCQl0aGlzLmNvbGxhcHNlKCBldmVudCApOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5SSUdIVDoKCQkJaWYgKCB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUuaXMoICIudWktc3RhdGUtZGlzYWJsZWQiICkgKSB7CgkJCQl0aGlzLmV4cGFuZCggZXZlbnQgKTsKCQkJfQoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5FTlRFUjoKCQljYXNlICQudWkua2V5Q29kZS5TUEFDRToKCQkJdGhpcy5fYWN0aXZhdGUoIGV2ZW50ICk7CgkJCWJyZWFrOwoJCWNhc2UgJC51aS5rZXlDb2RlLkVTQ0FQRToKCQkJdGhpcy5jb2xsYXBzZSggZXZlbnQgKTsKCQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJcHJldmVudERlZmF1bHQgPSBmYWxzZTsKCQkJcHJldiA9IHRoaXMucHJldmlvdXNGaWx0ZXIgfHwgIiI7CgkJCWNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGV2ZW50LmtleUNvZGUgKTsKCQkJc2tpcCA9IGZhbHNlOwoKCQkJY2xlYXJUaW1lb3V0KCB0aGlzLmZpbHRlclRpbWVyICk7CgoJCQlpZiAoIGNoYXJhY3RlciA9PT0gcHJldiApIHsKCQkJCXNraXAgPSB0cnVlOwoJCQl9IGVsc2UgewoJCQkJY2hhcmFjdGVyID0gcHJldiArIGNoYXJhY3RlcjsKCQkJfQoKCQkJcmVnZXggPSBuZXcgUmVnRXhwKCAiXiIgKyBlc2NhcGUoIGNoYXJhY3RlciApLCAiaSIgKTsKCQkJbWF0Y2ggPSB0aGlzLmFjdGl2ZU1lbnUuY2hpbGRyZW4oICIudWktbWVudS1pdGVtIiApLmZpbHRlcihmdW5jdGlvbigpIHsKCQkJCXJldHVybiByZWdleC50ZXN0KCAkKCB0aGlzICkuY2hpbGRyZW4oICJhIiApLnRleHQoKSApOwoJCQl9KTsKCQkJbWF0Y2ggPSBza2lwICYmIG1hdGNoLmluZGV4KCB0aGlzLmFjdGl2ZS5uZXh0KCkgKSAhPT0gLTEgPwoJCQkJdGhpcy5hY3RpdmUubmV4dEFsbCggIi51aS1tZW51LWl0ZW0iICkgOgoJCQkJbWF0Y2g7CgoJCQkvLyBJZiBubyBtYXRjaGVzIG9uIHRoZSBjdXJyZW50IGZpbHRlciwgcmVzZXQgdG8gdGhlIGxhc3QgY2hhcmFjdGVyIHByZXNzZWQKCQkJLy8gdG8gbW92ZSBkb3duIHRoZSBtZW51IHRvIHRoZSBmaXJzdCBpdGVtIHRoYXQgc3RhcnRzIHdpdGggdGhhdCBjaGFyYWN0ZXIKCQkJaWYgKCAhbWF0Y2gubGVuZ3RoICkgewoJCQkJY2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSggZXZlbnQua2V5Q29kZSApOwoJCQkJcmVnZXggPSBuZXcgUmVnRXhwKCAiXiIgKyBlc2NhcGUoIGNoYXJhY3RlciApLCAiaSIgKTsKCQkJCW1hdGNoID0gdGhpcy5hY3RpdmVNZW51LmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbSIgKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQkJcmV0dXJuIHJlZ2V4LnRlc3QoICQoIHRoaXMgKS5jaGlsZHJlbiggImEiICkudGV4dCgpICk7CgkJCQl9KTsKCQkJfQoKCQkJaWYgKCBtYXRjaC5sZW5ndGggKSB7CgkJCQl0aGlzLmZvY3VzKCBldmVudCwgbWF0Y2ggKTsKCQkJCWlmICggbWF0Y2gubGVuZ3RoID4gMSApIHsKCQkJCQl0aGlzLnByZXZpb3VzRmlsdGVyID0gY2hhcmFjdGVyOwoJCQkJCXRoaXMuZmlsdGVyVGltZXIgPSB0aGlzLl9kZWxheShmdW5jdGlvbigpIHsKCQkJCQkJZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7CgkJCQkJfSwgMTAwMCApOwoJCQkJfSBlbHNlIHsKCQkJCQlkZWxldGUgdGhpcy5wcmV2aW91c0ZpbHRlcjsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyOwoJCQl9CgkJfQoKCQlpZiAoIHByZXZlbnREZWZhdWx0ICkgewoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCX0KCX0sCgoJX2FjdGl2YXRlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5hY3RpdmUuaXMoICIudWktc3RhdGUtZGlzYWJsZWQiICkgKSB7CgkJCWlmICggdGhpcy5hY3RpdmUuY2hpbGRyZW4oICJhW2FyaWEtaGFzcG9wdXA9J3RydWUnXSIgKS5sZW5ndGggKSB7CgkJCQl0aGlzLmV4cGFuZCggZXZlbnQgKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMuc2VsZWN0KCBldmVudCApOwoJCQl9CgkJfQoJfSwKCglyZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl2YXIgbWVudXMsCgkJCWljb24gPSB0aGlzLm9wdGlvbnMuaWNvbnMuc3VibWVudSwKCQkJc3VibWVudXMgPSB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLm1lbnVzICk7CgoJCS8vIEluaXRpYWxpemUgbmVzdGVkIG1lbnVzCgkJc3VibWVudXMuZmlsdGVyKCAiOm5vdCgudWktbWVudSkiICkKCQkJLmFkZENsYXNzKCAidWktbWVudSB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCIgKQoJCQkuaGlkZSgpCgkJCS5hdHRyKHsKCQkJCXJvbGU6IHRoaXMub3B0aW9ucy5yb2xlLAoJCQkJImFyaWEtaGlkZGVuIjogInRydWUiLAoJCQkJImFyaWEtZXhwYW5kZWQiOiAiZmFsc2UiCgkJCX0pCgkJCS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIG1lbnUgPSAkKCB0aGlzICksCgkJCQkJaXRlbSA9IG1lbnUucHJldiggImEiICksCgkJCQkJc3VibWVudUNhcmF0ID0gJCggIjxzcGFuPiIgKQoJCQkJCQkuYWRkQ2xhc3MoICJ1aS1tZW51LWljb24gdWktaWNvbiAiICsgaWNvbiApCgkJCQkJCS5kYXRhKCAidWktbWVudS1zdWJtZW51LWNhcmF0IiwgdHJ1ZSApOwoKCQkJCWl0ZW0KCQkJCQkuYXR0ciggImFyaWEtaGFzcG9wdXAiLCAidHJ1ZSIgKQoJCQkJCS5wcmVwZW5kKCBzdWJtZW51Q2FyYXQgKTsKCQkJCW1lbnUuYXR0ciggImFyaWEtbGFiZWxsZWRieSIsIGl0ZW0uYXR0ciggImlkIiApICk7CgkJCX0pOwoKCQltZW51cyA9IHN1Ym1lbnVzLmFkZCggdGhpcy5lbGVtZW50ICk7CgoJCS8vIERvbid0IHJlZnJlc2ggbGlzdCBpdGVtcyB0aGF0IGFyZSBhbHJlYWR5IGFkYXB0ZWQKCQltZW51cy5jaGlsZHJlbiggIjpub3QoLnVpLW1lbnUtaXRlbSk6aGFzKGEpIiApCgkJCS5hZGRDbGFzcyggInVpLW1lbnUtaXRlbSIgKQoJCQkuYXR0ciggInJvbGUiLCAicHJlc2VudGF0aW9uIiApCgkJCS5jaGlsZHJlbiggImEiICkKCQkJCS51bmlxdWVJZCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYWxsIiApCgkJCQkuYXR0cih7CgkJCQkJdGFiSW5kZXg6IC0xLAoJCQkJCXJvbGU6IHRoaXMuX2l0ZW1Sb2xlKCkKCQkJCX0pOwoKCQkvLyBJbml0aWFsaXplIHVubGlua2VkIG1lbnUtaXRlbXMgY29udGFpbmluZyBzcGFjZXMgYW5kL29yIGRhc2hlcyBvbmx5IGFzIGRpdmlkZXJzCgkJbWVudXMuY2hpbGRyZW4oICI6bm90KC51aS1tZW51LWl0ZW0pIiApLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBpdGVtID0gJCggdGhpcyApOwoJCQkvLyBoeXBoZW4sIGVtIGRhc2gsIGVuIGRhc2gKCQkJaWYgKCAhL1teXC3igJTigJNcc10vLnRlc3QoIGl0ZW0udGV4dCgpICkgKSB7CgkJCQlpdGVtLmFkZENsYXNzKCAidWktd2lkZ2V0LWNvbnRlbnQgdWktbWVudS1kaXZpZGVyIiApOwoJCQl9CgkJfSk7CgoJCS8vIEFkZCBhcmlhLWRpc2FibGVkIGF0dHJpYnV0ZSB0byBhbnkgZGlzYWJsZWQgbWVudSBpdGVtCgkJbWVudXMuY2hpbGRyZW4oICIudWktc3RhdGUtZGlzYWJsZWQiICkuYXR0ciggImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIgKTsKCgkJLy8gSWYgdGhlIGFjdGl2ZSBpdGVtIGhhcyBiZWVuIHJlbW92ZWQsIGJsdXIgdGhlIG1lbnUKCQlpZiAoIHRoaXMuYWN0aXZlICYmICEkLmNvbnRhaW5zKCB0aGlzLmVsZW1lbnRbIDAgXSwgdGhpcy5hY3RpdmVbIDAgXSApICkgewoJCQl0aGlzLmJsdXIoKTsKCQl9Cgl9LAoKCV9pdGVtUm9sZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHsKCQkJbWVudTogIm1lbnVpdGVtIiwKCQkJbGlzdGJveDogIm9wdGlvbiIKCQl9WyB0aGlzLm9wdGlvbnMucm9sZSBdOwoJfSwKCglmb2N1czogZnVuY3Rpb24oIGV2ZW50LCBpdGVtICkgewoJCXZhciBuZXN0ZWQsIGZvY3VzZWQ7CgkJdGhpcy5ibHVyKCBldmVudCwgZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gImZvY3VzIiApOwoKCQl0aGlzLl9zY3JvbGxJbnRvVmlldyggaXRlbSApOwoKCQl0aGlzLmFjdGl2ZSA9IGl0ZW0uZmlyc3QoKTsKCQlmb2N1c2VkID0gdGhpcy5hY3RpdmUuY2hpbGRyZW4oICJhIiApLmFkZENsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7CgkJLy8gT25seSB1cGRhdGUgYXJpYS1hY3RpdmVkZXNjZW5kYW50IGlmIHRoZXJlJ3MgYSByb2xlCgkJLy8gb3RoZXJ3aXNlIHdlIGFzc3VtZSBmb2N1cyBpcyBtYW5hZ2VkIGVsc2V3aGVyZQoJCWlmICggdGhpcy5vcHRpb25zLnJvbGUgKSB7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAiYXJpYS1hY3RpdmVkZXNjZW5kYW50IiwgZm9jdXNlZC5hdHRyKCAiaWQiICkgKTsKCQl9CgoJCS8vIEhpZ2hsaWdodCBhY3RpdmUgcGFyZW50IG1lbnUgaXRlbSwgaWYgYW55CgkJdGhpcy5hY3RpdmUKCQkJLnBhcmVudCgpCgkJCS5jbG9zZXN0KCAiLnVpLW1lbnUtaXRlbSIgKQoJCQkuY2hpbGRyZW4oICJhOmZpcnN0IiApCgkJCS5hZGRDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsKCgkJaWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSAia2V5ZG93biIgKSB7CgkJCXRoaXMuX2Nsb3NlKCk7CgkJfSBlbHNlIHsKCQkJdGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQkJdGhpcy5fY2xvc2UoKTsKCQkJfSwgdGhpcy5kZWxheSApOwoJCX0KCgkJbmVzdGVkID0gaXRlbS5jaGlsZHJlbiggIi51aS1tZW51IiApOwoJCWlmICggbmVzdGVkLmxlbmd0aCAmJiAoIC9ebW91c2UvLnRlc3QoIGV2ZW50LnR5cGUgKSApICkgewoJCQl0aGlzLl9zdGFydE9wZW5pbmcobmVzdGVkKTsKCQl9CgkJdGhpcy5hY3RpdmVNZW51ID0gaXRlbS5wYXJlbnQoKTsKCgkJdGhpcy5fdHJpZ2dlciggImZvY3VzIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICk7Cgl9LAoKCV9zY3JvbGxJbnRvVmlldzogZnVuY3Rpb24oIGl0ZW0gKSB7CgkJdmFyIGJvcmRlclRvcCwgcGFkZGluZ1RvcCwgb2Zmc2V0LCBzY3JvbGwsIGVsZW1lbnRIZWlnaHQsIGl0ZW1IZWlnaHQ7CgkJaWYgKCB0aGlzLl9oYXNTY3JvbGwoKSApIHsKCQkJYm9yZGVyVG9wID0gcGFyc2VGbG9hdCggJC5jc3MoIHRoaXMuYWN0aXZlTWVudVswXSwgImJvcmRlclRvcFdpZHRoIiApICkgfHwgMDsKCQkJcGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQoICQuY3NzKCB0aGlzLmFjdGl2ZU1lbnVbMF0sICJwYWRkaW5nVG9wIiApICkgfHwgMDsKCQkJb2Zmc2V0ID0gaXRlbS5vZmZzZXQoKS50b3AgLSB0aGlzLmFjdGl2ZU1lbnUub2Zmc2V0KCkudG9wIC0gYm9yZGVyVG9wIC0gcGFkZGluZ1RvcDsKCQkJc2Nyb2xsID0gdGhpcy5hY3RpdmVNZW51LnNjcm9sbFRvcCgpOwoJCQllbGVtZW50SGVpZ2h0ID0gdGhpcy5hY3RpdmVNZW51LmhlaWdodCgpOwoJCQlpdGVtSGVpZ2h0ID0gaXRlbS5oZWlnaHQoKTsKCgkJCWlmICggb2Zmc2V0IDwgMCApIHsKCQkJCXRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoIHNjcm9sbCArIG9mZnNldCApOwoJCQl9IGVsc2UgaWYgKCBvZmZzZXQgKyBpdGVtSGVpZ2h0ID4gZWxlbWVudEhlaWdodCApIHsKCQkJCXRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoIHNjcm9sbCArIG9mZnNldCAtIGVsZW1lbnRIZWlnaHQgKyBpdGVtSGVpZ2h0ICk7CgkJCX0KCQl9Cgl9LAoKCWJsdXI6IGZ1bmN0aW9uKCBldmVudCwgZnJvbUZvY3VzICkgewoJCWlmICggIWZyb21Gb2N1cyApIHsKCQkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJfQoKCQlpZiAoICF0aGlzLmFjdGl2ZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJdGhpcy5hY3RpdmUuY2hpbGRyZW4oICJhIiApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7CgkJdGhpcy5hY3RpdmUgPSBudWxsOwoKCQl0aGlzLl90cmlnZ2VyKCAiYmx1ciIsIGV2ZW50LCB7IGl0ZW06IHRoaXMuYWN0aXZlIH0gKTsKCX0sCgoJX3N0YXJ0T3BlbmluZzogZnVuY3Rpb24oIHN1Ym1lbnUgKSB7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgoJCS8vIERvbid0IG9wZW4gaWYgYWxyZWFkeSBvcGVuIGZpeGVzIGEgRmlyZWZveCBidWcgdGhhdCBjYXVzZWQgYSAuNSBwaXhlbAoJCS8vIHNoaWZ0IGluIHRoZSBzdWJtZW51IHBvc2l0aW9uIHdoZW4gbW91c2luZyBvdmVyIHRoZSBjYXJhdCBpY29uCgkJaWYgKCBzdWJtZW51LmF0dHIoICJhcmlhLWhpZGRlbiIgKSAhPT0gInRydWUiICkgewoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCXRoaXMuX2Nsb3NlKCk7CgkJCXRoaXMuX29wZW4oIHN1Ym1lbnUgKTsKCQl9LCB0aGlzLmRlbGF5ICk7Cgl9LAoKCV9vcGVuOiBmdW5jdGlvbiggc3VibWVudSApIHsKCQl2YXIgcG9zaXRpb24gPSAkLmV4dGVuZCh7CgkJCW9mOiB0aGlzLmFjdGl2ZQoJCX0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbiApOwoKCQljbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTsKCQl0aGlzLmVsZW1lbnQuZmluZCggIi51aS1tZW51IiApLm5vdCggc3VibWVudS5wYXJlbnRzKCAiLnVpLW1lbnUiICkgKQoJCQkuaGlkZSgpCgkJCS5hdHRyKCAiYXJpYS1oaWRkZW4iLCAidHJ1ZSIgKTsKCgkJc3VibWVudQoJCQkuc2hvdygpCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1oaWRkZW4iICkKCQkJLmF0dHIoICJhcmlhLWV4cGFuZGVkIiwgInRydWUiICkKCQkJLnBvc2l0aW9uKCBwb3NpdGlvbiApOwoJfSwKCgljb2xsYXBzZUFsbDogZnVuY3Rpb24oIGV2ZW50LCBhbGwgKSB7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJdGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQkvLyBJZiB3ZSB3ZXJlIHBhc3NlZCBhbiBldmVudCwgbG9vayBmb3IgdGhlIHN1Ym1lbnUgdGhhdCBjb250YWlucyB0aGUgZXZlbnQKCQkJdmFyIGN1cnJlbnRNZW51ID0gYWxsID8gdGhpcy5lbGVtZW50IDoKCQkJCSQoIGV2ZW50ICYmIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIHRoaXMuZWxlbWVudC5maW5kKCAiLnVpLW1lbnUiICkgKTsKCgkJCS8vIElmIHdlIGZvdW5kIG5vIHZhbGlkIHN1Ym1lbnUgYW5jZXN0b3IsIHVzZSB0aGUgbWFpbiBtZW51IHRvIGNsb3NlIGFsbCBzdWIgbWVudXMgYW55d2F5CgkJCWlmICggIWN1cnJlbnRNZW51Lmxlbmd0aCApIHsKCQkJCWN1cnJlbnRNZW51ID0gdGhpcy5lbGVtZW50OwoJCQl9CgoJCQl0aGlzLl9jbG9zZSggY3VycmVudE1lbnUgKTsKCgkJCXRoaXMuYmx1ciggZXZlbnQgKTsKCQkJdGhpcy5hY3RpdmVNZW51ID0gY3VycmVudE1lbnU7CgkJfSwgdGhpcy5kZWxheSApOwoJfSwKCgkvLyBXaXRoIG5vIGFyZ3VtZW50cywgY2xvc2VzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1lbnUgLSBpZiBub3RoaW5nIGlzIGFjdGl2ZQoJLy8gaXQgY2xvc2VzIGFsbCBtZW51cy4gIElmIHBhc3NlZCBhbiBhcmd1bWVudCwgaXQgd2lsbCBzZWFyY2ggZm9yIG1lbnVzIEJFTE9XCglfY2xvc2U6IGZ1bmN0aW9uKCBzdGFydE1lbnUgKSB7CgkJaWYgKCAhc3RhcnRNZW51ICkgewoJCQlzdGFydE1lbnUgPSB0aGlzLmFjdGl2ZSA/IHRoaXMuYWN0aXZlLnBhcmVudCgpIDogdGhpcy5lbGVtZW50OwoJCX0KCgkJc3RhcnRNZW51CgkJCS5maW5kKCAiLnVpLW1lbnUiICkKCQkJCS5oaWRlKCkKCQkJCS5hdHRyKCAiYXJpYS1oaWRkZW4iLCAidHJ1ZSIgKQoJCQkJLmF0dHIoICJhcmlhLWV4cGFuZGVkIiwgImZhbHNlIiApCgkJCS5lbmQoKQoJCQkuZmluZCggImEudWktc3RhdGUtYWN0aXZlIiApCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7Cgl9LAoKCWNvbGxhcHNlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIG5ld0l0ZW0gPSB0aGlzLmFjdGl2ZSAmJgoJCQl0aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KCAiLnVpLW1lbnUtaXRlbSIsIHRoaXMuZWxlbWVudCApOwoJCWlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHsKCQkJdGhpcy5fY2xvc2UoKTsKCQkJdGhpcy5mb2N1cyggZXZlbnQsIG5ld0l0ZW0gKTsKCQl9Cgl9LAoKCWV4cGFuZDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBuZXdJdGVtID0gdGhpcy5hY3RpdmUgJiYKCQkJdGhpcy5hY3RpdmUKCQkJCS5jaGlsZHJlbiggIi51aS1tZW51ICIgKQoJCQkJLmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbSIgKQoJCQkJLmZpcnN0KCk7CgoJCWlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHsKCQkJdGhpcy5fb3BlbiggbmV3SXRlbS5wYXJlbnQoKSApOwoKCQkJLy8gRGVsYXkgc28gRmlyZWZveCB3aWxsIG5vdCBoaWRlIGFjdGl2ZWRlc2NlbmRhbnQgY2hhbmdlIGluIGV4cGFuZGluZyBzdWJtZW51IGZyb20gQVQKCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQl0aGlzLmZvY3VzKCBldmVudCwgbmV3SXRlbSApOwoJCQl9KTsKCQl9Cgl9LAoKCW5leHQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLl9tb3ZlKCAibmV4dCIsICJmaXJzdCIsIGV2ZW50ICk7Cgl9LAoKCXByZXZpb3VzOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdGhpcy5fbW92ZSggInByZXYiLCAibGFzdCIsIGV2ZW50ICk7Cgl9LAoKCWlzRmlyc3RJdGVtOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLnByZXZBbGwoICIudWktbWVudS1pdGVtIiApLmxlbmd0aDsKCX0sCgoJaXNMYXN0SXRlbTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5uZXh0QWxsKCAiLnVpLW1lbnUtaXRlbSIgKS5sZW5ndGg7Cgl9LAoKCV9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBmaWx0ZXIsIGV2ZW50ICkgewoJCXZhciBuZXh0OwoJCWlmICggdGhpcy5hY3RpdmUgKSB7CgkJCWlmICggZGlyZWN0aW9uID09PSAiZmlyc3QiIHx8IGRpcmVjdGlvbiA9PT0gImxhc3QiICkgewoJCQkJbmV4dCA9IHRoaXMuYWN0aXZlCgkJCQkJWyBkaXJlY3Rpb24gPT09ICJmaXJzdCIgPyAicHJldkFsbCIgOiAibmV4dEFsbCIgXSggIi51aS1tZW51LWl0ZW0iICkKCQkJCQkuZXEoIC0xICk7CgkJCX0gZWxzZSB7CgkJCQluZXh0ID0gdGhpcy5hY3RpdmUKCQkJCQlbIGRpcmVjdGlvbiArICJBbGwiIF0oICIudWktbWVudS1pdGVtIiApCgkJCQkJLmVxKCAwICk7CgkJCX0KCQl9CgkJaWYgKCAhbmV4dCB8fCAhbmV4dC5sZW5ndGggfHwgIXRoaXMuYWN0aXZlICkgewoJCQluZXh0ID0gdGhpcy5hY3RpdmVNZW51LmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbSIgKVsgZmlsdGVyIF0oKTsKCQl9CgoJCXRoaXMuZm9jdXMoIGV2ZW50LCBuZXh0ICk7Cgl9LAoKCW5leHRQYWdlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGl0ZW0sIGJhc2UsIGhlaWdodDsKCgkJaWYgKCAhdGhpcy5hY3RpdmUgKSB7CgkJCXRoaXMubmV4dCggZXZlbnQgKTsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMuaXNMYXN0SXRlbSgpICkgewoJCQlyZXR1cm47CgkJfQoJCWlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7CgkJCWJhc2UgPSB0aGlzLmFjdGl2ZS5vZmZzZXQoKS50b3A7CgkJCWhlaWdodCA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKTsKCQkJdGhpcy5hY3RpdmUubmV4dEFsbCggIi51aS1tZW51LWl0ZW0iICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCWl0ZW0gPSAkKCB0aGlzICk7CgkJCQlyZXR1cm4gaXRlbS5vZmZzZXQoKS50b3AgLSBiYXNlIC0gaGVpZ2h0IDwgMDsKCQkJfSk7CgoJCQl0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApOwoJCX0gZWxzZSB7CgkJCXRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuY2hpbGRyZW4oICIudWktbWVudS1pdGVtIiApCgkJCQlbICF0aGlzLmFjdGl2ZSA/ICJmaXJzdCIgOiAibGFzdCIgXSgpICk7CgkJfQoJfSwKCglwcmV2aW91c1BhZ2U6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgaXRlbSwgYmFzZSwgaGVpZ2h0OwoJCWlmICggIXRoaXMuYWN0aXZlICkgewoJCQl0aGlzLm5leHQoIGV2ZW50ICk7CgkJCXJldHVybjsKCQl9CgkJaWYgKCB0aGlzLmlzRmlyc3RJdGVtKCkgKSB7CgkJCXJldHVybjsKCQl9CgkJaWYgKCB0aGlzLl9oYXNTY3JvbGwoKSApIHsKCQkJYmFzZSA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcDsKCQkJaGVpZ2h0ID0gdGhpcy5lbGVtZW50LmhlaWdodCgpOwoJCQl0aGlzLmFjdGl2ZS5wcmV2QWxsKCAiLnVpLW1lbnUtaXRlbSIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJaXRlbSA9ICQoIHRoaXMgKTsKCQkJCXJldHVybiBpdGVtLm9mZnNldCgpLnRvcCAtIGJhc2UgKyBoZWlnaHQgPiAwOwoJCQl9KTsKCgkJCXRoaXMuZm9jdXMoIGV2ZW50LCBpdGVtICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5mb2N1cyggZXZlbnQsIHRoaXMuYWN0aXZlTWVudS5jaGlsZHJlbiggIi51aS1tZW51LWl0ZW0iICkuZmlyc3QoKSApOwoJCX0KCX0sCgoJX2hhc1Njcm9sbDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgdGhpcy5lbGVtZW50LnByb3AoICJzY3JvbGxIZWlnaHQiICk7Cgl9LAoKCXNlbGVjdDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCS8vIFRPRE86IEl0IHNob3VsZCBuZXZlciBiZSBwb3NzaWJsZSB0byBub3QgaGF2ZSBhbiBhY3RpdmUgaXRlbSBhdCB0aGlzCgkJLy8gcG9pbnQsIGJ1dCB0aGUgdGVzdHMgZG9uJ3QgdHJpZ2dlciBtb3VzZWVudGVyIGJlZm9yZSBjbGljay4KCQl0aGlzLmFjdGl2ZSA9IHRoaXMuYWN0aXZlIHx8ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoICIudWktbWVudS1pdGVtIiApOwoJCXZhciB1aSA9IHsgaXRlbTogdGhpcy5hY3RpdmUgfTsKCQlpZiAoICF0aGlzLmFjdGl2ZS5oYXMoICIudWktbWVudSIgKS5sZW5ndGggKSB7CgkJCXRoaXMuY29sbGFwc2VBbGwoIGV2ZW50LCB0cnVlICk7CgkJfQoJCXRoaXMuX3RyaWdnZXIoICJzZWxlY3QiLCBldmVudCwgdWkgKTsKCX0KfSk7Cgp9KCBqUXVlcnkgKSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJ1aS5wcm9ncmVzc2JhciIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglvcHRpb25zOiB7CgkJdmFsdWU6IDAsCgkJbWF4OiAxMDAKCX0sCgoJbWluOiAwLAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudAoJCQkuYWRkQ2xhc3MoICJ1aS1wcm9ncmVzc2JhciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCIgKQoJCQkuYXR0cih7CgkJCQlyb2xlOiAicHJvZ3Jlc3NiYXIiLAoJCQkJImFyaWEtdmFsdWVtaW4iOiB0aGlzLm1pbiwKCQkJCSJhcmlhLXZhbHVlbWF4IjogdGhpcy5vcHRpb25zLm1heCwKCQkJCSJhcmlhLXZhbHVlbm93IjogdGhpcy5fdmFsdWUoKQoJCQl9KTsKCgkJdGhpcy52YWx1ZURpdiA9ICQoICI8ZGl2IGNsYXNzPSd1aS1wcm9ncmVzc2Jhci12YWx1ZSB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1sZWZ0Jz48L2Rpdj4iICkKCQkJLmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKTsKCgkJdGhpcy5vbGRWYWx1ZSA9IHRoaXMuX3ZhbHVlKCk7CgkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQKCQkJLnJlbW92ZUNsYXNzKCAidWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS12YWx1ZW1pbiIgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtdmFsdWVtYXgiICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLXZhbHVlbm93IiApOwoKCQl0aGlzLnZhbHVlRGl2LnJlbW92ZSgpOwoJfSwKCgl2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbHVlICkgewoJCWlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIHRoaXMuX3ZhbHVlKCk7CgkJfQoKCQl0aGlzLl9zZXRPcHRpb24oICJ2YWx1ZSIsIG5ld1ZhbHVlICk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCWlmICgga2V5ID09PSAidmFsdWUiICkgewoJCQl0aGlzLm9wdGlvbnMudmFsdWUgPSB2YWx1ZTsKCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCWlmICggdGhpcy5fdmFsdWUoKSA9PT0gdGhpcy5vcHRpb25zLm1heCApIHsKCQkJCXRoaXMuX3RyaWdnZXIoICJjb21wbGV0ZSIgKTsKCQkJfQoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCX0sCgoJX3ZhbHVlOiBmdW5jdGlvbigpIHsKCQl2YXIgdmFsID0gdGhpcy5vcHRpb25zLnZhbHVlOwoJCS8vIG5vcm1hbGl6ZSBpbnZhbGlkIHZhbHVlCgkJaWYgKCB0eXBlb2YgdmFsICE9PSAibnVtYmVyIiApIHsKCQkJdmFsID0gMDsKCQl9CgkJcmV0dXJuIE1hdGgubWluKCB0aGlzLm9wdGlvbnMubWF4LCBNYXRoLm1heCggdGhpcy5taW4sIHZhbCApICk7Cgl9LAoKCV9wZXJjZW50YWdlOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gMTAwICogdGhpcy5fdmFsdWUoKSAvIHRoaXMub3B0aW9ucy5tYXg7Cgl9LAoKCV9yZWZyZXNoVmFsdWU6IGZ1bmN0aW9uKCkgewoJCXZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKSwKCQkJcGVyY2VudGFnZSA9IHRoaXMuX3BlcmNlbnRhZ2UoKTsKCgkJaWYgKCB0aGlzLm9sZFZhbHVlICE9PSB2YWx1ZSApIHsKCQkJdGhpcy5vbGRWYWx1ZSA9IHZhbHVlOwoJCQl0aGlzLl90cmlnZ2VyKCAiY2hhbmdlIiApOwoJCX0KCgkJdGhpcy52YWx1ZURpdgoJCQkudG9nZ2xlKCB2YWx1ZSA+IHRoaXMubWluICkKCQkJLnRvZ2dsZUNsYXNzKCAidWktY29ybmVyLXJpZ2h0IiwgdmFsdWUgPT09IHRoaXMub3B0aW9ucy5tYXggKQoJCQkud2lkdGgoIHBlcmNlbnRhZ2UudG9GaXhlZCgwKSArICIlIiApOwoJCXRoaXMuZWxlbWVudC5hdHRyKCAiYXJpYS12YWx1ZW5vdyIsIHZhbHVlICk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIG51bWJlciBvZiBwYWdlcyBpbiBhIHNsaWRlcgovLyAoaG93IG1hbnkgdGltZXMgY2FuIHlvdSBwYWdlIHVwL2Rvd24gdG8gZ28gdGhyb3VnaCB0aGUgd2hvbGUgcmFuZ2UpCnZhciBudW1QYWdlcyA9IDU7CgokLndpZGdldCggInVpLnNsaWRlciIsICQudWkubW91c2UsIHsKCXZlcnNpb246ICIxLjkuMiIsCgl3aWRnZXRFdmVudFByZWZpeDogInNsaWRlIiwKCglvcHRpb25zOiB7CgkJYW5pbWF0ZTogZmFsc2UsCgkJZGlzdGFuY2U6IDAsCgkJbWF4OiAxMDAsCgkJbWluOiAwLAoJCW9yaWVudGF0aW9uOiAiaG9yaXpvbnRhbCIsCgkJcmFuZ2U6IGZhbHNlLAoJCXN0ZXA6IDEsCgkJdmFsdWU6IDAsCgkJdmFsdWVzOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciBpLCBoYW5kbGVDb3VudCwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJZXhpc3RpbmdIYW5kbGVzID0gdGhpcy5lbGVtZW50LmZpbmQoICIudWktc2xpZGVyLWhhbmRsZSIgKS5hZGRDbGFzcyggInVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIgKSwKCQkJaGFuZGxlID0gIjxhIGNsYXNzPSd1aS1zbGlkZXItaGFuZGxlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCcgaHJlZj0nIyc+PC9hPiIsCgkJCWhhbmRsZXMgPSBbXTsKCgkJdGhpcy5fa2V5U2xpZGluZyA9IGZhbHNlOwoJCXRoaXMuX21vdXNlU2xpZGluZyA9IGZhbHNlOwoJCXRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlOwoJCXRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDsKCQl0aGlzLl9kZXRlY3RPcmllbnRhdGlvbigpOwoJCXRoaXMuX21vdXNlSW5pdCgpOwoKCQl0aGlzLmVsZW1lbnQKCQkJLmFkZENsYXNzKCAidWktc2xpZGVyIiArCgkJCQkiIHVpLXNsaWRlci0iICsgdGhpcy5vcmllbnRhdGlvbiArCgkJCQkiIHVpLXdpZGdldCIgKwoJCQkJIiB1aS13aWRnZXQtY29udGVudCIgKwoJCQkJIiB1aS1jb3JuZXItYWxsIiArCgkJCQkoIG8uZGlzYWJsZWQgPyAiIHVpLXNsaWRlci1kaXNhYmxlZCB1aS1kaXNhYmxlZCIgOiAiIiApICk7CgoJCXRoaXMucmFuZ2UgPSAkKFtdKTsKCgkJaWYgKCBvLnJhbmdlICkgewoJCQlpZiAoIG8ucmFuZ2UgPT09IHRydWUgKSB7CgkJCQlpZiAoICFvLnZhbHVlcyApIHsKCQkJCQlvLnZhbHVlcyA9IFsgdGhpcy5fdmFsdWVNaW4oKSwgdGhpcy5fdmFsdWVNaW4oKSBdOwoJCQkJfQoJCQkJaWYgKCBvLnZhbHVlcy5sZW5ndGggJiYgby52YWx1ZXMubGVuZ3RoICE9PSAyICkgewoJCQkJCW8udmFsdWVzID0gWyBvLnZhbHVlc1swXSwgby52YWx1ZXNbMF0gXTsKCQkJCX0KCQkJfQoKCQkJdGhpcy5yYW5nZSA9ICQoICI8ZGl2PjwvZGl2PiIgKQoJCQkJLmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKQoJCQkJLmFkZENsYXNzKCAidWktc2xpZGVyLXJhbmdlIiArCgkJCQkvLyBub3RlOiB0aGlzIGlzbid0IHRoZSBtb3N0IGZpdHRpbmdseSBzZW1hbnRpYyBmcmFtZXdvcmsgY2xhc3MgZm9yIHRoaXMgZWxlbWVudCwKCQkJCS8vIGJ1dCB3b3JrZWQgYmVzdCB2aXN1YWxseSB3aXRoIGEgdmFyaWV0eSBvZiB0aGVtZXMKCQkJCSIgdWktd2lkZ2V0LWhlYWRlciIgKwoJCQkJKCAoIG8ucmFuZ2UgPT09ICJtaW4iIHx8IG8ucmFuZ2UgPT09ICJtYXgiICkgPyAiIHVpLXNsaWRlci1yYW5nZS0iICsgby5yYW5nZSA6ICIiICkgKTsKCQl9CgoJCWhhbmRsZUNvdW50ID0gKCBvLnZhbHVlcyAmJiBvLnZhbHVlcy5sZW5ndGggKSB8fCAxOwoKCQlmb3IgKCBpID0gZXhpc3RpbmdIYW5kbGVzLmxlbmd0aDsgaSA8IGhhbmRsZUNvdW50OyBpKysgKSB7CgkJCWhhbmRsZXMucHVzaCggaGFuZGxlICk7CgkJfQoKCQl0aGlzLmhhbmRsZXMgPSBleGlzdGluZ0hhbmRsZXMuYWRkKCAkKCBoYW5kbGVzLmpvaW4oICIiICkgKS5hcHBlbmRUbyggdGhpcy5lbGVtZW50ICkgKTsKCgkJdGhpcy5oYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoIDAgKTsKCgkJdGhpcy5oYW5kbGVzLmFkZCggdGhpcy5yYW5nZSApLmZpbHRlciggImEiICkKCQkJLmNsaWNrKGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0pCgkJCS5tb3VzZWVudGVyKGZ1bmN0aW9uKCkgewoJCQkJaWYgKCAhby5kaXNhYmxlZCApIHsKCQkJCQkkKCB0aGlzICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJCX0KCQkJfSkKCQkJLm1vdXNlbGVhdmUoZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfSkKCQkJLmZvY3VzKGZ1bmN0aW9uKCkgewoJCQkJaWYgKCAhby5kaXNhYmxlZCApIHsKCQkJCQkkKCAiLnVpLXNsaWRlciAudWktc3RhdGUtZm9jdXMiICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJCQkkKCB0aGlzICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJCX0gZWxzZSB7CgkJCQkJJCggdGhpcyApLmJsdXIoKTsKCQkJCX0KCQkJfSkKCQkJLmJsdXIoZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJfSk7CgoJCXRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKCBpICkgewoJCQkkKCB0aGlzICkuZGF0YSggInVpLXNsaWRlci1oYW5kbGUtaW5kZXgiLCBpICk7CgkJfSk7CgoJCXRoaXMuX29uKCB0aGlzLmhhbmRsZXMsIHsKCQkJa2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdmFyIGFsbG93ZWQsIGN1clZhbCwgbmV3VmFsLCBzdGVwLAoJCQkJCWluZGV4ID0gJCggZXZlbnQudGFyZ2V0ICkuZGF0YSggInVpLXNsaWRlci1oYW5kbGUtaW5kZXgiICk7CgoJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCQljYXNlICQudWkua2V5Q29kZS5IT01FOgoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLkVORDoKCQkJCQljYXNlICQudWkua2V5Q29kZS5QQUdFX1VQOgoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLlBBR0VfRE9XTjoKCQkJCQljYXNlICQudWkua2V5Q29kZS5VUDoKCQkJCQljYXNlICQudWkua2V5Q29kZS5SSUdIVDoKCQkJCQljYXNlICQudWkua2V5Q29kZS5ET1dOOgoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6CgkJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJCWlmICggIXRoaXMuX2tleVNsaWRpbmcgKSB7CgkJCQkJCQl0aGlzLl9rZXlTbGlkaW5nID0gdHJ1ZTsKCQkJCQkJCSQoIGV2ZW50LnRhcmdldCApLmFkZENsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJCQkJYWxsb3dlZCA9IHRoaXMuX3N0YXJ0KCBldmVudCwgaW5kZXggKTsKCQkJCQkJCWlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7CgkJCQkJCQkJcmV0dXJuOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCWJyZWFrOwoJCQkJfQoKCQkJCXN0ZXAgPSB0aGlzLm9wdGlvbnMuc3RlcDsKCQkJCWlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHsKCQkJCQljdXJWYWwgPSBuZXdWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggKTsKCQkJCX0gZWxzZSB7CgkJCQkJY3VyVmFsID0gbmV3VmFsID0gdGhpcy52YWx1ZSgpOwoJCQkJfQoKCQkJCXN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7CgkJCQkJY2FzZSAkLnVpLmtleUNvZGUuSE9NRToKCQkJCQkJbmV3VmFsID0gdGhpcy5fdmFsdWVNaW4oKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAkLnVpLmtleUNvZGUuRU5EOgoJCQkJCQluZXdWYWwgPSB0aGlzLl92YWx1ZU1heCgpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICQudWkua2V5Q29kZS5QQUdFX1VQOgoJCQkJCQluZXdWYWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggY3VyVmFsICsgKCAodGhpcy5fdmFsdWVNYXgoKSAtIHRoaXMuX3ZhbHVlTWluKCkpIC8gbnVtUGFnZXMgKSApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICQudWkua2V5Q29kZS5QQUdFX0RPV046CgkJCQkJCW5ld1ZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBjdXJWYWwgLSAoICh0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKSkgLyBudW1QYWdlcyApICk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLlVQOgoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLlJJR0hUOgoJCQkJCQlpZiAoIGN1clZhbCA9PT0gdGhpcy5fdmFsdWVNYXgoKSApIHsKCQkJCQkJCXJldHVybjsKCQkJCQkJfQoJCQkJCQluZXdWYWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggY3VyVmFsICsgc3RlcCApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICQudWkua2V5Q29kZS5ET1dOOgoJCQkJCWNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6CgkJCQkJCWlmICggY3VyVmFsID09PSB0aGlzLl92YWx1ZU1pbigpICkgewoJCQkJCQkJcmV0dXJuOwoJCQkJCQl9CgkJCQkJCW5ld1ZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBjdXJWYWwgLSBzdGVwICk7CgkJCQkJCWJyZWFrOwoJCQkJfQoKCQkJCXRoaXMuX3NsaWRlKCBldmVudCwgaW5kZXgsIG5ld1ZhbCApOwoJCQl9LAoJCQlrZXl1cDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdmFyIGluZGV4ID0gJCggZXZlbnQudGFyZ2V0ICkuZGF0YSggInVpLXNsaWRlci1oYW5kbGUtaW5kZXgiICk7CgoJCQkJaWYgKCB0aGlzLl9rZXlTbGlkaW5nICkgewoJCQkJCXRoaXMuX2tleVNsaWRpbmcgPSBmYWxzZTsKCQkJCQl0aGlzLl9zdG9wKCBldmVudCwgaW5kZXggKTsKCQkJCQl0aGlzLl9jaGFuZ2UoIGV2ZW50LCBpbmRleCApOwoJCQkJCSQoIGV2ZW50LnRhcmdldCApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJfQoJCQl9CgkJfSk7CgoJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoKCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmhhbmRsZXMucmVtb3ZlKCk7CgkJdGhpcy5yYW5nZS5yZW1vdmUoKTsKCgkJdGhpcy5lbGVtZW50CgkJCS5yZW1vdmVDbGFzcyggInVpLXNsaWRlciIgKwoJCQkJIiB1aS1zbGlkZXItaG9yaXpvbnRhbCIgKwoJCQkJIiB1aS1zbGlkZXItdmVydGljYWwiICsKCQkJCSIgdWktc2xpZGVyLWRpc2FibGVkIiArCgkJCQkiIHVpLXdpZGdldCIgKwoJCQkJIiB1aS13aWRnZXQtY29udGVudCIgKwoJCQkJIiB1aS1jb3JuZXItYWxsIiApOwoKCQl0aGlzLl9tb3VzZURlc3Ryb3koKTsKCX0sCgoJX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBwb3NpdGlvbiwgbm9ybVZhbHVlLCBkaXN0YW5jZSwgY2xvc2VzdEhhbmRsZSwgaW5kZXgsIGFsbG93ZWQsIG9mZnNldCwgbW91c2VPdmVySGFuZGxlLAoJCQl0aGF0ID0gdGhpcywKCQkJbyA9IHRoaXMub3B0aW9uczsKCgkJaWYgKCBvLmRpc2FibGVkICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQl0aGlzLmVsZW1lbnRTaXplID0gewoJCQl3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSwKCQkJaGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKQoJCX07CgkJdGhpcy5lbGVtZW50T2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpOwoKCQlwb3NpdGlvbiA9IHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH07CgkJbm9ybVZhbHVlID0gdGhpcy5fbm9ybVZhbHVlRnJvbU1vdXNlKCBwb3NpdGlvbiApOwoJCWRpc3RhbmNlID0gdGhpcy5fdmFsdWVNYXgoKSAtIHRoaXMuX3ZhbHVlTWluKCkgKyAxOwoJCXRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKCBpICkgewoJCQl2YXIgdGhpc0Rpc3RhbmNlID0gTWF0aC5hYnMoIG5vcm1WYWx1ZSAtIHRoYXQudmFsdWVzKGkpICk7CgkJCWlmICggZGlzdGFuY2UgPiB0aGlzRGlzdGFuY2UgKSB7CgkJCQlkaXN0YW5jZSA9IHRoaXNEaXN0YW5jZTsKCQkJCWNsb3Nlc3RIYW5kbGUgPSAkKCB0aGlzICk7CgkJCQlpbmRleCA9IGk7CgkJCX0KCQl9KTsKCgkJLy8gd29ya2Fyb3VuZCBmb3IgYnVnICMzNzM2IChpZiBib3RoIGhhbmRsZXMgb2YgYSByYW5nZSBhcmUgYXQgMCwKCQkvLyB0aGUgZmlyc3QgaXMgYWx3YXlzIHVzZWQgYXMgdGhlIG9uZSB3aXRoIGxlYXN0IGRpc3RhbmNlLAoJCS8vIGFuZCBtb3ZpbmcgaXQgaXMgb2J2aW91c2x5IHByZXZlbnRlZCBieSBwcmV2ZW50aW5nIG5lZ2F0aXZlIHJhbmdlcykKCQlpZiggby5yYW5nZSA9PT0gdHJ1ZSAmJiB0aGlzLnZhbHVlcygxKSA9PT0gby5taW4gKSB7CgkJCWluZGV4ICs9IDE7CgkJCWNsb3Nlc3RIYW5kbGUgPSAkKCB0aGlzLmhhbmRsZXNbaW5kZXhdICk7CgkJfQoKCQlhbGxvd2VkID0gdGhpcy5fc3RhcnQoIGV2ZW50LCBpbmRleCApOwoJCWlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJdGhpcy5fbW91c2VTbGlkaW5nID0gdHJ1ZTsKCgkJdGhpcy5faGFuZGxlSW5kZXggPSBpbmRleDsKCgkJY2xvc2VzdEhhbmRsZQoJCQkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJLmZvY3VzKCk7CgoJCW9mZnNldCA9IGNsb3Nlc3RIYW5kbGUub2Zmc2V0KCk7CgkJbW91c2VPdmVySGFuZGxlID0gISQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoKS5hbmRTZWxmKCkuaXMoICIudWktc2xpZGVyLWhhbmRsZSIgKTsKCQl0aGlzLl9jbGlja09mZnNldCA9IG1vdXNlT3ZlckhhbmRsZSA/IHsgbGVmdDogMCwgdG9wOiAwIH0gOiB7CgkJCWxlZnQ6IGV2ZW50LnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSAoIGNsb3Nlc3RIYW5kbGUud2lkdGgoKSAvIDIgKSwKCQkJdG9wOiBldmVudC5wYWdlWSAtIG9mZnNldC50b3AgLQoJCQkJKCBjbG9zZXN0SGFuZGxlLmhlaWdodCgpIC8gMiApIC0KCQkJCSggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCJib3JkZXJUb3BXaWR0aCIpLCAxMCApIHx8IDAgKSAtCgkJCQkoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcygiYm9yZGVyQm90dG9tV2lkdGgiKSwgMTAgKSB8fCAwKSArCgkJCQkoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcygibWFyZ2luVG9wIiksIDEwICkgfHwgMCkKCQl9OwoKCQlpZiAoICF0aGlzLmhhbmRsZXMuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKSApIHsKCQkJdGhpcy5fc2xpZGUoIGV2ZW50LCBpbmRleCwgbm9ybVZhbHVlICk7CgkJfQoJCXRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlOwoJCXJldHVybiB0cnVlOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZURyYWc6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgcG9zaXRpb24gPSB7IHg6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWSB9LAoJCQlub3JtVmFsdWUgPSB0aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoIHBvc2l0aW9uICk7CgoJCXRoaXMuX3NsaWRlKCBldmVudCwgdGhpcy5faGFuZGxlSW5kZXgsIG5vcm1WYWx1ZSApOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9tb3VzZVN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLmhhbmRsZXMucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgkJdGhpcy5fbW91c2VTbGlkaW5nID0gZmFsc2U7CgoJCXRoaXMuX3N0b3AoIGV2ZW50LCB0aGlzLl9oYW5kbGVJbmRleCApOwoJCXRoaXMuX2NoYW5nZSggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4ICk7CgoJCXRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDsKCQl0aGlzLl9jbGlja09mZnNldCA9IG51bGw7CgkJdGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9kZXRlY3RPcmllbnRhdGlvbjogZnVuY3Rpb24oKSB7CgkJdGhpcy5vcmllbnRhdGlvbiA9ICggdGhpcy5vcHRpb25zLm9yaWVudGF0aW9uID09PSAidmVydGljYWwiICkgPyAidmVydGljYWwiIDogImhvcml6b250YWwiOwoJfSwKCglfbm9ybVZhbHVlRnJvbU1vdXNlOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7CgkJdmFyIHBpeGVsVG90YWwsCgkJCXBpeGVsTW91c2UsCgkJCXBlcmNlbnRNb3VzZSwKCQkJdmFsdWVUb3RhbCwKCQkJdmFsdWVNb3VzZTsKCgkJaWYgKCB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgKSB7CgkJCXBpeGVsVG90YWwgPSB0aGlzLmVsZW1lbnRTaXplLndpZHRoOwoJCQlwaXhlbE1vdXNlID0gcG9zaXRpb24ueCAtIHRoaXMuZWxlbWVudE9mZnNldC5sZWZ0IC0gKCB0aGlzLl9jbGlja09mZnNldCA/IHRoaXMuX2NsaWNrT2Zmc2V0LmxlZnQgOiAwICk7CgkJfSBlbHNlIHsKCQkJcGl4ZWxUb3RhbCA9IHRoaXMuZWxlbWVudFNpemUuaGVpZ2h0OwoJCQlwaXhlbE1vdXNlID0gcG9zaXRpb24ueSAtIHRoaXMuZWxlbWVudE9mZnNldC50b3AgLSAoIHRoaXMuX2NsaWNrT2Zmc2V0ID8gdGhpcy5fY2xpY2tPZmZzZXQudG9wIDogMCApOwoJCX0KCgkJcGVyY2VudE1vdXNlID0gKCBwaXhlbE1vdXNlIC8gcGl4ZWxUb3RhbCApOwoJCWlmICggcGVyY2VudE1vdXNlID4gMSApIHsKCQkJcGVyY2VudE1vdXNlID0gMTsKCQl9CgkJaWYgKCBwZXJjZW50TW91c2UgPCAwICkgewoJCQlwZXJjZW50TW91c2UgPSAwOwoJCX0KCQlpZiAoIHRoaXMub3JpZW50YXRpb24gPT09ICJ2ZXJ0aWNhbCIgKSB7CgkJCXBlcmNlbnRNb3VzZSA9IDEgLSBwZXJjZW50TW91c2U7CgkJfQoKCQl2YWx1ZVRvdGFsID0gdGhpcy5fdmFsdWVNYXgoKSAtIHRoaXMuX3ZhbHVlTWluKCk7CgkJdmFsdWVNb3VzZSA9IHRoaXMuX3ZhbHVlTWluKCkgKyBwZXJjZW50TW91c2UgKiB2YWx1ZVRvdGFsOwoKCQlyZXR1cm4gdGhpcy5fdHJpbUFsaWduVmFsdWUoIHZhbHVlTW91c2UgKTsKCX0sCgoJX3N0YXJ0OiBmdW5jdGlvbiggZXZlbnQsIGluZGV4ICkgewoJCXZhciB1aUhhc2ggPSB7CgkJCWhhbmRsZTogdGhpcy5oYW5kbGVzWyBpbmRleCBdLAoJCQl2YWx1ZTogdGhpcy52YWx1ZSgpCgkJfTsKCQlpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7CgkJCXVpSGFzaC52YWx1ZSA9IHRoaXMudmFsdWVzKCBpbmRleCApOwoJCQl1aUhhc2gudmFsdWVzID0gdGhpcy52YWx1ZXMoKTsKCQl9CgkJcmV0dXJuIHRoaXMuX3RyaWdnZXIoICJzdGFydCIsIGV2ZW50LCB1aUhhc2ggKTsKCX0sCgoJX3NsaWRlOiBmdW5jdGlvbiggZXZlbnQsIGluZGV4LCBuZXdWYWwgKSB7CgkJdmFyIG90aGVyVmFsLAoJCQluZXdWYWx1ZXMsCgkJCWFsbG93ZWQ7CgoJCWlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHsKCQkJb3RoZXJWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggPyAwIDogMSApOwoKCQkJaWYgKCAoIHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoID09PSAyICYmIHRoaXMub3B0aW9ucy5yYW5nZSA9PT0gdHJ1ZSApICYmCgkJCQkJKCAoIGluZGV4ID09PSAwICYmIG5ld1ZhbCA+IG90aGVyVmFsKSB8fCAoIGluZGV4ID09PSAxICYmIG5ld1ZhbCA8IG90aGVyVmFsICkgKQoJCQkJKSB7CgkJCQluZXdWYWwgPSBvdGhlclZhbDsKCQkJfQoKCQkJaWYgKCBuZXdWYWwgIT09IHRoaXMudmFsdWVzKCBpbmRleCApICkgewoJCQkJbmV3VmFsdWVzID0gdGhpcy52YWx1ZXMoKTsKCQkJCW5ld1ZhbHVlc1sgaW5kZXggXSA9IG5ld1ZhbDsKCQkJCS8vIEEgc2xpZGUgY2FuIGJlIGNhbmNlbGVkIGJ5IHJldHVybmluZyBmYWxzZSBmcm9tIHRoZSBzbGlkZSBjYWxsYmFjawoJCQkJYWxsb3dlZCA9IHRoaXMuX3RyaWdnZXIoICJzbGlkZSIsIGV2ZW50LCB7CgkJCQkJaGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sCgkJCQkJdmFsdWU6IG5ld1ZhbCwKCQkJCQl2YWx1ZXM6IG5ld1ZhbHVlcwoJCQkJfSApOwoJCQkJb3RoZXJWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggPyAwIDogMSApOwoJCQkJaWYgKCBhbGxvd2VkICE9PSBmYWxzZSApIHsKCQkJCQl0aGlzLnZhbHVlcyggaW5kZXgsIG5ld1ZhbCwgdHJ1ZSApOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgKCBuZXdWYWwgIT09IHRoaXMudmFsdWUoKSApIHsKCQkJCS8vIEEgc2xpZGUgY2FuIGJlIGNhbmNlbGVkIGJ5IHJldHVybmluZyBmYWxzZSBmcm9tIHRoZSBzbGlkZSBjYWxsYmFjawoJCQkJYWxsb3dlZCA9IHRoaXMuX3RyaWdnZXIoICJzbGlkZSIsIGV2ZW50LCB7CgkJCQkJaGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sCgkJCQkJdmFsdWU6IG5ld1ZhbAoJCQkJfSApOwoJCQkJaWYgKCBhbGxvd2VkICE9PSBmYWxzZSApIHsKCQkJCQl0aGlzLnZhbHVlKCBuZXdWYWwgKTsKCQkJCX0KCQkJfQoJCX0KCX0sCgoJX3N0b3A6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXggKSB7CgkJdmFyIHVpSGFzaCA9IHsKCQkJaGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sCgkJCXZhbHVlOiB0aGlzLnZhbHVlKCkKCQl9OwoJCWlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHsKCQkJdWlIYXNoLnZhbHVlID0gdGhpcy52YWx1ZXMoIGluZGV4ICk7CgkJCXVpSGFzaC52YWx1ZXMgPSB0aGlzLnZhbHVlcygpOwoJCX0KCgkJdGhpcy5fdHJpZ2dlciggInN0b3AiLCBldmVudCwgdWlIYXNoICk7Cgl9LAoKCV9jaGFuZ2U6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXggKSB7CgkJaWYgKCAhdGhpcy5fa2V5U2xpZGluZyAmJiAhdGhpcy5fbW91c2VTbGlkaW5nICkgewoJCQl2YXIgdWlIYXNoID0gewoJCQkJaGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sCgkJCQl2YWx1ZTogdGhpcy52YWx1ZSgpCgkJCX07CgkJCWlmICggdGhpcy5vcHRpb25zLnZhbHVlcyAmJiB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCApIHsKCQkJCXVpSGFzaC52YWx1ZSA9IHRoaXMudmFsdWVzKCBpbmRleCApOwoJCQkJdWlIYXNoLnZhbHVlcyA9IHRoaXMudmFsdWVzKCk7CgkJCX0KCgkJCXRoaXMuX3RyaWdnZXIoICJjaGFuZ2UiLCBldmVudCwgdWlIYXNoICk7CgkJfQoJfSwKCgl2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbHVlICkgewoJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJdGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIG5ld1ZhbHVlICk7CgkJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJCQl0aGlzLl9jaGFuZ2UoIG51bGwsIDAgKTsKCQkJcmV0dXJuOwoJCX0KCgkJcmV0dXJuIHRoaXMuX3ZhbHVlKCk7Cgl9LAoKCXZhbHVlczogZnVuY3Rpb24oIGluZGV4LCBuZXdWYWx1ZSApIHsKCQl2YXIgdmFscywKCQkJbmV3VmFsdWVzLAoJCQlpOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkgewoJCQl0aGlzLm9wdGlvbnMudmFsdWVzWyBpbmRleCBdID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIG5ld1ZhbHVlICk7CgkJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJCQl0aGlzLl9jaGFuZ2UoIG51bGwsIGluZGV4ICk7CgkJCXJldHVybjsKCQl9CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJaWYgKCAkLmlzQXJyYXkoIGFyZ3VtZW50c1sgMCBdICkgKSB7CgkJCQl2YWxzID0gdGhpcy5vcHRpb25zLnZhbHVlczsKCQkJCW5ld1ZhbHVlcyA9IGFyZ3VtZW50c1sgMCBdOwoJCQkJZm9yICggaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSArPSAxICkgewoJCQkJCXZhbHNbIGkgXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBuZXdWYWx1ZXNbIGkgXSApOwoJCQkJCXRoaXMuX2NoYW5nZSggbnVsbCwgaSApOwoJCQkJfQoJCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCX0gZWxzZSB7CgkJCQlpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7CgkJCQkJcmV0dXJuIHRoaXMuX3ZhbHVlcyggaW5kZXggKTsKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuIHRoaXMudmFsdWUoKTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCXJldHVybiB0aGlzLl92YWx1ZXMoKTsKCQl9Cgl9LAoKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXZhciBpLAoJCQl2YWxzTGVuZ3RoID0gMDsKCgkJaWYgKCAkLmlzQXJyYXkoIHRoaXMub3B0aW9ucy52YWx1ZXMgKSApIHsKCQkJdmFsc0xlbmd0aCA9IHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoOwoJCX0KCgkJJC5XaWRnZXQucHJvdG90eXBlLl9zZXRPcHRpb24uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoKCQlzd2l0Y2ggKCBrZXkgKSB7CgkJCWNhc2UgImRpc2FibGVkIjoKCQkJCWlmICggdmFsdWUgKSB7CgkJCQkJdGhpcy5oYW5kbGVzLmZpbHRlciggIi51aS1zdGF0ZS1mb2N1cyIgKS5ibHVyKCk7CgkJCQkJdGhpcy5oYW5kbGVzLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtaG92ZXIiICk7CgkJCQkJdGhpcy5oYW5kbGVzLnByb3AoICJkaXNhYmxlZCIsIHRydWUgKTsKCQkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhpcy5oYW5kbGVzLnByb3AoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJCQkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCAidWktZGlzYWJsZWQiICk7CgkJCQl9CgkJCQlicmVhazsKCQkJY2FzZSAib3JpZW50YXRpb24iOgoJCQkJdGhpcy5fZGV0ZWN0T3JpZW50YXRpb24oKTsKCQkJCXRoaXMuZWxlbWVudAoJCQkJCS5yZW1vdmVDbGFzcyggInVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXNsaWRlci12ZXJ0aWNhbCIgKQoJCQkJCS5hZGRDbGFzcyggInVpLXNsaWRlci0iICsgdGhpcy5vcmllbnRhdGlvbiApOwoJCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCQlicmVhazsKCQkJY2FzZSAidmFsdWUiOgoJCQkJdGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7CgkJCQl0aGlzLl9yZWZyZXNoVmFsdWUoKTsKCQkJCXRoaXMuX2NoYW5nZSggbnVsbCwgMCApOwoJCQkJdGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlOwoJCQkJYnJlYWs7CgkJCWNhc2UgInZhbHVlcyI6CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gdHJ1ZTsKCQkJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJCQkJZm9yICggaSA9IDA7IGkgPCB2YWxzTGVuZ3RoOyBpICs9IDEgKSB7CgkJCQkJdGhpcy5fY2hhbmdlKCBudWxsLCBpICk7CgkJCQl9CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQkJY2FzZSAibWluIjoKCQkJY2FzZSAibWF4IjoKCQkJCXRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlOwoJCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQl9Cgl9LAoKCS8vaW50ZXJuYWwgdmFsdWUgZ2V0dGVyCgkvLyBfdmFsdWUoKSByZXR1cm5zIHZhbHVlIHRyaW1tZWQgYnkgbWluIGFuZCBtYXgsIGFsaWduZWQgYnkgc3RlcAoJX3ZhbHVlOiBmdW5jdGlvbigpIHsKCQl2YXIgdmFsID0gdGhpcy5vcHRpb25zLnZhbHVlOwoJCXZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCB2YWwgKTsKCgkJcmV0dXJuIHZhbDsKCX0sCgoJLy9pbnRlcm5hbCB2YWx1ZXMgZ2V0dGVyCgkvLyBfdmFsdWVzKCkgcmV0dXJucyBhcnJheSBvZiB2YWx1ZXMgdHJpbW1lZCBieSBtaW4gYW5kIG1heCwgYWxpZ25lZCBieSBzdGVwCgkvLyBfdmFsdWVzKCBpbmRleCApIHJldHVybnMgc2luZ2xlIHZhbHVlIHRyaW1tZWQgYnkgbWluIGFuZCBtYXgsIGFsaWduZWQgYnkgc3RlcAoJX3ZhbHVlczogZnVuY3Rpb24oIGluZGV4ICkgewoJCXZhciB2YWwsCgkJCXZhbHMsCgkJCWk7CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJdmFsID0gdGhpcy5vcHRpb25zLnZhbHVlc1sgaW5kZXggXTsKCQkJdmFsID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIHZhbCApOwoKCQkJcmV0dXJuIHZhbDsKCQl9IGVsc2UgewoJCQkvLyAuc2xpY2UoKSBjcmVhdGVzIGEgY29weSBvZiB0aGUgYXJyYXkKCQkJLy8gdGhpcyBjb3B5IGdldHMgdHJpbW1lZCBieSBtaW4gYW5kIG1heCBhbmQgdGhlbiByZXR1cm5lZAoJCQl2YWxzID0gdGhpcy5vcHRpb25zLnZhbHVlcy5zbGljZSgpOwoJCQlmb3IgKCBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpKz0gMSkgewoJCQkJdmFsc1sgaSBdID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIHZhbHNbIGkgXSApOwoJCQl9CgoJCQlyZXR1cm4gdmFsczsKCQl9Cgl9LAoKCS8vIHJldHVybnMgdGhlIHN0ZXAtYWxpZ25lZCB2YWx1ZSB0aGF0IHZhbCBpcyBjbG9zZXN0IHRvLCBiZXR3ZWVuIChpbmNsdXNpdmUpIG1pbiBhbmQgbWF4CglfdHJpbUFsaWduVmFsdWU6IGZ1bmN0aW9uKCB2YWwgKSB7CgkJaWYgKCB2YWwgPD0gdGhpcy5fdmFsdWVNaW4oKSApIHsKCQkJcmV0dXJuIHRoaXMuX3ZhbHVlTWluKCk7CgkJfQoJCWlmICggdmFsID49IHRoaXMuX3ZhbHVlTWF4KCkgKSB7CgkJCXJldHVybiB0aGlzLl92YWx1ZU1heCgpOwoJCX0KCQl2YXIgc3RlcCA9ICggdGhpcy5vcHRpb25zLnN0ZXAgPiAwICkgPyB0aGlzLm9wdGlvbnMuc3RlcCA6IDEsCgkJCXZhbE1vZFN0ZXAgPSAodmFsIC0gdGhpcy5fdmFsdWVNaW4oKSkgJSBzdGVwLAoJCQlhbGlnblZhbHVlID0gdmFsIC0gdmFsTW9kU3RlcDsKCgkJaWYgKCBNYXRoLmFicyh2YWxNb2RTdGVwKSAqIDIgPj0gc3RlcCApIHsKCQkJYWxpZ25WYWx1ZSArPSAoIHZhbE1vZFN0ZXAgPiAwICkgPyBzdGVwIDogKCAtc3RlcCApOwoJCX0KCgkJLy8gU2luY2UgSmF2YVNjcmlwdCBoYXMgcHJvYmxlbXMgd2l0aCBsYXJnZSBmbG9hdHMsIHJvdW5kCgkJLy8gdGhlIGZpbmFsIHZhbHVlIHRvIDUgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50IChzZWUgIzQxMjQpCgkJcmV0dXJuIHBhcnNlRmxvYXQoIGFsaWduVmFsdWUudG9GaXhlZCg1KSApOwoJfSwKCglfdmFsdWVNaW46IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLm9wdGlvbnMubWluOwoJfSwKCglfdmFsdWVNYXg6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLm9wdGlvbnMubWF4OwoJfSwKCglfcmVmcmVzaFZhbHVlOiBmdW5jdGlvbigpIHsKCQl2YXIgbGFzdFZhbFBlcmNlbnQsIHZhbFBlcmNlbnQsIHZhbHVlLCB2YWx1ZU1pbiwgdmFsdWVNYXgsCgkJCW9SYW5nZSA9IHRoaXMub3B0aW9ucy5yYW5nZSwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJdGhhdCA9IHRoaXMsCgkJCWFuaW1hdGUgPSAoICF0aGlzLl9hbmltYXRlT2ZmICkgPyBvLmFuaW1hdGUgOiBmYWxzZSwKCQkJX3NldCA9IHt9OwoKCQlpZiAoIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggKSB7CgkJCXRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKCBpICkgewoJCQkJdmFsUGVyY2VudCA9ICggdGhhdC52YWx1ZXMoaSkgLSB0aGF0Ll92YWx1ZU1pbigpICkgLyAoIHRoYXQuX3ZhbHVlTWF4KCkgLSB0aGF0Ll92YWx1ZU1pbigpICkgKiAxMDA7CgkJCQlfc2V0WyB0aGF0Lm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgPyAibGVmdCIgOiAiYm90dG9tIiBdID0gdmFsUGVyY2VudCArICIlIjsKCQkJCSQoIHRoaXMgKS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCBfc2V0LCBvLmFuaW1hdGUgKTsKCQkJCWlmICggdGhhdC5vcHRpb25zLnJhbmdlID09PSB0cnVlICkgewoJCQkJCWlmICggdGhhdC5vcmllbnRhdGlvbiA9PT0gImhvcml6b250YWwiICkgewoJCQkJCQlpZiAoIGkgPT09IDAgKSB7CgkJCQkJCQl0aGF0LnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/ICJhbmltYXRlIiA6ICJjc3MiIF0oIHsgbGVmdDogdmFsUGVyY2VudCArICIlIiB9LCBvLmFuaW1hdGUgKTsKCQkJCQkJfQoJCQkJCQlpZiAoIGkgPT09IDEgKSB7CgkJCQkJCQl0aGF0LnJhbmdlWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggeyB3aWR0aDogKCB2YWxQZXJjZW50IC0gbGFzdFZhbFBlcmNlbnQgKSArICIlIiB9LCB7IHF1ZXVlOiBmYWxzZSwgZHVyYXRpb246IG8uYW5pbWF0ZSB9ICk7CgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlpZiAoIGkgPT09IDAgKSB7CgkJCQkJCQl0aGF0LnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/ICJhbmltYXRlIiA6ICJjc3MiIF0oIHsgYm90dG9tOiAoIHZhbFBlcmNlbnQgKSArICIlIiB9LCBvLmFuaW1hdGUgKTsKCQkJCQkJfQoJCQkJCQlpZiAoIGkgPT09IDEgKSB7CgkJCQkJCQl0aGF0LnJhbmdlWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggeyBoZWlnaHQ6ICggdmFsUGVyY2VudCAtIGxhc3RWYWxQZXJjZW50ICkgKyAiJSIgfSwgeyBxdWV1ZTogZmFsc2UsIGR1cmF0aW9uOiBvLmFuaW1hdGUgfSApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQkJbGFzdFZhbFBlcmNlbnQgPSB2YWxQZXJjZW50OwoJCQl9KTsKCQl9IGVsc2UgewoJCQl2YWx1ZSA9IHRoaXMudmFsdWUoKTsKCQkJdmFsdWVNaW4gPSB0aGlzLl92YWx1ZU1pbigpOwoJCQl2YWx1ZU1heCA9IHRoaXMuX3ZhbHVlTWF4KCk7CgkJCXZhbFBlcmNlbnQgPSAoIHZhbHVlTWF4ICE9PSB2YWx1ZU1pbiApID8KCQkJCQkoIHZhbHVlIC0gdmFsdWVNaW4gKSAvICggdmFsdWVNYXggLSB2YWx1ZU1pbiApICogMTAwIDoKCQkJCQkwOwoJCQlfc2V0WyB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgPyAibGVmdCIgOiAiYm90dG9tIiBdID0gdmFsUGVyY2VudCArICIlIjsKCQkJdGhpcy5oYW5kbGUuc3RvcCggMSwgMSApWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggX3NldCwgby5hbmltYXRlICk7CgoJCQlpZiAoIG9SYW5nZSA9PT0gIm1pbiIgJiYgdGhpcy5vcmllbnRhdGlvbiA9PT0gImhvcml6b250YWwiICkgewoJCQkJdGhpcy5yYW5nZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCB7IHdpZHRoOiB2YWxQZXJjZW50ICsgIiUiIH0sIG8uYW5pbWF0ZSApOwoJCQl9CgkJCWlmICggb1JhbmdlID09PSAibWF4IiAmJiB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgKSB7CgkJCQl0aGlzLnJhbmdlWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggeyB3aWR0aDogKCAxMDAgLSB2YWxQZXJjZW50ICkgKyAiJSIgfSwgeyBxdWV1ZTogZmFsc2UsIGR1cmF0aW9uOiBvLmFuaW1hdGUgfSApOwoJCQl9CgkJCWlmICggb1JhbmdlID09PSAibWluIiAmJiB0aGlzLm9yaWVudGF0aW9uID09PSAidmVydGljYWwiICkgewoJCQkJdGhpcy5yYW5nZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCB7IGhlaWdodDogdmFsUGVyY2VudCArICIlIiB9LCBvLmFuaW1hdGUgKTsKCQkJfQoJCQlpZiAoIG9SYW5nZSA9PT0gIm1heCIgJiYgdGhpcy5vcmllbnRhdGlvbiA9PT0gInZlcnRpY2FsIiApIHsKCQkJCXRoaXMucmFuZ2VbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCB7IGhlaWdodDogKCAxMDAgLSB2YWxQZXJjZW50ICkgKyAiJSIgfSwgeyBxdWV1ZTogZmFsc2UsIGR1cmF0aW9uOiBvLmFuaW1hdGUgfSApOwoJCQl9CgkJfQoJfQoKfSk7Cgp9KGpRdWVyeSkpOwooZnVuY3Rpb24oICQgKSB7CgpmdW5jdGlvbiBtb2RpZmllciggZm4gKSB7CglyZXR1cm4gZnVuY3Rpb24oKSB7CgkJdmFyIHByZXZpb3VzID0gdGhpcy5lbGVtZW50LnZhbCgpOwoJCWZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl0aGlzLl9yZWZyZXNoKCk7CgkJaWYgKCBwcmV2aW91cyAhPT0gdGhpcy5lbGVtZW50LnZhbCgpICkgewoJCQl0aGlzLl90cmlnZ2VyKCAiY2hhbmdlIiApOwoJCX0KCX07Cn0KCiQud2lkZ2V0KCAidWkuc3Bpbm5lciIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglkZWZhdWx0RWxlbWVudDogIjxpbnB1dD4iLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICJzcGluIiwKCW9wdGlvbnM6IHsKCQljdWx0dXJlOiBudWxsLAoJCWljb25zOiB7CgkJCWRvd246ICJ1aS1pY29uLXRyaWFuZ2xlLTEtcyIsCgkJCXVwOiAidWktaWNvbi10cmlhbmdsZS0xLW4iCgkJfSwKCQlpbmNyZW1lbnRhbDogdHJ1ZSwKCQltYXg6IG51bGwsCgkJbWluOiBudWxsLAoJCW51bWJlckZvcm1hdDogbnVsbCwKCQlwYWdlOiAxMCwKCQlzdGVwOiAxLAoKCQljaGFuZ2U6IG51bGwsCgkJc3BpbjogbnVsbCwKCQlzdGFydDogbnVsbCwKCQlzdG9wOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCS8vIGhhbmRsZSBzdHJpbmcgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBwYXJzZWQKCQl0aGlzLl9zZXRPcHRpb24oICJtYXgiLCB0aGlzLm9wdGlvbnMubWF4ICk7CgkJdGhpcy5fc2V0T3B0aW9uKCAibWluIiwgdGhpcy5vcHRpb25zLm1pbiApOwoJCXRoaXMuX3NldE9wdGlvbiggInN0ZXAiLCB0aGlzLm9wdGlvbnMuc3RlcCApOwoKCQkvLyBmb3JtYXQgdGhlIHZhbHVlLCBidXQgZG9uJ3QgY29uc3RyYWluCgkJdGhpcy5fdmFsdWUoIHRoaXMuZWxlbWVudC52YWwoKSwgdHJ1ZSApOwoKCQl0aGlzLl9kcmF3KCk7CgkJdGhpcy5fb24oIHRoaXMuX2V2ZW50cyApOwoJCXRoaXMuX3JlZnJlc2goKTsKCgkJLy8gdHVybmluZyBvZmYgYXV0b2NvbXBsZXRlIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gcmVtZW1iZXJpbmcgdGhlCgkJLy8gdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRocm91Z2ggaGlzdG9yeSwgc28gd2UgcmUtZW5hYmxlIGF1dG9jb21wbGV0ZQoJCS8vIGlmIHRoZSBwYWdlIGlzIHVubG9hZGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRlc3Ryb3llZC4gIzc3OTAKCQl0aGlzLl9vbiggdGhpcy53aW5kb3csIHsKCQkJYmVmb3JldW5sb2FkOiBmdW5jdGlvbigpIHsKCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCAiYXV0b2NvbXBsZXRlIiApOwoJCQl9CgkJfSk7Cgl9LAoKCV9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHt9LAoJCQllbGVtZW50ID0gdGhpcy5lbGVtZW50OwoKCQkkLmVhY2goIFsgIm1pbiIsICJtYXgiLCAic3RlcCIgXSwgZnVuY3Rpb24oIGksIG9wdGlvbiApIHsKCQkJdmFyIHZhbHVlID0gZWxlbWVudC5hdHRyKCBvcHRpb24gKTsKCQkJaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmxlbmd0aCApIHsKCQkJCW9wdGlvbnNbIG9wdGlvbiBdID0gdmFsdWU7CgkJCX0KCQl9KTsKCgkJcmV0dXJuIG9wdGlvbnM7Cgl9LAoKCV9ldmVudHM6IHsKCQlrZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCWlmICggdGhpcy5fc3RhcnQoIGV2ZW50ICkgJiYgdGhpcy5fa2V5ZG93biggZXZlbnQgKSApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0KCQl9LAoJCWtleXVwOiAiX3N0b3AiLAoJCWZvY3VzOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5wcmV2aW91cyA9IHRoaXMuZWxlbWVudC52YWwoKTsKCQl9LAoJCWJsdXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJaWYgKCB0aGlzLmNhbmNlbEJsdXIgKSB7CgkJCQlkZWxldGUgdGhpcy5jYW5jZWxCbHVyOwoJCQkJcmV0dXJuOwoJCQl9CgoJCQl0aGlzLl9yZWZyZXNoKCk7CgkJCWlmICggdGhpcy5wcmV2aW91cyAhPT0gdGhpcy5lbGVtZW50LnZhbCgpICkgewoJCQkJdGhpcy5fdHJpZ2dlciggImNoYW5nZSIsIGV2ZW50ICk7CgkJCX0KCQl9LAoJCW1vdXNld2hlZWw6IGZ1bmN0aW9uKCBldmVudCwgZGVsdGEgKSB7CgkJCWlmICggIWRlbHRhICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmICggIXRoaXMuc3Bpbm5pbmcgJiYgIXRoaXMuX3N0YXJ0KCBldmVudCApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQl0aGlzLl9zcGluKCAoZGVsdGEgPiAwID8gMSA6IC0xKSAqIHRoaXMub3B0aW9ucy5zdGVwLCBldmVudCApOwoJCQljbGVhclRpbWVvdXQoIHRoaXMubW91c2V3aGVlbFRpbWVyICk7CgkJCXRoaXMubW91c2V3aGVlbFRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQlpZiAoIHRoaXMuc3Bpbm5pbmcgKSB7CgkJCQkJdGhpcy5fc3RvcCggZXZlbnQgKTsKCQkJCX0KCQkJfSwgMTAwICk7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfSwKCQkibW91c2Vkb3duIC51aS1zcGlubmVyLWJ1dHRvbiI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyIHByZXZpb3VzOwoKCQkJLy8gV2UgbmV2ZXIgd2FudCB0aGUgYnV0dG9ucyB0byBoYXZlIGZvY3VzOyB3aGVuZXZlciB0aGUgdXNlciBpcwoJCQkvLyBpbnRlcmFjdGluZyB3aXRoIHRoZSBzcGlubmVyLCB0aGUgZm9jdXMgc2hvdWxkIGJlIG9uIHRoZSBpbnB1dC4KCQkJLy8gSWYgdGhlIGlucHV0IGlzIGZvY3VzZWQgdGhlbiB0aGlzLnByZXZpb3VzIGlzIHByb3Blcmx5IHNldCBmcm9tCgkJCS8vIHdoZW4gdGhlIGlucHV0IGZpcnN0IHJlY2VpdmVkIGZvY3VzLiBJZiB0aGUgaW5wdXQgaXMgbm90IGZvY3VzZWQKCQkJLy8gdGhlbiB3ZSBuZWVkIHRvIHNldCB0aGlzLnByZXZpb3VzIGJhc2VkIG9uIHRoZSB2YWx1ZSBiZWZvcmUgc3Bpbm5pbmcuCgkJCXByZXZpb3VzID0gdGhpcy5lbGVtZW50WzBdID09PSB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgPwoJCQkJdGhpcy5wcmV2aW91cyA6IHRoaXMuZWxlbWVudC52YWwoKTsKCQkJZnVuY3Rpb24gY2hlY2tGb2N1cygpIHsKCQkJCXZhciBpc0FjdGl2ZSA9IHRoaXMuZWxlbWVudFswXSA9PT0gdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50OwoJCQkJaWYgKCAhaXNBY3RpdmUgKSB7CgkJCQkJdGhpcy5lbGVtZW50LmZvY3VzKCk7CgkJCQkJdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzOwoJCQkJCS8vIHN1cHBvcnQ6IElFCgkJCQkJLy8gSUUgc2V0cyBmb2N1cyBhc3luY2hyb25vdXNseSwgc28gd2UgbmVlZCB0byBjaGVjayBpZiBmb2N1cwoJCQkJCS8vIG1vdmVkIG9mZiBvZiB0aGUgaW5wdXQgYmVjYXVzZSB0aGUgdXNlciBjbGlja2VkIG9uIHRoZSBidXR0b24uCgkJCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQkJCXRoaXMucHJldmlvdXMgPSBwcmV2aW91czsKCQkJCQl9KTsKCQkJCX0KCQkJfQoKCQkJLy8gZW5zdXJlIGZvY3VzIGlzIG9uIChvciBzdGF5cyBvbikgdGhlIHRleHQgZmllbGQKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJY2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7CgoJCQkvLyBzdXBwb3J0OiBJRQoJCQkvLyBJRSBkb2Vzbid0IHByZXZlbnQgbW92aW5nIGZvY3VzIGV2ZW4gd2l0aCBldmVudC5wcmV2ZW50RGVmYXVsdCgpCgkJCS8vIHNvIHdlIHNldCBhIGZsYWcgdG8ga25vdyB3aGVuIHdlIHNob3VsZCBpZ25vcmUgdGhlIGJsdXIgZXZlbnQKCQkJLy8gYW5kIGNoZWNrIChhZ2FpbikgaWYgZm9jdXMgbW92ZWQgb2ZmIG9mIHRoZSBpbnB1dC4KCQkJdGhpcy5jYW5jZWxCbHVyID0gdHJ1ZTsKCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQlkZWxldGUgdGhpcy5jYW5jZWxCbHVyOwoJCQkJY2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7CgkJCX0pOwoKCQkJaWYgKCB0aGlzLl9zdGFydCggZXZlbnQgKSA9PT0gZmFsc2UgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgJCggZXZlbnQuY3VycmVudFRhcmdldCApLmhhc0NsYXNzKCAidWktc3Bpbm5lci11cCIgKSA/IDEgOiAtMSwgZXZlbnQgKTsKCQl9LAoJCSJtb3VzZXVwIC51aS1zcGlubmVyLWJ1dHRvbiI6ICJfc3RvcCIsCgkJIm1vdXNlZW50ZXIgLnVpLXNwaW5uZXItYnV0dG9uIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkvLyBidXR0b24gd2lsbCBhZGQgdWktc3RhdGUtYWN0aXZlIGlmIG1vdXNlIHdhcyBkb3duIHdoaWxlIG1vdXNlbGVhdmUgYW5kIGtlcHQgZG93bgoJCQlpZiAoICEkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggdGhpcy5fc3RhcnQoIGV2ZW50ICkgPT09IGZhbHNlICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgJCggZXZlbnQuY3VycmVudFRhcmdldCApLmhhc0NsYXNzKCAidWktc3Bpbm5lci11cCIgKSA/IDEgOiAtMSwgZXZlbnQgKTsKCQl9LAoJCS8vIFRPRE86IGRvIHdlIHJlYWxseSB3YW50IHRvIGNvbnNpZGVyIHRoaXMgYSBzdG9wPwoJCS8vIHNob3VsZG4ndCB3ZSBqdXN0IHN0b3AgdGhlIHJlcGVhdGVyIGFuZCB3YWl0IHVudGlsIG1vdXNldXAgYmVmb3JlCgkJLy8gd2UgdHJpZ2dlciB0aGUgc3RvcCBldmVudD8KCQkibW91c2VsZWF2ZSAudWktc3Bpbm5lci1idXR0b24iOiAiX3N0b3AiCgl9LAoKCV9kcmF3OiBmdW5jdGlvbigpIHsKCQl2YXIgdWlTcGlubmVyID0gdGhpcy51aVNwaW5uZXIgPSB0aGlzLmVsZW1lbnQKCQkJLmFkZENsYXNzKCAidWktc3Bpbm5lci1pbnB1dCIgKQoJCQkuYXR0ciggImF1dG9jb21wbGV0ZSIsICJvZmYiICkKCQkJLndyYXAoIHRoaXMuX3VpU3Bpbm5lckh0bWwoKSApCgkJCS5wYXJlbnQoKQoJCQkJLy8gYWRkIGJ1dHRvbnMKCQkJCS5hcHBlbmQoIHRoaXMuX2J1dHRvbkh0bWwoKSApOwoKCQl0aGlzLmVsZW1lbnQuYXR0ciggInJvbGUiLCAic3BpbmJ1dHRvbiIgKTsKCgkJLy8gYnV0dG9uIGJpbmRpbmdzCgkJdGhpcy5idXR0b25zID0gdWlTcGlubmVyLmZpbmQoICIudWktc3Bpbm5lci1idXR0b24iICkKCQkJLmF0dHIoICJ0YWJJbmRleCIsIC0xICkKCQkJLmJ1dHRvbigpCgkJCS5yZW1vdmVDbGFzcyggInVpLWNvcm5lci1hbGwiICk7CgoJCS8vIElFIDYgZG9lc24ndCB1bmRlcnN0YW5kIGhlaWdodDogNTAlIGZvciB0aGUgYnV0dG9ucwoJCS8vIHVubGVzcyB0aGUgd3JhcHBlciBoYXMgYW4gZXhwbGljaXQgaGVpZ2h0CgkJaWYgKCB0aGlzLmJ1dHRvbnMuaGVpZ2h0KCkgPiBNYXRoLmNlaWwoIHVpU3Bpbm5lci5oZWlnaHQoKSAqIDAuNSApICYmCgkJCQl1aVNwaW5uZXIuaGVpZ2h0KCkgPiAwICkgewoJCQl1aVNwaW5uZXIuaGVpZ2h0KCB1aVNwaW5uZXIuaGVpZ2h0KCkgKTsKCQl9CgoJCS8vIGRpc2FibGUgc3Bpbm5lciBpZiBlbGVtZW50IHdhcyBhbHJlYWR5IGRpc2FibGVkCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCXRoaXMuZGlzYWJsZSgpOwoJCX0KCX0sCgoJX2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJa2V5Q29kZSA9ICQudWkua2V5Q29kZTsKCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQljYXNlIGtleUNvZGUuVVA6CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgMSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLkRPV046CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgLTEsIGV2ZW50ICk7CgkJCXJldHVybiB0cnVlOwoJCWNhc2Uga2V5Q29kZS5QQUdFX1VQOgoJCQl0aGlzLl9yZXBlYXQoIG51bGwsIG9wdGlvbnMucGFnZSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLlBBR0VfRE9XTjoKCQkJdGhpcy5fcmVwZWF0KCBudWxsLCAtb3B0aW9ucy5wYWdlLCBldmVudCApOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX3VpU3Bpbm5lckh0bWw6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAiPHNwYW4gY2xhc3M9J3VpLXNwaW5uZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwnPjwvc3Bhbj4iOwoJfSwKCglfYnV0dG9uSHRtbDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICIiICsKCQkJIjxhIGNsYXNzPSd1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLXVwIHVpLWNvcm5lci10cic+IiArCgkJCQkiPHNwYW4gY2xhc3M9J3VpLWljb24gIiArIHRoaXMub3B0aW9ucy5pY29ucy51cCArICInPiYjOTY1MDs8L3NwYW4+IiArCgkJCSI8L2E+IiArCgkJCSI8YSBjbGFzcz0ndWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci1kb3duIHVpLWNvcm5lci1icic+IiArCgkJCQkiPHNwYW4gY2xhc3M9J3VpLWljb24gIiArIHRoaXMub3B0aW9ucy5pY29ucy5kb3duICsgIic+JiM5NjYwOzwvc3Bhbj4iICsKCQkJIjwvYT4iOwoJfSwKCglfc3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoICF0aGlzLnNwaW5uaW5nICYmIHRoaXMuX3RyaWdnZXIoICJzdGFydCIsIGV2ZW50ICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZiAoICF0aGlzLmNvdW50ZXIgKSB7CgkJCXRoaXMuY291bnRlciA9IDE7CgkJfQoJCXRoaXMuc3Bpbm5pbmcgPSB0cnVlOwoJCXJldHVybiB0cnVlOwoJfSwKCglfcmVwZWF0OiBmdW5jdGlvbiggaSwgc3RlcHMsIGV2ZW50ICkgewoJCWkgPSBpIHx8IDUwMDsKCgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJdGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9yZXBlYXQoIDQwLCBzdGVwcywgZXZlbnQgKTsKCQl9LCBpICk7CgoJCXRoaXMuX3NwaW4oIHN0ZXBzICogdGhpcy5vcHRpb25zLnN0ZXAsIGV2ZW50ICk7Cgl9LAoKCV9zcGluOiBmdW5jdGlvbiggc3RlcCwgZXZlbnQgKSB7CgkJdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpIHx8IDA7CgoJCWlmICggIXRoaXMuY291bnRlciApIHsKCQkJdGhpcy5jb3VudGVyID0gMTsKCQl9CgoJCXZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUoIHZhbHVlICsgc3RlcCAqIHRoaXMuX2luY3JlbWVudCggdGhpcy5jb3VudGVyICkgKTsKCgkJaWYgKCAhdGhpcy5zcGlubmluZyB8fCB0aGlzLl90cmlnZ2VyKCAic3BpbiIsIGV2ZW50LCB7IHZhbHVlOiB2YWx1ZSB9ICkgIT09IGZhbHNlKSB7CgkJCXRoaXMuX3ZhbHVlKCB2YWx1ZSApOwoJCQl0aGlzLmNvdW50ZXIrKzsKCQl9Cgl9LAoKCV9pbmNyZW1lbnQ6IGZ1bmN0aW9uKCBpICkgewoJCXZhciBpbmNyZW1lbnRhbCA9IHRoaXMub3B0aW9ucy5pbmNyZW1lbnRhbDsKCgkJaWYgKCBpbmNyZW1lbnRhbCApIHsKCQkJcmV0dXJuICQuaXNGdW5jdGlvbiggaW5jcmVtZW50YWwgKSA/CgkJCQlpbmNyZW1lbnRhbCggaSApIDoKCQkJCU1hdGguZmxvb3IoIGkqaSppLzUwMDAwIC0gaSppLzUwMCArIDE3KmkvMjAwICsgMSApOwoJCX0KCgkJcmV0dXJuIDE7Cgl9LAoKCV9wcmVjaXNpb246IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVjaXNpb24gPSB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLnN0ZXAgKTsKCQlpZiAoIHRoaXMub3B0aW9ucy5taW4gIT09IG51bGwgKSB7CgkJCXByZWNpc2lvbiA9IE1hdGgubWF4KCBwcmVjaXNpb24sIHRoaXMuX3ByZWNpc2lvbk9mKCB0aGlzLm9wdGlvbnMubWluICkgKTsKCQl9CgkJcmV0dXJuIHByZWNpc2lvbjsKCX0sCgoJX3ByZWNpc2lvbk9mOiBmdW5jdGlvbiggbnVtICkgewoJCXZhciBzdHIgPSBudW0udG9TdHJpbmcoKSwKCQkJZGVjaW1hbCA9IHN0ci5pbmRleE9mKCAiLiIgKTsKCQlyZXR1cm4gZGVjaW1hbCA9PT0gLTEgPyAwIDogc3RyLmxlbmd0aCAtIGRlY2ltYWwgLSAxOwoJfSwKCglfYWRqdXN0VmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgYmFzZSwgYWJvdmVNaW4sCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCS8vIG1ha2Ugc3VyZSB3ZSdyZSBhdCBhIHZhbGlkIHN0ZXAKCQkvLyAtIGZpbmQgb3V0IHdoZXJlIHdlIGFyZSByZWxhdGl2ZSB0byB0aGUgYmFzZSAobWluIG9yIDApCgkJYmFzZSA9IG9wdGlvbnMubWluICE9PSBudWxsID8gb3B0aW9ucy5taW4gOiAwOwoJCWFib3ZlTWluID0gdmFsdWUgLSBiYXNlOwoJCS8vIC0gcm91bmQgdG8gdGhlIG5lYXJlc3Qgc3RlcAoJCWFib3ZlTWluID0gTWF0aC5yb3VuZChhYm92ZU1pbiAvIG9wdGlvbnMuc3RlcCkgKiBvcHRpb25zLnN0ZXA7CgkJLy8gLSByb3VuZGluZyBpcyBiYXNlZCBvbiAwLCBzbyBhZGp1c3QgYmFjayB0byBvdXIgYmFzZQoJCXZhbHVlID0gYmFzZSArIGFib3ZlTWluOwoKCQkvLyBmaXggcHJlY2lzaW9uIGZyb20gYmFkIEpTIGZsb2F0aW5nIHBvaW50IG1hdGgKCQl2YWx1ZSA9IHBhcnNlRmxvYXQoIHZhbHVlLnRvRml4ZWQoIHRoaXMuX3ByZWNpc2lvbigpICkgKTsKCgkJLy8gY2xhbXAgdGhlIHZhbHVlCgkJaWYgKCBvcHRpb25zLm1heCAhPT0gbnVsbCAmJiB2YWx1ZSA+IG9wdGlvbnMubWF4KSB7CgkJCXJldHVybiBvcHRpb25zLm1heDsKCQl9CgkJaWYgKCBvcHRpb25zLm1pbiAhPT0gbnVsbCAmJiB2YWx1ZSA8IG9wdGlvbnMubWluICkgewoJCQlyZXR1cm4gb3B0aW9ucy5taW47CgkJfQoKCQlyZXR1cm4gdmFsdWU7Cgl9LAoKCV9zdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5zcGlubmluZyApIHsKCQkJcmV0dXJuOwoJCX0KCgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLm1vdXNld2hlZWxUaW1lciApOwoJCXRoaXMuY291bnRlciA9IDA7CgkJdGhpcy5zcGlubmluZyA9IGZhbHNlOwoJCXRoaXMuX3RyaWdnZXIoICJzdG9wIiwgZXZlbnQgKTsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJaWYgKCBrZXkgPT09ICJjdWx0dXJlIiB8fCBrZXkgPT09ICJudW1iZXJGb3JtYXQiICkgewoJCQl2YXIgcHJldlZhbHVlID0gdGhpcy5fcGFyc2UoIHRoaXMuZWxlbWVudC52YWwoKSApOwoJCQl0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgkJCXRoaXMuZWxlbWVudC52YWwoIHRoaXMuX2Zvcm1hdCggcHJldlZhbHVlICkgKTsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJtYXgiIHx8IGtleSA9PT0gIm1pbiIgfHwga2V5ID09PSAic3RlcCIgKSB7CgkJCWlmICggdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiApIHsKCQkJCXZhbHVlID0gdGhpcy5fcGFyc2UoIHZhbHVlICk7CgkJCX0KCQl9CgoJCXRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7CgoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQlpZiAoIHZhbHVlICkgewoJCQkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIHRydWUgKTsKCQkJCXRoaXMuYnV0dG9ucy5idXR0b24oICJkaXNhYmxlIiApOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJCQl0aGlzLmJ1dHRvbnMuYnV0dG9uKCAiZW5hYmxlIiApOwoJCQl9CgkJfQoJfSwKCglfc2V0T3B0aW9uczogbW9kaWZpZXIoZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCQl0aGlzLl92YWx1ZSggdGhpcy5lbGVtZW50LnZhbCgpICk7Cgl9KSwKCglfcGFyc2U6IGZ1bmN0aW9uKCB2YWwgKSB7CgkJaWYgKCB0eXBlb2YgdmFsID09PSAic3RyaW5nIiAmJiB2YWwgIT09ICIiICkgewoJCQl2YWwgPSB3aW5kb3cuR2xvYmFsaXplICYmIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQgPwoJCQkJR2xvYmFsaXplLnBhcnNlRmxvYXQoIHZhbCwgMTAsIHRoaXMub3B0aW9ucy5jdWx0dXJlICkgOiArdmFsOwoJCX0KCQlyZXR1cm4gdmFsID09PSAiIiB8fCBpc05hTiggdmFsICkgPyBudWxsIDogdmFsOwoJfSwKCglfZm9ybWF0OiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJaWYgKCB2YWx1ZSA9PT0gIiIgKSB7CgkJCXJldHVybiAiIjsKCQl9CgkJcmV0dXJuIHdpbmRvdy5HbG9iYWxpemUgJiYgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCA/CgkJCUdsb2JhbGl6ZS5mb3JtYXQoIHZhbHVlLCB0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0LCB0aGlzLm9wdGlvbnMuY3VsdHVyZSApIDoKCQkJdmFsdWU7Cgl9LAoKCV9yZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuYXR0cih7CgkJCSJhcmlhLXZhbHVlbWluIjogdGhpcy5vcHRpb25zLm1pbiwKCQkJImFyaWEtdmFsdWVtYXgiOiB0aGlzLm9wdGlvbnMubWF4LAoJCQkvLyBUT0RPOiB3aGF0IHNob3VsZCB3ZSBkbyB3aXRoIHZhbHVlcyB0aGF0IGNhbid0IGJlIHBhcnNlZD8KCQkJImFyaWEtdmFsdWVub3ciOiB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpICkKCQl9KTsKCX0sCgoJLy8gdXBkYXRlIHRoZSB2YWx1ZSB3aXRob3V0IHRyaWdnZXJpbmcgY2hhbmdlCglfdmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSwgYWxsb3dBbnkgKSB7CgkJdmFyIHBhcnNlZDsKCQlpZiAoIHZhbHVlICE9PSAiIiApIHsKCQkJcGFyc2VkID0gdGhpcy5fcGFyc2UoIHZhbHVlICk7CgkJCWlmICggcGFyc2VkICE9PSBudWxsICkgewoJCQkJaWYgKCAhYWxsb3dBbnkgKSB7CgkJCQkJcGFyc2VkID0gdGhpcy5fYWRqdXN0VmFsdWUoIHBhcnNlZCApOwoJCQkJfQoJCQkJdmFsdWUgPSB0aGlzLl9mb3JtYXQoIHBhcnNlZCApOwoJCQl9CgkJfQoJCXRoaXMuZWxlbWVudC52YWwoIHZhbHVlICk7CgkJdGhpcy5fcmVmcmVzaCgpOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50CgkJCS5yZW1vdmVDbGFzcyggInVpLXNwaW5uZXItaW5wdXQiICkKCQkJLnByb3AoICJkaXNhYmxlZCIsIGZhbHNlICkKCQkJLnJlbW92ZUF0dHIoICJhdXRvY29tcGxldGUiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS12YWx1ZW1pbiIgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtdmFsdWVtYXgiICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLXZhbHVlbm93IiApOwoJCXRoaXMudWlTcGlubmVyLnJlcGxhY2VXaXRoKCB0aGlzLmVsZW1lbnQgKTsKCX0sCgoJc3RlcFVwOiBtb2RpZmllcihmdW5jdGlvbiggc3RlcHMgKSB7CgkJdGhpcy5fc3RlcFVwKCBzdGVwcyApOwoJfSksCglfc3RlcFVwOiBmdW5jdGlvbiggc3RlcHMgKSB7CgkJdGhpcy5fc3BpbiggKHN0ZXBzIHx8IDEpICogdGhpcy5vcHRpb25zLnN0ZXAgKTsKCX0sCgoJc3RlcERvd246IG1vZGlmaWVyKGZ1bmN0aW9uKCBzdGVwcyApIHsKCQl0aGlzLl9zdGVwRG93biggc3RlcHMgKTsKCX0pLAoJX3N0ZXBEb3duOiBmdW5jdGlvbiggc3RlcHMgKSB7CgkJdGhpcy5fc3BpbiggKHN0ZXBzIHx8IDEpICogLXRoaXMub3B0aW9ucy5zdGVwICk7Cgl9LAoKCXBhZ2VVcDogbW9kaWZpZXIoZnVuY3Rpb24oIHBhZ2VzICkgewoJCXRoaXMuX3N0ZXBVcCggKHBhZ2VzIHx8IDEpICogdGhpcy5vcHRpb25zLnBhZ2UgKTsKCX0pLAoKCXBhZ2VEb3duOiBtb2RpZmllcihmdW5jdGlvbiggcGFnZXMgKSB7CgkJdGhpcy5fc3RlcERvd24oIChwYWdlcyB8fCAxKSAqIHRoaXMub3B0aW9ucy5wYWdlICk7Cgl9KSwKCgl2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbCApIHsKCQlpZiAoICFhcmd1bWVudHMubGVuZ3RoICkgewoJCQlyZXR1cm4gdGhpcy5fcGFyc2UoIHRoaXMuZWxlbWVudC52YWwoKSApOwoJCX0KCQltb2RpZmllciggdGhpcy5fdmFsdWUgKS5jYWxsKCB0aGlzLCBuZXdWYWwgKTsKCX0sCgoJd2lkZ2V0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy51aVNwaW5uZXI7Cgl9Cn0pOwoKfSggalF1ZXJ5ICkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgdGFiSWQgPSAwLAoJcmhhc2ggPSAvIy4qJC87CgpmdW5jdGlvbiBnZXROZXh0VGFiSWQoKSB7CglyZXR1cm4gKyt0YWJJZDsKfQoKZnVuY3Rpb24gaXNMb2NhbCggYW5jaG9yICkgewoJcmV0dXJuIGFuY2hvci5oYXNoLmxlbmd0aCA+IDEgJiYKCQlhbmNob3IuaHJlZi5yZXBsYWNlKCByaGFzaCwgIiIgKSA9PT0KCQkJbG9jYXRpb24uaHJlZi5yZXBsYWNlKCByaGFzaCwgIiIgKQoJCQkJLy8gc3VwcG9ydDogU2FmYXJpIDUuMQoJCQkJLy8gU2FmYXJpIDUuMSBkb2Vzbid0IGVuY29kZSBzcGFjZXMgaW4gd2luZG93LmxvY2F0aW9uCgkJCQkvLyBidXQgaXQgZG9lcyBlbmNvZGUgc3BhY2VzIGZyb20gYW5jaG9ycyAoIzg3NzcpCgkJCQkucmVwbGFjZSggL1xzL2csICIlMjAiICk7Cn0KCiQud2lkZ2V0KCAidWkudGFicyIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglkZWxheTogMzAwLAoJb3B0aW9uczogewoJCWFjdGl2ZTogbnVsbCwKCQljb2xsYXBzaWJsZTogZmFsc2UsCgkJZXZlbnQ6ICJjbGljayIsCgkJaGVpZ2h0U3R5bGU6ICJjb250ZW50IiwKCQloaWRlOiBudWxsLAoJCXNob3c6IG51bGwsCgoJCS8vIGNhbGxiYWNrcwoJCWFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZUFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZUxvYWQ6IG51bGwsCgkJbG9hZDogbnVsbAoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCWFjdGl2ZSA9IG9wdGlvbnMuYWN0aXZlLAoJCQlsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApOwoKCQl0aGlzLnJ1bm5pbmcgPSBmYWxzZTsKCgkJdGhpcy5lbGVtZW50CgkJCS5hZGRDbGFzcyggInVpLXRhYnMgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiICkKCQkJLnRvZ2dsZUNsYXNzKCAidWktdGFicy1jb2xsYXBzaWJsZSIsIG9wdGlvbnMuY29sbGFwc2libGUgKQoJCQkvLyBQcmV2ZW50IHVzZXJzIGZyb20gZm9jdXNpbmcgZGlzYWJsZWQgdGFicyB2aWEgY2xpY2sKCQkJLmRlbGVnYXRlKCAiLnVpLXRhYnMtbmF2ID4gbGkiLCAibW91c2Vkb3duIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggJCggdGhpcyApLmlzKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApICkgewoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQl9CgkJCX0pCgkJCS8vIHN1cHBvcnQ6IElFIDw5CgkJCS8vIFByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uIGluIG1vdXNlZG93biBkb2Vzbid0IHByZXZlbnQgSUUKCQkJLy8gZnJvbSBmb2N1c2luZyB0aGUgZWxlbWVudCwgc28gaWYgdGhlIGFuY2hvciBnZXRzIGZvY3VzZWQsIGJsdXIuCgkJCS8vIFdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgZm9jdXNpbmcgdGhlIHByZXZpb3VzbHkgZm9jdXNlZAoJCQkvLyBlbGVtZW50IHNpbmNlIGNsaWNraW5nIG9uIGEgbm9uLWZvY3VzYWJsZSBlbGVtZW50IHNob3VsZCBmb2N1cwoJCQkvLyB0aGUgYm9keSBhbnl3YXkuCgkJCS5kZWxlZ2F0ZSggIi51aS10YWJzLWFuY2hvciIsICJmb2N1cyIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHsKCQkJCWlmICggJCggdGhpcyApLmNsb3Nlc3QoICJsaSIgKS5pcyggIi51aS1zdGF0ZS1kaXNhYmxlZCIgKSApIHsKCQkJCQl0aGlzLmJsdXIoKTsKCQkJCX0KCQkJfSk7CgoJCXRoaXMuX3Byb2Nlc3NUYWJzKCk7CgoJCWlmICggYWN0aXZlID09PSBudWxsICkgewoJCQkvLyBjaGVjayB0aGUgZnJhZ21lbnQgaWRlbnRpZmllciBpbiB0aGUgVVJMCgkJCWlmICggbG9jYXRpb25IYXNoICkgewoJCQkJdGhpcy50YWJzLmVhY2goZnVuY3Rpb24oIGksIHRhYiApIHsKCQkJCQlpZiAoICQoIHRhYiApLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApID09PSBsb2NhdGlvbkhhc2ggKSB7CgkJCQkJCWFjdGl2ZSA9IGk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoKCQkJLy8gY2hlY2sgZm9yIGEgdGFiIG1hcmtlZCBhY3RpdmUgdmlhIGEgY2xhc3MKCQkJaWYgKCBhY3RpdmUgPT09IG51bGwgKSB7CgkJCQlhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5maWx0ZXIoICIudWktdGFicy1hY3RpdmUiICkgKTsKCQkJfQoKCQkJLy8gbm8gYWN0aXZlIHRhYiwgc2V0IHRvIGZhbHNlCgkJCWlmICggYWN0aXZlID09PSBudWxsIHx8IGFjdGl2ZSA9PT0gLTEgKSB7CgkJCQlhY3RpdmUgPSB0aGlzLnRhYnMubGVuZ3RoID8gMCA6IGZhbHNlOwoJCQl9CgkJfQoKCQkvLyBoYW5kbGUgbnVtYmVyczogbmVnYXRpdmUsIG91dCBvZiByYW5nZQoJCWlmICggYWN0aXZlICE9PSBmYWxzZSApIHsKCQkJYWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLnRhYnMuZXEoIGFjdGl2ZSApICk7CgkJCWlmICggYWN0aXZlID09PSAtMSApIHsKCQkJCWFjdGl2ZSA9IG9wdGlvbnMuY29sbGFwc2libGUgPyBmYWxzZSA6IDA7CgkJCX0KCQl9CgkJb3B0aW9ucy5hY3RpdmUgPSBhY3RpdmU7CgoJCS8vIGRvbid0IGFsbG93IGNvbGxhcHNpYmxlOiBmYWxzZSBhbmQgYWN0aXZlOiBmYWxzZQoJCWlmICggIW9wdGlvbnMuY29sbGFwc2libGUgJiYgb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICYmIHRoaXMuYW5jaG9ycy5sZW5ndGggKSB7CgkJCW9wdGlvbnMuYWN0aXZlID0gMDsKCQl9CgoJCS8vIFRha2UgZGlzYWJsaW5nIHRhYnMgdmlhIGNsYXNzIGF0dHJpYnV0ZSBmcm9tIEhUTUwKCQkvLyBpbnRvIGFjY291bnQgYW5kIHVwZGF0ZSBvcHRpb24gcHJvcGVybHkuCgkJaWYgKCAkLmlzQXJyYXkoIG9wdGlvbnMuZGlzYWJsZWQgKSApIHsKCQkJb3B0aW9ucy5kaXNhYmxlZCA9ICQudW5pcXVlKCBvcHRpb25zLmRpc2FibGVkLmNvbmNhdCgKCQkJCSQubWFwKCB0aGlzLnRhYnMuZmlsdGVyKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApLCBmdW5jdGlvbiggbGkgKSB7CgkJCQkJcmV0dXJuIHRoYXQudGFicy5pbmRleCggbGkgKTsKCQkJCX0pCgkJCSkgKS5zb3J0KCk7CgkJfQoKCQkvLyBjaGVjayBmb3IgbGVuZ3RoIGF2b2lkcyBlcnJvciB3aGVuIGluaXRpYWxpemluZyBlbXB0eSBsaXN0CgkJaWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlICE9PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkgewoJCQl0aGlzLmFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIHRoaXMub3B0aW9ucy5hY3RpdmUgKTsKCQl9IGVsc2UgewoJCQl0aGlzLmFjdGl2ZSA9ICQoKTsKCQl9CgoJCXRoaXMuX3JlZnJlc2goKTsKCgkJaWYgKCB0aGlzLmFjdGl2ZS5sZW5ndGggKSB7CgkJCXRoaXMubG9hZCggb3B0aW9ucy5hY3RpdmUgKTsKCQl9Cgl9LAoKCV9nZXRDcmVhdGVFdmVudERhdGE6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB7CgkJCXRhYjogdGhpcy5hY3RpdmUsCgkJCXBhbmVsOiAhdGhpcy5hY3RpdmUubGVuZ3RoID8gJCgpIDogdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlICkKCQl9OwoJfSwKCglfdGFiS2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBmb2N1c2VkVGFiID0gJCggdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ICkuY2xvc2VzdCggImxpIiApLAoJCQlzZWxlY3RlZEluZGV4ID0gdGhpcy50YWJzLmluZGV4KCBmb2N1c2VkVGFiICksCgkJCWdvaW5nRm9yd2FyZCA9IHRydWU7CgoJCWlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJY2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6CgkJCWNhc2UgJC51aS5rZXlDb2RlLkRPV046CgkJCQlzZWxlY3RlZEluZGV4Kys7CgkJCQlicmVhazsKCQkJY2FzZSAkLnVpLmtleUNvZGUuVVA6CgkJCWNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6CgkJCQlnb2luZ0ZvcndhcmQgPSBmYWxzZTsKCQkJCXNlbGVjdGVkSW5kZXgtLTsKCQkJCWJyZWFrOwoJCQljYXNlICQudWkua2V5Q29kZS5FTkQ6CgkJCQlzZWxlY3RlZEluZGV4ID0gdGhpcy5hbmNob3JzLmxlbmd0aCAtIDE7CgkJCQlicmVhazsKCQkJY2FzZSAkLnVpLmtleUNvZGUuSE9NRToKCQkJCXNlbGVjdGVkSW5kZXggPSAwOwoJCQkJYnJlYWs7CgkJCWNhc2UgJC51aS5rZXlDb2RlLlNQQUNFOgoJCQkJLy8gQWN0aXZhdGUgb25seSwgbm8gY29sbGFwc2luZwoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCWNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7CgkJCQl0aGlzLl9hY3RpdmF0ZSggc2VsZWN0ZWRJbmRleCApOwoJCQkJcmV0dXJuOwoJCQljYXNlICQudWkua2V5Q29kZS5FTlRFUjoKCQkJCS8vIFRvZ2dsZSAoY2FuY2VsIGRlbGF5ZWQgYWN0aXZhdGlvbiwgYWxsb3cgY29sbGFwc2luZykKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQljbGVhclRpbWVvdXQoIHRoaXMuYWN0aXZhdGluZyApOwoJCQkJLy8gRGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBjb2xsYXBzZSBvciBhY3RpdmF0ZQoJCQkJdGhpcy5fYWN0aXZhdGUoIHNlbGVjdGVkSW5kZXggPT09IHRoaXMub3B0aW9ucy5hY3RpdmUgPyBmYWxzZSA6IHNlbGVjdGVkSW5kZXggKTsKCQkJCXJldHVybjsKCQkJZGVmYXVsdDoKCQkJCXJldHVybjsKCQl9CgoJCS8vIEZvY3VzIHRoZSBhcHByb3ByaWF0ZSB0YWIsIGJhc2VkIG9uIHdoaWNoIGtleSB3YXMgcHJlc3NlZAoJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTsKCQlzZWxlY3RlZEluZGV4ID0gdGhpcy5fZm9jdXNOZXh0VGFiKCBzZWxlY3RlZEluZGV4LCBnb2luZ0ZvcndhcmQgKTsKCgkJLy8gTmF2aWdhdGluZyB3aXRoIGNvbnRyb2wga2V5IHdpbGwgcHJldmVudCBhdXRvbWF0aWMgYWN0aXZhdGlvbgoJCWlmICggIWV2ZW50LmN0cmxLZXkgKSB7CgkJCS8vIFVwZGF0ZSBhcmlhLXNlbGVjdGVkIGltbWVkaWF0ZWx5IHNvIHRoYXQgQVQgdGhpbmsgdGhlIHRhYiBpcyBhbHJlYWR5IHNlbGVjdGVkLgoJCQkvLyBPdGhlcndpc2UgQVQgbWF5IGNvbmZ1c2UgdGhlIHVzZXIgYnkgc3RhdGluZyB0aGF0IHRoZXkgbmVlZCB0byBhY3RpdmF0ZSB0aGUgdGFiLAoJCQkvLyBidXQgdGhlIHRhYiB3aWxsIGFscmVhZHkgYmUgYWN0aXZhdGVkIGJ5IHRoZSB0aW1lIHRoZSBhbm5vdW5jZW1lbnQgZmluaXNoZXMuCgkJCWZvY3VzZWRUYWIuYXR0ciggImFyaWEtc2VsZWN0ZWQiLCAiZmFsc2UiICk7CgkJCXRoaXMudGFicy5lcSggc2VsZWN0ZWRJbmRleCApLmF0dHIoICJhcmlhLXNlbGVjdGVkIiwgInRydWUiICk7CgoJCQl0aGlzLmFjdGl2YXRpbmcgPSB0aGlzLl9kZWxheShmdW5jdGlvbigpIHsKCQkJCXRoaXMub3B0aW9uKCAiYWN0aXZlIiwgc2VsZWN0ZWRJbmRleCApOwoJCQl9LCB0aGlzLmRlbGF5ICk7CgkJfQoJfSwKCglfcGFuZWxLZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCB0aGlzLl9oYW5kbGVQYWdlTmF2KCBldmVudCApICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBDdHJsK3VwIG1vdmVzIGZvY3VzIHRvIHRoZSBjdXJyZW50IHRhYgoJCWlmICggZXZlbnQuY3RybEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuVVAgKSB7CgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCXRoaXMuYWN0aXZlLmZvY3VzKCk7CgkJfQoJfSwKCgkvLyBBbHQrcGFnZSB1cC9kb3duIG1vdmVzIGZvY3VzIHRvIHRoZSBwcmV2aW91cy9uZXh0IHRhYiAoYW5kIGFjdGl2YXRlcykKCV9oYW5kbGVQYWdlTmF2OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCBldmVudC5hbHRLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlBBR0VfVVAgKSB7CgkJCXRoaXMuX2FjdGl2YXRlKCB0aGlzLl9mb2N1c05leHRUYWIoIHRoaXMub3B0aW9ucy5hY3RpdmUgLSAxLCBmYWxzZSApICk7CgkJCXJldHVybiB0cnVlOwoJCX0KCQlpZiAoIGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOICkgewoJCQl0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZm9jdXNOZXh0VGFiKCB0aGlzLm9wdGlvbnMuYWN0aXZlICsgMSwgdHJ1ZSApICk7CgkJCXJldHVybiB0cnVlOwoJCX0KCX0sCgoJX2ZpbmROZXh0VGFiOiBmdW5jdGlvbiggaW5kZXgsIGdvaW5nRm9yd2FyZCApIHsKCQl2YXIgbGFzdFRhYkluZGV4ID0gdGhpcy50YWJzLmxlbmd0aCAtIDE7CgoJCWZ1bmN0aW9uIGNvbnN0cmFpbigpIHsKCQkJaWYgKCBpbmRleCA+IGxhc3RUYWJJbmRleCApIHsKCQkJCWluZGV4ID0gMDsKCQkJfQoJCQlpZiAoIGluZGV4IDwgMCApIHsKCQkJCWluZGV4ID0gbGFzdFRhYkluZGV4OwoJCQl9CgkJCXJldHVybiBpbmRleDsKCQl9CgoJCXdoaWxlICggJC5pbkFycmF5KCBjb25zdHJhaW4oKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkICkgIT09IC0xICkgewoJCQlpbmRleCA9IGdvaW5nRm9yd2FyZCA/IGluZGV4ICsgMSA6IGluZGV4IC0gMTsKCQl9CgoJCXJldHVybiBpbmRleDsKCX0sCgoJX2ZvY3VzTmV4dFRhYjogZnVuY3Rpb24oIGluZGV4LCBnb2luZ0ZvcndhcmQgKSB7CgkJaW5kZXggPSB0aGlzLl9maW5kTmV4dFRhYiggaW5kZXgsIGdvaW5nRm9yd2FyZCApOwoJCXRoaXMudGFicy5lcSggaW5kZXggKS5mb2N1cygpOwoJCXJldHVybiBpbmRleDsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJaWYgKCBrZXkgPT09ICJhY3RpdmUiICkgewoJCQkvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9ucwoJCQl0aGlzLl9hY3RpdmF0ZSggdmFsdWUgKTsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCS8vIGRvbid0IHVzZSB0aGUgd2lkZ2V0IGZhY3RvcnkncyBkaXNhYmxlZCBoYW5kbGluZwoJCQl0aGlzLl9zZXR1cERpc2FibGVkKCB2YWx1ZSApOwoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSk7CgoJCWlmICgga2V5ID09PSAiY29sbGFwc2libGUiICkgewoJCQl0aGlzLmVsZW1lbnQudG9nZ2xlQ2xhc3MoICJ1aS10YWJzLWNvbGxhcHNpYmxlIiwgdmFsdWUgKTsKCQkJLy8gU2V0dGluZyBjb2xsYXBzaWJsZTogZmFsc2Ugd2hpbGUgY29sbGFwc2VkOyBvcGVuIGZpcnN0IHBhbmVsCgkJCWlmICggIXZhbHVlICYmIHRoaXMub3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICkgewoJCQkJdGhpcy5fYWN0aXZhdGUoIDAgKTsKCQkJfQoJCX0KCgkJaWYgKCBrZXkgPT09ICJldmVudCIgKSB7CgkJCXRoaXMuX3NldHVwRXZlbnRzKCB2YWx1ZSApOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJoZWlnaHRTdHlsZSIgKSB7CgkJCXRoaXMuX3NldHVwSGVpZ2h0U3R5bGUoIHZhbHVlICk7CgkJfQoJfSwKCglfdGFiSWQ6IGZ1bmN0aW9uKCB0YWIgKSB7CgkJcmV0dXJuIHRhYi5hdHRyKCAiYXJpYS1jb250cm9scyIgKSB8fCAidWktdGFicy0iICsgZ2V0TmV4dFRhYklkKCk7Cgl9LAoKCV9zYW5pdGl6ZVNlbGVjdG9yOiBmdW5jdGlvbiggaGFzaCApIHsKCQlyZXR1cm4gaGFzaCA/IGhhc2gucmVwbGFjZSggL1shIiQlJicoKSorLC5cLzo7PD0+P0BcW1xdXF5ge3x9fl0vZywgIlxcJCYiICkgOiAiIjsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCWxpcyA9IHRoaXMudGFibGlzdC5jaGlsZHJlbiggIjpoYXMoYVtocmVmXSkiICk7CgoJCS8vIGdldCBkaXNhYmxlZCB0YWJzIGZyb20gY2xhc3MgYXR0cmlidXRlIGZyb20gSFRNTAoJCS8vIHRoaXMgd2lsbCBnZXQgY29udmVydGVkIHRvIGEgYm9vbGVhbiBpZiBuZWVkZWQgaW4gX3JlZnJlc2goKQoJCW9wdGlvbnMuZGlzYWJsZWQgPSAkLm1hcCggbGlzLmZpbHRlciggIi51aS1zdGF0ZS1kaXNhYmxlZCIgKSwgZnVuY3Rpb24oIHRhYiApIHsKCQkJcmV0dXJuIGxpcy5pbmRleCggdGFiICk7CgkJfSk7CgoJCXRoaXMuX3Byb2Nlc3NUYWJzKCk7CgoJCS8vIHdhcyBjb2xsYXBzZWQgb3Igbm8gdGFicwoJCWlmICggb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlIHx8ICF0aGlzLmFuY2hvcnMubGVuZ3RoICkgewoJCQlvcHRpb25zLmFjdGl2ZSA9IGZhbHNlOwoJCQl0aGlzLmFjdGl2ZSA9ICQoKTsKCQkvLyB3YXMgYWN0aXZlLCBidXQgYWN0aXZlIHRhYiBpcyBnb25lCgkJfSBlbHNlIGlmICggdGhpcy5hY3RpdmUubGVuZ3RoICYmICEkLmNvbnRhaW5zKCB0aGlzLnRhYmxpc3RbIDAgXSwgdGhpcy5hY3RpdmVbIDAgXSApICkgewoJCQkvLyBhbGwgcmVtYWluaW5nIHRhYnMgYXJlIGRpc2FibGVkCgkJCWlmICggdGhpcy50YWJzLmxlbmd0aCA9PT0gb3B0aW9ucy5kaXNhYmxlZC5sZW5ndGggKSB7CgkJCQlvcHRpb25zLmFjdGl2ZSA9IGZhbHNlOwoJCQkJdGhpcy5hY3RpdmUgPSAkKCk7CgkJCS8vIGFjdGl2YXRlIHByZXZpb3VzIHRhYgoJCQl9IGVsc2UgewoJCQkJdGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZpbmROZXh0VGFiKCBNYXRoLm1heCggMCwgb3B0aW9ucy5hY3RpdmUgLSAxICksIGZhbHNlICkgKTsKCQkJfQoJCS8vIHdhcyBhY3RpdmUsIGFjdGl2ZSB0YWIgc3RpbGwgZXhpc3RzCgkJfSBlbHNlIHsKCQkJLy8gbWFrZSBzdXJlIGFjdGl2ZSBpbmRleCBpcyBjb3JyZWN0CgkJCW9wdGlvbnMuYWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLmFjdGl2ZSApOwoJCX0KCgkJdGhpcy5fcmVmcmVzaCgpOwoJfSwKCglfcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc2V0dXBEaXNhYmxlZCggdGhpcy5vcHRpb25zLmRpc2FibGVkICk7CgkJdGhpcy5fc2V0dXBFdmVudHMoIHRoaXMub3B0aW9ucy5ldmVudCApOwoJCXRoaXMuX3NldHVwSGVpZ2h0U3R5bGUoIHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSApOwoKCQl0aGlzLnRhYnMubm90KCB0aGlzLmFjdGl2ZSApLmF0dHIoewoJCQkiYXJpYS1zZWxlY3RlZCI6ICJmYWxzZSIsCgkJCXRhYkluZGV4OiAtMQoJCX0pOwoJCXRoaXMucGFuZWxzLm5vdCggdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlICkgKQoJCQkuaGlkZSgpCgkJCS5hdHRyKHsKCQkJCSJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKCQkJCSJhcmlhLWhpZGRlbiI6ICJ0cnVlIgoJCQl9KTsKCgkJLy8gTWFrZSBzdXJlIG9uZSB0YWIgaXMgaW4gdGhlIHRhYiBvcmRlcgoJCWlmICggIXRoaXMuYWN0aXZlLmxlbmd0aCApIHsKCQkJdGhpcy50YWJzLmVxKCAwICkuYXR0ciggInRhYkluZGV4IiwgMCApOwoJCX0gZWxzZSB7CgkJCXRoaXMuYWN0aXZlCgkJCQkuYWRkQ2xhc3MoICJ1aS10YWJzLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUiICkKCQkJCS5hdHRyKHsKCQkJCQkiYXJpYS1zZWxlY3RlZCI6ICJ0cnVlIiwKCQkJCQl0YWJJbmRleDogMAoJCQkJfSk7CgkJCXRoaXMuX2dldFBhbmVsRm9yVGFiKCB0aGlzLmFjdGl2ZSApCgkJCQkuc2hvdygpCgkJCQkuYXR0cih7CgkJCQkJImFyaWEtZXhwYW5kZWQiOiAidHJ1ZSIsCgkJCQkJImFyaWEtaGlkZGVuIjogImZhbHNlIgoJCQkJfSk7CgkJfQoJfSwKCglfcHJvY2Vzc1RhYnM6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpczsKCgkJdGhpcy50YWJsaXN0ID0gdGhpcy5fZ2V0TGlzdCgpCgkJCS5hZGRDbGFzcyggInVpLXRhYnMtbmF2IHVpLWhlbHBlci1yZXNldCB1aS1oZWxwZXItY2xlYXJmaXggdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItYWxsIiApCgkJCS5hdHRyKCAicm9sZSIsICJ0YWJsaXN0IiApOwoKCQl0aGlzLnRhYnMgPSB0aGlzLnRhYmxpc3QuZmluZCggIj4gbGk6aGFzKGFbaHJlZl0pIiApCgkJCS5hZGRDbGFzcyggInVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCIgKQoJCQkuYXR0cih7CgkJCQlyb2xlOiAidGFiIiwKCQkJCXRhYkluZGV4OiAtMQoJCQl9KTsKCgkJdGhpcy5hbmNob3JzID0gdGhpcy50YWJzLm1hcChmdW5jdGlvbigpIHsKCQkJCXJldHVybiAkKCAiYSIsIHRoaXMgKVsgMCBdOwoJCQl9KQoJCQkuYWRkQ2xhc3MoICJ1aS10YWJzLWFuY2hvciIgKQoJCQkuYXR0cih7CgkJCQlyb2xlOiAicHJlc2VudGF0aW9uIiwKCQkJCXRhYkluZGV4OiAtMQoJCQl9KTsKCgkJdGhpcy5wYW5lbHMgPSAkKCk7CgoJCXRoaXMuYW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCBpLCBhbmNob3IgKSB7CgkJCXZhciBzZWxlY3RvciwgcGFuZWwsIHBhbmVsSWQsCgkJCQlhbmNob3JJZCA9ICQoIGFuY2hvciApLnVuaXF1ZUlkKCkuYXR0ciggImlkIiApLAoJCQkJdGFiID0gJCggYW5jaG9yICkuY2xvc2VzdCggImxpIiApLAoJCQkJb3JpZ2luYWxBcmlhQ29udHJvbHMgPSB0YWIuYXR0ciggImFyaWEtY29udHJvbHMiICk7CgoJCQkvLyBpbmxpbmUgdGFiCgkJCWlmICggaXNMb2NhbCggYW5jaG9yICkgKSB7CgkJCQlzZWxlY3RvciA9IGFuY2hvci5oYXNoOwoJCQkJcGFuZWwgPSB0aGF0LmVsZW1lbnQuZmluZCggdGhhdC5fc2FuaXRpemVTZWxlY3Rvciggc2VsZWN0b3IgKSApOwoJCQkvLyByZW1vdGUgdGFiCgkJCX0gZWxzZSB7CgkJCQlwYW5lbElkID0gdGhhdC5fdGFiSWQoIHRhYiApOwoJCQkJc2VsZWN0b3IgPSAiIyIgKyBwYW5lbElkOwoJCQkJcGFuZWwgPSB0aGF0LmVsZW1lbnQuZmluZCggc2VsZWN0b3IgKTsKCQkJCWlmICggIXBhbmVsLmxlbmd0aCApIHsKCQkJCQlwYW5lbCA9IHRoYXQuX2NyZWF0ZVBhbmVsKCBwYW5lbElkICk7CgkJCQkJcGFuZWwuaW5zZXJ0QWZ0ZXIoIHRoYXQucGFuZWxzWyBpIC0gMSBdIHx8IHRoYXQudGFibGlzdCApOwoJCQkJfQoJCQkJcGFuZWwuYXR0ciggImFyaWEtbGl2ZSIsICJwb2xpdGUiICk7CgkJCX0KCgkJCWlmICggcGFuZWwubGVuZ3RoKSB7CgkJCQl0aGF0LnBhbmVscyA9IHRoYXQucGFuZWxzLmFkZCggcGFuZWwgKTsKCQkJfQoJCQlpZiAoIG9yaWdpbmFsQXJpYUNvbnRyb2xzICkgewoJCQkJdGFiLmRhdGEoICJ1aS10YWJzLWFyaWEtY29udHJvbHMiLCBvcmlnaW5hbEFyaWFDb250cm9scyApOwoJCQl9CgkJCXRhYi5hdHRyKHsKCQkJCSJhcmlhLWNvbnRyb2xzIjogc2VsZWN0b3Iuc3Vic3RyaW5nKCAxICksCgkJCQkiYXJpYS1sYWJlbGxlZGJ5IjogYW5jaG9ySWQKCQkJfSk7CgkJCXBhbmVsLmF0dHIoICJhcmlhLWxhYmVsbGVkYnkiLCBhbmNob3JJZCApOwoJCX0pOwoKCQl0aGlzLnBhbmVscwoJCQkuYWRkQ2xhc3MoICJ1aS10YWJzLXBhbmVsIHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iICkKCQkJLmF0dHIoICJyb2xlIiwgInRhYnBhbmVsIiApOwoJfSwKCgkvLyBhbGxvdyBvdmVycmlkaW5nIGhvdyB0byBmaW5kIHRoZSBsaXN0IGZvciByYXJlIHVzYWdlIHNjZW5hcmlvcyAoIzc3MTUpCglfZ2V0TGlzdDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWxlbWVudC5maW5kKCAib2wsdWwiICkuZXEoIDAgKTsKCX0sCgoJX2NyZWF0ZVBhbmVsOiBmdW5jdGlvbiggaWQgKSB7CgkJcmV0dXJuICQoICI8ZGl2PiIgKQoJCQkuYXR0ciggImlkIiwgaWQgKQoJCQkuYWRkQ2xhc3MoICJ1aS10YWJzLXBhbmVsIHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iICkKCQkJLmRhdGEoICJ1aS10YWJzLWRlc3Ryb3kiLCB0cnVlICk7Cgl9LAoKCV9zZXR1cERpc2FibGVkOiBmdW5jdGlvbiggZGlzYWJsZWQgKSB7CgkJaWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7CgkJCWlmICggIWRpc2FibGVkLmxlbmd0aCApIHsKCQkJCWRpc2FibGVkID0gZmFsc2U7CgkJCX0gZWxzZSBpZiAoIGRpc2FibGVkLmxlbmd0aCA9PT0gdGhpcy5hbmNob3JzLmxlbmd0aCApIHsKCQkJCWRpc2FibGVkID0gdHJ1ZTsKCQkJfQoJCX0KCgkJLy8gZGlzYWJsZSB0YWJzCgkJZm9yICggdmFyIGkgPSAwLCBsaTsgKCBsaSA9IHRoaXMudGFic1sgaSBdICk7IGkrKyApIHsKCQkJaWYgKCBkaXNhYmxlZCA9PT0gdHJ1ZSB8fCAkLmluQXJyYXkoIGksIGRpc2FibGVkICkgIT09IC0xICkgewoJCQkJJCggbGkgKQoJCQkJCS5hZGRDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiApCgkJCQkJLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgInRydWUiICk7CgkJCX0gZWxzZSB7CgkJCQkkKCBsaSApCgkJCQkJLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkKCQkJCQkucmVtb3ZlQXR0ciggImFyaWEtZGlzYWJsZWQiICk7CgkJCX0KCQl9CgoJCXRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IGRpc2FibGVkOwoJfSwKCglfc2V0dXBFdmVudHM6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgZXZlbnRzID0gewoJCQljbGljazogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJfQoJCX07CgkJaWYgKCBldmVudCApIHsKCQkJJC5lYWNoKCBldmVudC5zcGxpdCgiICIpLCBmdW5jdGlvbiggaW5kZXgsIGV2ZW50TmFtZSApIHsKCQkJCWV2ZW50c1sgZXZlbnROYW1lIF0gPSAiX2V2ZW50SGFuZGxlciI7CgkJCX0pOwoJCX0KCgkJdGhpcy5fb2ZmKCB0aGlzLmFuY2hvcnMuYWRkKCB0aGlzLnRhYnMgKS5hZGQoIHRoaXMucGFuZWxzICkgKTsKCQl0aGlzLl9vbiggdGhpcy5hbmNob3JzLCBldmVudHMgKTsKCQl0aGlzLl9vbiggdGhpcy50YWJzLCB7IGtleWRvd246ICJfdGFiS2V5ZG93biIgfSApOwoJCXRoaXMuX29uKCB0aGlzLnBhbmVscywgeyBrZXlkb3duOiAiX3BhbmVsS2V5ZG93biIgfSApOwoKCQl0aGlzLl9mb2N1c2FibGUoIHRoaXMudGFicyApOwoJCXRoaXMuX2hvdmVyYWJsZSggdGhpcy50YWJzICk7Cgl9LAoKCV9zZXR1cEhlaWdodFN0eWxlOiBmdW5jdGlvbiggaGVpZ2h0U3R5bGUgKSB7CgkJdmFyIG1heEhlaWdodCwgb3ZlcmZsb3csCgkJCXBhcmVudCA9IHRoaXMuZWxlbWVudC5wYXJlbnQoKTsKCgkJaWYgKCBoZWlnaHRTdHlsZSA9PT0gImZpbGwiICkgewoJCQkvLyBJRSA2IHRyZWF0cyBoZWlnaHQgbGlrZSBtaW5IZWlnaHQsIHNvIHdlIG5lZWQgdG8gdHVybiBvZmYgb3ZlcmZsb3cKCQkJLy8gaW4gb3JkZXIgdG8gZ2V0IGEgcmVsaWFibGUgaGVpZ2h0CgkJCS8vIHdlIHVzZSB0aGUgbWluSGVpZ2h0IHN1cHBvcnQgdGVzdCBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IG9ubHkKCQkJLy8gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IG1pbkhlaWdodCB3aWxsIHRyZWF0IGhlaWdodCBhcyBtaW5IZWlnaHQKCQkJaWYgKCAhJC5zdXBwb3J0Lm1pbkhlaWdodCApIHsKCQkJCW92ZXJmbG93ID0gcGFyZW50LmNzcyggIm92ZXJmbG93IiApOwoJCQkJcGFyZW50LmNzcyggIm92ZXJmbG93IiwgImhpZGRlbiIpOwoJCQl9CgkJCW1heEhlaWdodCA9IHBhcmVudC5oZWlnaHQoKTsKCQkJdGhpcy5lbGVtZW50LnNpYmxpbmdzKCAiOnZpc2libGUiICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBlbGVtID0gJCggdGhpcyApLAoJCQkJCXBvc2l0aW9uID0gZWxlbS5jc3MoICJwb3NpdGlvbiIgKTsKCgkJCQlpZiAoIHBvc2l0aW9uID09PSAiYWJzb2x1dGUiIHx8IHBvc2l0aW9uID09PSAiZml4ZWQiICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCW1heEhlaWdodCAtPSBlbGVtLm91dGVySGVpZ2h0KCB0cnVlICk7CgkJCX0pOwoJCQlpZiAoIG92ZXJmbG93ICkgewoJCQkJcGFyZW50LmNzcyggIm92ZXJmbG93Iiwgb3ZlcmZsb3cgKTsKCQkJfQoKCQkJdGhpcy5lbGVtZW50LmNoaWxkcmVuKCkubm90KCB0aGlzLnBhbmVscyApLmVhY2goZnVuY3Rpb24oKSB7CgkJCQltYXhIZWlnaHQgLT0gJCggdGhpcyApLm91dGVySGVpZ2h0KCB0cnVlICk7CgkJCX0pOwoKCQkJdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5oZWlnaHQoIE1hdGgubWF4KCAwLCBtYXhIZWlnaHQgLQoJCQkJCSQoIHRoaXMgKS5pbm5lckhlaWdodCgpICsgJCggdGhpcyApLmhlaWdodCgpICkgKTsKCQkJfSkKCQkJLmNzcyggIm92ZXJmbG93IiwgImF1dG8iICk7CgkJfSBlbHNlIGlmICggaGVpZ2h0U3R5bGUgPT09ICJhdXRvIiApIHsKCQkJbWF4SGVpZ2h0ID0gMDsKCQkJdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbigpIHsKCQkJCW1heEhlaWdodCA9IE1hdGgubWF4KCBtYXhIZWlnaHQsICQoIHRoaXMgKS5oZWlnaHQoICIiICkuaGVpZ2h0KCkgKTsKCQkJfSkuaGVpZ2h0KCBtYXhIZWlnaHQgKTsKCQl9Cgl9LAoKCV9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJYWN0aXZlID0gdGhpcy5hY3RpdmUsCgkJCWFuY2hvciA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSwKCQkJdGFiID0gYW5jaG9yLmNsb3Nlc3QoICJsaSIgKSwKCQkJY2xpY2tlZElzQWN0aXZlID0gdGFiWyAwIF0gPT09IGFjdGl2ZVsgMCBdLAoJCQljb2xsYXBzaW5nID0gY2xpY2tlZElzQWN0aXZlICYmIG9wdGlvbnMuY29sbGFwc2libGUsCgkJCXRvU2hvdyA9IGNvbGxhcHNpbmcgPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGFiICksCgkJCXRvSGlkZSA9ICFhY3RpdmUubGVuZ3RoID8gJCgpIDogdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIGFjdGl2ZSApLAoJCQlldmVudERhdGEgPSB7CgkJCQlvbGRUYWI6IGFjdGl2ZSwKCQkJCW9sZFBhbmVsOiB0b0hpZGUsCgkJCQluZXdUYWI6IGNvbGxhcHNpbmcgPyAkKCkgOiB0YWIsCgkJCQluZXdQYW5lbDogdG9TaG93CgkJCX07CgoJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCWlmICggdGFiLmhhc0NsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkgfHwKCQkJCS8vIHRhYiBpcyBhbHJlYWR5IGxvYWRpbmcKCQkJCXRhYi5oYXNDbGFzcyggInVpLXRhYnMtbG9hZGluZyIgKSB8fAoJCQkJLy8gY2FuJ3Qgc3dpdGNoIGR1cm5pbmcgYW4gYW5pbWF0aW9uCgkJCQl0aGlzLnJ1bm5pbmcgfHwKCQkJCS8vIGNsaWNrIG9uIGFjdGl2ZSBoZWFkZXIsIGJ1dCBub3QgY29sbGFwc2libGUKCQkJCSggY2xpY2tlZElzQWN0aXZlICYmICFvcHRpb25zLmNvbGxhcHNpYmxlICkgfHwKCQkJCS8vIGFsbG93IGNhbmNlbGluZyBhY3RpdmF0aW9uCgkJCQkoIHRoaXMuX3RyaWdnZXIoICJiZWZvcmVBY3RpdmF0ZSIsIGV2ZW50LCBldmVudERhdGEgKSA9PT0gZmFsc2UgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJb3B0aW9ucy5hY3RpdmUgPSBjb2xsYXBzaW5nID8gZmFsc2UgOiB0aGlzLnRhYnMuaW5kZXgoIHRhYiApOwoKCQl0aGlzLmFjdGl2ZSA9IGNsaWNrZWRJc0FjdGl2ZSA/ICQoKSA6IHRhYjsKCQlpZiAoIHRoaXMueGhyICkgewoJCQl0aGlzLnhoci5hYm9ydCgpOwoJCX0KCgkJaWYgKCAhdG9IaWRlLmxlbmd0aCAmJiAhdG9TaG93Lmxlbmd0aCApIHsKCQkJJC5lcnJvciggImpRdWVyeSBVSSBUYWJzOiBNaXNtYXRjaGluZyBmcmFnbWVudCBpZGVudGlmaWVyLiIgKTsKCQl9CgoJCWlmICggdG9TaG93Lmxlbmd0aCApIHsKCQkJdGhpcy5sb2FkKCB0aGlzLnRhYnMuaW5kZXgoIHRhYiApLCBldmVudCApOwoJCX0KCQl0aGlzLl90b2dnbGUoIGV2ZW50LCBldmVudERhdGEgKTsKCX0sCgoJLy8gaGFuZGxlcyBzaG93L2hpZGUgZm9yIHNlbGVjdGluZyB0YWJzCglfdG9nZ2xlOiBmdW5jdGlvbiggZXZlbnQsIGV2ZW50RGF0YSApIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCXRvU2hvdyA9IGV2ZW50RGF0YS5uZXdQYW5lbCwKCQkJdG9IaWRlID0gZXZlbnREYXRhLm9sZFBhbmVsOwoKCQl0aGlzLnJ1bm5pbmcgPSB0cnVlOwoKCQlmdW5jdGlvbiBjb21wbGV0ZSgpIHsKCQkJdGhhdC5ydW5uaW5nID0gZmFsc2U7CgkJCXRoYXQuX3RyaWdnZXIoICJhY3RpdmF0ZSIsIGV2ZW50LCBldmVudERhdGEgKTsKCQl9CgoJCWZ1bmN0aW9uIHNob3coKSB7CgkJCWV2ZW50RGF0YS5uZXdUYWIuY2xvc2VzdCggImxpIiApLmFkZENsYXNzKCAidWktdGFicy1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIiApOwoKCQkJaWYgKCB0b1Nob3cubGVuZ3RoICYmIHRoYXQub3B0aW9ucy5zaG93ICkgewoJCQkJdGhhdC5fc2hvdyggdG9TaG93LCB0aGF0Lm9wdGlvbnMuc2hvdywgY29tcGxldGUgKTsKCQkJfSBlbHNlIHsKCQkJCXRvU2hvdy5zaG93KCk7CgkJCQljb21wbGV0ZSgpOwoJCQl9CgkJfQoKCQkvLyBzdGFydCBvdXQgYnkgaGlkaW5nLCB0aGVuIHNob3dpbmcsIHRoZW4gY29tcGxldGluZwoJCWlmICggdG9IaWRlLmxlbmd0aCAmJiB0aGlzLm9wdGlvbnMuaGlkZSApIHsKCQkJdGhpcy5faGlkZSggdG9IaWRlLCB0aGlzLm9wdGlvbnMuaGlkZSwgZnVuY3Rpb24oKSB7CgkJCQlldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoICJsaSIgKS5yZW1vdmVDbGFzcyggInVpLXRhYnMtYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCXNob3coKTsKCQkJfSk7CgkJfSBlbHNlIHsKCQkJZXZlbnREYXRhLm9sZFRhYi5jbG9zZXN0KCAibGkiICkucmVtb3ZlQ2xhc3MoICJ1aS10YWJzLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUiICk7CgkJCXRvSGlkZS5oaWRlKCk7CgkJCXNob3coKTsKCQl9CgoJCXRvSGlkZS5hdHRyKHsKCQkJImFyaWEtZXhwYW5kZWQiOiAiZmFsc2UiLAoJCQkiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKCQl9KTsKCQlldmVudERhdGEub2xkVGFiLmF0dHIoICJhcmlhLXNlbGVjdGVkIiwgImZhbHNlIiApOwoJCS8vIElmIHdlJ3JlIHN3aXRjaGluZyB0YWJzLCByZW1vdmUgdGhlIG9sZCB0YWIgZnJvbSB0aGUgdGFiIG9yZGVyLgoJCS8vIElmIHdlJ3JlIG9wZW5pbmcgZnJvbSBjb2xsYXBzZWQgc3RhdGUsIHJlbW92ZSB0aGUgcHJldmlvdXMgdGFiIGZyb20gdGhlIHRhYiBvcmRlci4KCQkvLyBJZiB3ZSdyZSBjb2xsYXBzaW5nLCB0aGVuIGtlZXAgdGhlIGNvbGxhcHNpbmcgdGFiIGluIHRoZSB0YWIgb3JkZXIuCgkJaWYgKCB0b1Nob3cubGVuZ3RoICYmIHRvSGlkZS5sZW5ndGggKSB7CgkJCWV2ZW50RGF0YS5vbGRUYWIuYXR0ciggInRhYkluZGV4IiwgLTEgKTsKCQl9IGVsc2UgaWYgKCB0b1Nob3cubGVuZ3RoICkgewoJCQl0aGlzLnRhYnMuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS5hdHRyKCAidGFiSW5kZXgiICkgPT09IDA7CgkJCX0pCgkJCS5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCX0KCgkJdG9TaG93LmF0dHIoewoJCQkiYXJpYS1leHBhbmRlZCI6ICJ0cnVlIiwKCQkJImFyaWEtaGlkZGVuIjogImZhbHNlIgoJCX0pOwoJCWV2ZW50RGF0YS5uZXdUYWIuYXR0cih7CgkJCSJhcmlhLXNlbGVjdGVkIjogInRydWUiLAoJCQl0YWJJbmRleDogMAoJCX0pOwoJfSwKCglfYWN0aXZhdGU6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQl2YXIgYW5jaG9yLAoJCQlhY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKCBpbmRleCApOwoKCQkvLyB0cnlpbmcgdG8gYWN0aXZhdGUgdGhlIGFscmVhZHkgYWN0aXZlIHBhbmVsCgkJaWYgKCBhY3RpdmVbIDAgXSA9PT0gdGhpcy5hY3RpdmVbIDAgXSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gdHJ5aW5nIHRvIGNvbGxhcHNlLCBzaW11bGF0ZSBhIGNsaWNrIG9uIHRoZSBjdXJyZW50IGFjdGl2ZSBoZWFkZXIKCQlpZiAoICFhY3RpdmUubGVuZ3RoICkgewoJCQlhY3RpdmUgPSB0aGlzLmFjdGl2ZTsKCQl9CgoJCWFuY2hvciA9IGFjdGl2ZS5maW5kKCAiLnVpLXRhYnMtYW5jaG9yIiApWyAwIF07CgkJdGhpcy5fZXZlbnRIYW5kbGVyKHsKCQkJdGFyZ2V0OiBhbmNob3IsCgkJCWN1cnJlbnRUYXJnZXQ6IGFuY2hvciwKCQkJcHJldmVudERlZmF1bHQ6ICQubm9vcAoJCX0pOwoJfSwKCglfZmluZEFjdGl2ZTogZnVuY3Rpb24oIGluZGV4ICkgewoJCXJldHVybiBpbmRleCA9PT0gZmFsc2UgPyAkKCkgOiB0aGlzLnRhYnMuZXEoIGluZGV4ICk7Cgl9LAoKCV9nZXRJbmRleDogZnVuY3Rpb24oIGluZGV4ICkgewoJCS8vIG1ldGEtZnVuY3Rpb24gdG8gZ2l2ZSB1c2VycyBvcHRpb24gdG8gcHJvdmlkZSBhIGhyZWYgc3RyaW5nIGluc3RlYWQgb2YgYSBudW1lcmljYWwgaW5kZXguCgkJaWYgKCB0eXBlb2YgaW5kZXggPT09ICJzdHJpbmciICkgewoJCQlpbmRleCA9IHRoaXMuYW5jaG9ycy5pbmRleCggdGhpcy5hbmNob3JzLmZpbHRlciggIltocmVmJD0nIiArIGluZGV4ICsgIiddIiApICk7CgkJfQoKCQlyZXR1cm4gaW5kZXg7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMueGhyICkgewoJCQl0aGlzLnhoci5hYm9ydCgpOwoJCX0KCgkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCAidWktdGFicyB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCB1aS10YWJzLWNvbGxhcHNpYmxlIiApOwoKCQl0aGlzLnRhYmxpc3QKCQkJLnJlbW92ZUNsYXNzKCAidWktdGFicy1uYXYgdWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApOwoKCQl0aGlzLmFuY2hvcnMKCQkJLnJlbW92ZUNsYXNzKCAidWktdGFicy1hbmNob3IiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAidGFiSW5kZXgiICkKCQkJLnJlbW92ZURhdGEoICJocmVmLnRhYnMiICkKCQkJLnJlbW92ZURhdGEoICJsb2FkLnRhYnMiICkKCQkJLnJlbW92ZVVuaXF1ZUlkKCk7CgoJCXRoaXMudGFicy5hZGQoIHRoaXMucGFuZWxzICkuZWFjaChmdW5jdGlvbigpIHsKCQkJaWYgKCAkLmRhdGEoIHRoaXMsICJ1aS10YWJzLWRlc3Ryb3kiICkgKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlKCk7CgkJCX0gZWxzZSB7CgkJCQkkKCB0aGlzICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1kZWZhdWx0IHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kaXNhYmxlZCAiICsKCQkJCQkJInVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSB1aS13aWRnZXQtY29udGVudCB1aS10YWJzLWFjdGl2ZSB1aS10YWJzLXBhbmVsIiApCgkJCQkJLnJlbW92ZUF0dHIoICJ0YWJJbmRleCIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1saXZlIiApCgkJCQkJLnJlbW92ZUF0dHIoICJhcmlhLWJ1c3kiICkKCQkJCQkucmVtb3ZlQXR0ciggImFyaWEtc2VsZWN0ZWQiICkKCQkJCQkucmVtb3ZlQXR0ciggImFyaWEtbGFiZWxsZWRieSIgKQoJCQkJCS5yZW1vdmVBdHRyKCAiYXJpYS1oaWRkZW4iICkKCQkJCQkucmVtb3ZlQXR0ciggImFyaWEtZXhwYW5kZWQiICkKCQkJCQkucmVtb3ZlQXR0ciggInJvbGUiICk7CgkJCX0KCQl9KTsKCgkJdGhpcy50YWJzLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBsaSA9ICQoIHRoaXMgKSwKCQkJCXByZXYgPSBsaS5kYXRhKCAidWktdGFicy1hcmlhLWNvbnRyb2xzIiApOwoJCQlpZiAoIHByZXYgKSB7CgkJCQlsaS5hdHRyKCAiYXJpYS1jb250cm9scyIsIHByZXYgKTsKCQkJfSBlbHNlIHsKCQkJCWxpLnJlbW92ZUF0dHIoICJhcmlhLWNvbnRyb2xzIiApOwoJCQl9CgkJfSk7CgoJCXRoaXMucGFuZWxzLnNob3coKTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgIT09ICJjb250ZW50IiApIHsKCQkJdGhpcy5wYW5lbHMuY3NzKCAiaGVpZ2h0IiwgIiIgKTsKCQl9Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oIGluZGV4ICkgewoJCXZhciBkaXNhYmxlZCA9IHRoaXMub3B0aW9ucy5kaXNhYmxlZDsKCQlpZiAoIGRpc2FibGVkID09PSBmYWxzZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkgewoJCQlkaXNhYmxlZCA9IGZhbHNlOwoJCX0gZWxzZSB7CgkJCWluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7CgkJCWlmICggJC5pc0FycmF5KCBkaXNhYmxlZCApICkgewoJCQkJZGlzYWJsZWQgPSAkLm1hcCggZGlzYWJsZWQsIGZ1bmN0aW9uKCBudW0gKSB7CgkJCQkJcmV0dXJuIG51bSAhPT0gaW5kZXggPyBudW0gOiBudWxsOwoJCQkJfSk7CgkJCX0gZWxzZSB7CgkJCQlkaXNhYmxlZCA9ICQubWFwKCB0aGlzLnRhYnMsIGZ1bmN0aW9uKCBsaSwgbnVtICkgewoJCQkJCXJldHVybiBudW0gIT09IGluZGV4ID8gbnVtIDogbnVsbDsKCQkJCX0pOwoJCQl9CgkJfQoJCXRoaXMuX3NldHVwRGlzYWJsZWQoIGRpc2FibGVkICk7Cgl9LAoKCWRpc2FibGU6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQl2YXIgZGlzYWJsZWQgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7CgkJaWYgKCBkaXNhYmxlZCA9PT0gdHJ1ZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkgewoJCQlkaXNhYmxlZCA9IHRydWU7CgkJfSBlbHNlIHsKCQkJaW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTsKCQkJaWYgKCAkLmluQXJyYXkoIGluZGV4LCBkaXNhYmxlZCApICE9PSAtMSApIHsKCQkJCXJldHVybjsKCQkJfQoJCQlpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHsKCQkJCWRpc2FibGVkID0gJC5tZXJnZSggWyBpbmRleCBdLCBkaXNhYmxlZCApLnNvcnQoKTsKCQkJfSBlbHNlIHsKCQkJCWRpc2FibGVkID0gWyBpbmRleCBdOwoJCQl9CgkJfQoJCXRoaXMuX3NldHVwRGlzYWJsZWQoIGRpc2FibGVkICk7Cgl9LAoKCWxvYWQ6IGZ1bmN0aW9uKCBpbmRleCwgZXZlbnQgKSB7CgkJaW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCXRhYiA9IHRoaXMudGFicy5lcSggaW5kZXggKSwKCQkJYW5jaG9yID0gdGFiLmZpbmQoICIudWktdGFicy1hbmNob3IiICksCgkJCXBhbmVsID0gdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRhYiApLAoJCQlldmVudERhdGEgPSB7CgkJCQl0YWI6IHRhYiwKCQkJCXBhbmVsOiBwYW5lbAoJCQl9OwoKCQkvLyBub3QgcmVtb3RlCgkJaWYgKCBpc0xvY2FsKCBhbmNob3JbIDAgXSApICkgewoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLnhociA9ICQuYWpheCggdGhpcy5fYWpheFNldHRpbmdzKCBhbmNob3IsIGV2ZW50LCBldmVudERhdGEgKSApOwoKCQkvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOAoJCS8vIGpRdWVyeSA8MS44IHJldHVybnMgZmFsc2UgaWYgdGhlIHJlcXVlc3QgaXMgY2FuY2VsZWQgaW4gYmVmb3JlU2VuZCwKCQkvLyBidXQgYXMgb2YgMS44LCAkLmFqYXgoKSBhbHdheXMgcmV0dXJucyBhIGpxWEhSIG9iamVjdC4KCQlpZiAoIHRoaXMueGhyICYmIHRoaXMueGhyLnN0YXR1c1RleHQgIT09ICJjYW5jZWxlZCIgKSB7CgkJCXRhYi5hZGRDbGFzcyggInVpLXRhYnMtbG9hZGluZyIgKTsKCQkJcGFuZWwuYXR0ciggImFyaWEtYnVzeSIsICJ0cnVlIiApOwoKCQkJdGhpcy54aHIKCQkJCS5zdWNjZXNzKGZ1bmN0aW9uKCByZXNwb25zZSApIHsKCQkJCQkvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOAoJCQkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExNzc4CgkJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkJcGFuZWwuaHRtbCggcmVzcG9uc2UgKTsKCQkJCQkJdGhhdC5fdHJpZ2dlciggImxvYWQiLCBldmVudCwgZXZlbnREYXRhICk7CgkJCQkJfSwgMSApOwoJCQkJfSkKCQkJCS5jb21wbGV0ZShmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHsKCQkJCQkvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOAoJCQkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExNzc4CgkJCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkJaWYgKCBzdGF0dXMgPT09ICJhYm9ydCIgKSB7CgkJCQkJCQl0aGF0LnBhbmVscy5zdG9wKCBmYWxzZSwgdHJ1ZSApOwoJCQkJCQl9CgoJCQkJCQl0YWIucmVtb3ZlQ2xhc3MoICJ1aS10YWJzLWxvYWRpbmciICk7CgkJCQkJCXBhbmVsLnJlbW92ZUF0dHIoICJhcmlhLWJ1c3kiICk7CgoJCQkJCQlpZiAoIGpxWEhSID09PSB0aGF0LnhociApIHsKCQkJCQkJCWRlbGV0ZSB0aGF0LnhocjsKCQkJCQkJfQoJCQkJCX0sIDEgKTsKCQkJCX0pOwoJCX0KCX0sCgoJLy8gVE9ETzogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gaW4gMS4xMCB3aGVuIGFqYXhPcHRpb25zIGlzIHJlbW92ZWQKCV9hamF4U2V0dGluZ3M6IGZ1bmN0aW9uKCBhbmNob3IsIGV2ZW50LCBldmVudERhdGEgKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoJCXJldHVybiB7CgkJCXVybDogYW5jaG9yLmF0dHIoICJocmVmIiApLAoJCQliZWZvcmVTZW5kOiBmdW5jdGlvbigganFYSFIsIHNldHRpbmdzICkgewoJCQkJcmV0dXJuIHRoYXQuX3RyaWdnZXIoICJiZWZvcmVMb2FkIiwgZXZlbnQsCgkJCQkJJC5leHRlbmQoIHsganFYSFIgOiBqcVhIUiwgYWpheFNldHRpbmdzOiBzZXR0aW5ncyB9LCBldmVudERhdGEgKSApOwoJCQl9CgkJfTsKCX0sCgoJX2dldFBhbmVsRm9yVGFiOiBmdW5jdGlvbiggdGFiICkgewoJCXZhciBpZCA9ICQoIHRhYiApLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApOwoJCXJldHVybiB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5fc2FuaXRpemVTZWxlY3RvciggIiMiICsgaWQgKSApOwoJfQp9KTsKCi8vIERFUFJFQ0FURUQKaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7CgoJLy8gaGVscGVyIG1ldGhvZCBmb3IgYSBsb3Qgb2YgdGhlIGJhY2sgY29tcGF0IGV4dGVuc2lvbnMKCSQudWkudGFicy5wcm90b3R5cGUuX3VpID0gZnVuY3Rpb24oIHRhYiwgcGFuZWwgKSB7CgkJcmV0dXJuIHsKCQkJdGFiOiB0YWIsCgkJCXBhbmVsOiBwYW5lbCwKCQkJaW5kZXg6IHRoaXMuYW5jaG9ycy5pbmRleCggdGFiICkKCQl9OwoJfTsKCgkvLyB1cmwgbWV0aG9kCgkkLndpZGdldCggInVpLnRhYnMiLCAkLnVpLnRhYnMsIHsKCQl1cmw6IGZ1bmN0aW9uKCBpbmRleCwgdXJsICkgewoJCQl0aGlzLmFuY2hvcnMuZXEoIGluZGV4ICkuYXR0ciggImhyZWYiLCB1cmwgKTsKCQl9Cgl9KTsKCgkvLyBUT0RPOiBSZW1vdmUgX2FqYXhTZXR0aW5ncygpIG1ldGhvZCB3aGVuIHJlbW92aW5nIHRoaXMgZXh0ZW5zaW9uCgkvLyBhamF4T3B0aW9ucyBhbmQgY2FjaGUgb3B0aW9ucwoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQlhamF4T3B0aW9uczogbnVsbCwKCQkJY2FjaGU6IGZhbHNlCgkJfSwKCgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3N1cGVyKCk7CgoJCQl2YXIgdGhhdCA9IHRoaXM7CgoJCQl0aGlzLl9vbih7IHRhYnNiZWZvcmVsb2FkOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJLy8gdGFiIGlzIGFscmVhZHkgY2FjaGVkCgkJCQlpZiAoICQuZGF0YSggdWkudGFiWyAwIF0sICJjYWNoZS50YWJzIiApICkgewoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXVpLmpxWEhSLnN1Y2Nlc3MoZnVuY3Rpb24oKSB7CgkJCQkJaWYgKCB0aGF0Lm9wdGlvbnMuY2FjaGUgKSB7CgkJCQkJCSQuZGF0YSggdWkudGFiWyAwIF0sICJjYWNoZS50YWJzIiwgdHJ1ZSApOwoJCQkJCX0KCQkJCX0pOwoJCQl9fSk7CgkJfSwKCgkJX2FqYXhTZXR0aW5nczogZnVuY3Rpb24oIGFuY2hvciwgZXZlbnQsIHVpICkgewoJCQl2YXIgYWpheE9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuYWpheE9wdGlvbnM7CgkJCXJldHVybiAkLmV4dGVuZCgge30sIGFqYXhPcHRpb25zLCB7CgkJCQllcnJvcjogZnVuY3Rpb24oIHhociwgc3RhdHVzICkgewoJCQkJCXRyeSB7CgkJCQkJCS8vIFBhc3NpbmcgaW5kZXggYXZvaWQgYSByYWNlIGNvbmRpdGlvbiB3aGVuIHRoaXMgbWV0aG9kIGlzCgkJCQkJCS8vIGNhbGxlZCBhZnRlciB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgYW5vdGhlciB0YWIuCgkJCQkJCS8vIFBhc3MgdGhlIGFuY2hvciB0aGF0IGluaXRpYXRlZCB0aGlzIHJlcXVlc3QgYWxsb3dzCgkJCQkJCS8vIGxvYWRFcnJvciB0byBtYW5pcHVsYXRlIHRoZSB0YWIgY29udGVudCBwYW5lbCB2aWEgJChhLmhhc2gpCgkJCQkJCWFqYXhPcHRpb25zLmVycm9yKAoJCQkJCQkJeGhyLCBzdGF0dXMsIHVpLnRhYi5jbG9zZXN0KCAibGkiICkuaW5kZXgoKSwgdWkudGFiWyAwIF0gKTsKCQkJCQl9CgkJCQkJY2F0Y2ggKCBlcnJvciApIHt9CgkJCQl9CgkJCX0sIHRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApICk7CgkJfSwKCgkJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCS8vIHJlc2V0IGNhY2hlIGlmIHN3aXRjaGluZyBmcm9tIGNhY2hlZCB0byBub3QgY2FjaGVkCgkJCWlmICgga2V5ID09PSAiY2FjaGUiICYmIHZhbHVlID09PSBmYWxzZSApIHsKCQkJCXRoaXMuYW5jaG9ycy5yZW1vdmVEYXRhKCAiY2FjaGUudGFicyIgKTsKCQkJfQoJCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApOwoJCX0sCgoJCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQkJdGhpcy5hbmNob3JzLnJlbW92ZURhdGEoICJjYWNoZS50YWJzIiApOwoJCQl0aGlzLl9zdXBlcigpOwoJCX0sCgoJCXVybDogZnVuY3Rpb24oIGluZGV4ICl7CgkJCXRoaXMuYW5jaG9ycy5lcSggaW5kZXggKS5yZW1vdmVEYXRhKCAiY2FjaGUudGFicyIgKTsKCQkJdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7CgkJfQoJfSk7CgoJLy8gYWJvcnQgbWV0aG9kCgkkLndpZGdldCggInVpLnRhYnMiLCAkLnVpLnRhYnMsIHsKCQlhYm9ydDogZnVuY3Rpb24oKSB7CgkJCWlmICggdGhpcy54aHIgKSB7CgkJCQl0aGlzLnhoci5hYm9ydCgpOwoJCQl9CgkJfQoJfSk7CgoJLy8gc3Bpbm5lcgoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQlzcGlubmVyOiAiPGVtPkxvYWRpbmcmIzgyMzA7PC9lbT4iCgkJfSwKCQlfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJdGhpcy5fb24oewoJCQkJdGFic2JlZm9yZWxvYWQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQkJLy8gRG9uJ3QgcmVhY3QgdG8gbmVzdGVkIHRhYnMgb3IgdGFicyB0aGF0IGRvbid0IHVzZSBhIHNwaW5uZXIKCQkJCQlpZiAoIGV2ZW50LnRhcmdldCAhPT0gdGhpcy5lbGVtZW50WyAwIF0gfHwKCQkJCQkJCSF0aGlzLm9wdGlvbnMuc3Bpbm5lciApIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCgkJCQkJdmFyIHNwYW4gPSB1aS50YWIuZmluZCggInNwYW4iICksCgkJCQkJCWh0bWwgPSBzcGFuLmh0bWwoKTsKCQkJCQlzcGFuLmh0bWwoIHRoaXMub3B0aW9ucy5zcGlubmVyICk7CgkJCQkJdWkuanFYSFIuY29tcGxldGUoZnVuY3Rpb24oKSB7CgkJCQkJCXNwYW4uaHRtbCggaHRtbCApOwoJCQkJCX0pOwoJCQkJfQoJCQl9KTsKCQl9Cgl9KTsKCgkvLyBlbmFibGUvZGlzYWJsZSBldmVudHMKCSQud2lkZ2V0KCAidWkudGFicyIsICQudWkudGFicywgewoJCW9wdGlvbnM6IHsKCQkJZW5hYmxlOiBudWxsLAoJCQlkaXNhYmxlOiBudWxsCgkJfSwKCgkJZW5hYmxlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQkJdHJpZ2dlcjsKCgkJCWlmICggaW5kZXggJiYgb3B0aW9ucy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fAoJCQkJCSggJC5pc0FycmF5KCBvcHRpb25zLmRpc2FibGVkICkgJiYgJC5pbkFycmF5KCBpbmRleCwgb3B0aW9ucy5kaXNhYmxlZCApICE9PSAtMSApICkgewoJCQkJdHJpZ2dlciA9IHRydWU7CgkJCX0KCgkJCXRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApOwoKCQkJaWYgKCB0cmlnZ2VyICkgewoJCQkJdGhpcy5fdHJpZ2dlciggImVuYWJsZSIsIG51bGwsIHRoaXMuX3VpKCB0aGlzLmFuY2hvcnNbIGluZGV4IF0sIHRoaXMucGFuZWxzWyBpbmRleCBdICkgKTsKCQkJfQoJCX0sCgoJCWRpc2FibGU6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCQl0cmlnZ2VyOwoKCQkJaWYgKCBpbmRleCAmJiBvcHRpb25zLmRpc2FibGVkID09PSBmYWxzZSB8fAoJCQkJCSggJC5pc0FycmF5KCBvcHRpb25zLmRpc2FibGVkICkgJiYgJC5pbkFycmF5KCBpbmRleCwgb3B0aW9ucy5kaXNhYmxlZCApID09PSAtMSApICkgewoJCQkJdHJpZ2dlciA9IHRydWU7CgkJCX0KCgkJCXRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApOwoKCQkJaWYgKCB0cmlnZ2VyICkgewoJCQkJdGhpcy5fdHJpZ2dlciggImRpc2FibGUiLCBudWxsLCB0aGlzLl91aSggdGhpcy5hbmNob3JzWyBpbmRleCBdLCB0aGlzLnBhbmVsc1sgaW5kZXggXSApICk7CgkJCX0KCQl9Cgl9KTsKCgkvLyBhZGQvcmVtb3ZlIG1ldGhvZHMgYW5kIGV2ZW50cwoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQlhZGQ6IG51bGwsCgkJCXJlbW92ZTogbnVsbCwKCQkJdGFiVGVtcGxhdGU6ICI8bGk+PGEgaHJlZj0nI3tocmVmfSc+PHNwYW4+I3tsYWJlbH08L3NwYW4+PC9hPjwvbGk+IgoJCX0sCgoJCWFkZDogZnVuY3Rpb24oIHVybCwgbGFiZWwsIGluZGV4ICkgewoJCQlpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7CgkJCQlpbmRleCA9IHRoaXMuYW5jaG9ycy5sZW5ndGg7CgkJCX0KCgkJCXZhciBkb0luc2VydEFmdGVyLCBwYW5lbCwKCQkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCQlsaSA9ICQoIG9wdGlvbnMudGFiVGVtcGxhdGUKCQkJCQkucmVwbGFjZSggLyNce2hyZWZcfS9nLCB1cmwgKQoJCQkJCS5yZXBsYWNlKCAvI1x7bGFiZWxcfS9nLCBsYWJlbCApICksCgkJCQlpZCA9ICF1cmwuaW5kZXhPZiggIiMiICkgPwoJCQkJCXVybC5yZXBsYWNlKCAiIyIsICIiICkgOgoJCQkJCXRoaXMuX3RhYklkKCBsaSApOwoKCQkJbGkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3AiICkuZGF0YSggInVpLXRhYnMtZGVzdHJveSIsIHRydWUgKTsKCQkJbGkuYXR0ciggImFyaWEtY29udHJvbHMiLCBpZCApOwoKCQkJZG9JbnNlcnRBZnRlciA9IGluZGV4ID49IHRoaXMudGFicy5sZW5ndGg7CgoJCQkvLyB0cnkgdG8gZmluZCBhbiBleGlzdGluZyBlbGVtZW50IGJlZm9yZSBjcmVhdGluZyBhIG5ldyBvbmUKCQkJcGFuZWwgPSB0aGlzLmVsZW1lbnQuZmluZCggIiMiICsgaWQgKTsKCQkJaWYgKCAhcGFuZWwubGVuZ3RoICkgewoJCQkJcGFuZWwgPSB0aGlzLl9jcmVhdGVQYW5lbCggaWQgKTsKCQkJCWlmICggZG9JbnNlcnRBZnRlciApIHsKCQkJCQlpZiAoIGluZGV4ID4gMCApIHsKCQkJCQkJcGFuZWwuaW5zZXJ0QWZ0ZXIoIHRoaXMucGFuZWxzLmVxKCAtMSApICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJcGFuZWwuYXBwZW5kVG8oIHRoaXMuZWxlbWVudCApOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJcGFuZWwuaW5zZXJ0QmVmb3JlKCB0aGlzLnBhbmVsc1sgaW5kZXggXSApOwoJCQkJfQoJCQl9CgkJCXBhbmVsLmFkZENsYXNzKCAidWktdGFicy1wYW5lbCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIiApLmhpZGUoKTsKCgkJCWlmICggZG9JbnNlcnRBZnRlciApIHsKCQkJCWxpLmFwcGVuZFRvKCB0aGlzLnRhYmxpc3QgKTsKCQkJfSBlbHNlIHsKCQkJCWxpLmluc2VydEJlZm9yZSggdGhpcy50YWJzWyBpbmRleCBdICk7CgkJCX0KCgkJCW9wdGlvbnMuZGlzYWJsZWQgPSAkLm1hcCggb3B0aW9ucy5kaXNhYmxlZCwgZnVuY3Rpb24oIG4gKSB7CgkJCQlyZXR1cm4gbiA+PSBpbmRleCA/ICsrbiA6IG47CgkJCX0pOwoKCQkJdGhpcy5yZWZyZXNoKCk7CgkJCWlmICggdGhpcy50YWJzLmxlbmd0aCA9PT0gMSAmJiBvcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7CgkJCQl0aGlzLm9wdGlvbiggImFjdGl2ZSIsIDAgKTsKCQkJfQoKCQkJdGhpcy5fdHJpZ2dlciggImFkZCIsIG51bGwsIHRoaXMuX3VpKCB0aGlzLmFuY2hvcnNbIGluZGV4IF0sIHRoaXMucGFuZWxzWyBpbmRleCBdICkgKTsKCQkJcmV0dXJuIHRoaXM7CgkJfSwKCgkJcmVtb3ZlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJCWluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7CgkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQkJdGFiID0gdGhpcy50YWJzLmVxKCBpbmRleCApLnJlbW92ZSgpLAoJCQkJcGFuZWwgPSB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGFiICkucmVtb3ZlKCk7CgoJCQkvLyBJZiBzZWxlY3RlZCB0YWIgd2FzIHJlbW92ZWQgZm9jdXMgdGFiIHRvIHRoZSByaWdodCBvcgoJCQkvLyBpbiBjYXNlIHRoZSBsYXN0IHRhYiB3YXMgcmVtb3ZlZCB0aGUgdGFiIHRvIHRoZSBsZWZ0LgoJCQkvLyBXZSBjaGVjayBmb3IgbW9yZSB0aGFuIDIgdGFicywgYmVjYXVzZSBpZiB0aGVyZSBhcmUgb25seSAyLAoJCQkvLyB0aGVuIHdoZW4gd2UgcmVtb3ZlIHRoaXMgdGFiLCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lIHRhYiBsZWZ0CgkJCS8vIHNvIHdlIGRvbid0IG5lZWQgdG8gZGV0ZWN0IHdoaWNoIHRhYiB0byBhY3RpdmF0ZS4KCQkJaWYgKCB0YWIuaGFzQ2xhc3MoICJ1aS10YWJzLWFjdGl2ZSIgKSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoID4gMiApIHsKCQkJCXRoaXMuX2FjdGl2YXRlKCBpbmRleCArICggaW5kZXggKyAxIDwgdGhpcy5hbmNob3JzLmxlbmd0aCA/IDEgOiAtMSApICk7CgkJCX0KCgkJCW9wdGlvbnMuZGlzYWJsZWQgPSAkLm1hcCgKCQkJCSQuZ3JlcCggb3B0aW9ucy5kaXNhYmxlZCwgZnVuY3Rpb24oIG4gKSB7CgkJCQkJcmV0dXJuIG4gIT09IGluZGV4OwoJCQkJfSksCgkJCQlmdW5jdGlvbiggbiApIHsKCQkJCQlyZXR1cm4gbiA+PSBpbmRleCA/IC0tbiA6IG47CgkJCQl9KTsKCgkJCXRoaXMucmVmcmVzaCgpOwoKCQkJdGhpcy5fdHJpZ2dlciggInJlbW92ZSIsIG51bGwsIHRoaXMuX3VpKCB0YWIuZmluZCggImEiIClbIDAgXSwgcGFuZWxbIDAgXSApICk7CgkJCXJldHVybiB0aGlzOwoJCX0KCX0pOwoKCS8vIGxlbmd0aCBtZXRob2QKCSQud2lkZ2V0KCAidWkudGFicyIsICQudWkudGFicywgewoJCWxlbmd0aDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLmFuY2hvcnMubGVuZ3RoOwoJCX0KCX0pOwoKCS8vIHBhbmVsIGlkcyAoaWRQcmVmaXggb3B0aW9uICsgdGl0bGUgYXR0cmlidXRlKQoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQlpZFByZWZpeDogInVpLXRhYnMtIgoJCX0sCgoJCV90YWJJZDogZnVuY3Rpb24oIHRhYiApIHsKCQkJdmFyIGEgPSB0YWIuaXMoICJsaSIgKSA/IHRhYi5maW5kKCAiYVtocmVmXSIgKSA6IHRhYjsKCQkJYSA9IGFbMF07CgkJCXJldHVybiAkKCBhICkuY2xvc2VzdCggImxpIiApLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApIHx8CgkJCQlhLnRpdGxlICYmIGEudGl0bGUucmVwbGFjZSggL1xzL2csICJfIiApLnJlcGxhY2UoIC9bXlx3XHUwMGMwLVx1RkZGRlwtXS9nLCAiIiApIHx8CgkJCQl0aGlzLm9wdGlvbnMuaWRQcmVmaXggKyBnZXROZXh0VGFiSWQoKTsKCQl9Cgl9KTsKCgkvLyBfY3JlYXRlUGFuZWwgbWV0aG9kCgkkLndpZGdldCggInVpLnRhYnMiLCAkLnVpLnRhYnMsIHsKCQlvcHRpb25zOiB7CgkJCXBhbmVsVGVtcGxhdGU6ICI8ZGl2PjwvZGl2PiIKCQl9LAoKCQlfY3JlYXRlUGFuZWw6IGZ1bmN0aW9uKCBpZCApIHsKCQkJcmV0dXJuICQoIHRoaXMub3B0aW9ucy5wYW5lbFRlbXBsYXRlICkKCQkJCS5hdHRyKCAiaWQiLCBpZCApCgkJCQkuYWRkQ2xhc3MoICJ1aS10YWJzLXBhbmVsIHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iICkKCQkJCS5kYXRhKCAidWktdGFicy1kZXN0cm95IiwgdHJ1ZSApOwoJCX0KCX0pOwoKCS8vIHNlbGVjdGVkIG9wdGlvbgoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoJCQlpZiAoIG9wdGlvbnMuYWN0aXZlID09PSBudWxsICYmIG9wdGlvbnMuc2VsZWN0ZWQgIT09IHVuZGVmaW5lZCApIHsKCQkJCW9wdGlvbnMuYWN0aXZlID0gb3B0aW9ucy5zZWxlY3RlZCA9PT0gLTEgPyBmYWxzZSA6IG9wdGlvbnMuc2VsZWN0ZWQ7CgkJCX0KCQkJdGhpcy5fc3VwZXIoKTsKCQkJb3B0aW9ucy5zZWxlY3RlZCA9IG9wdGlvbnMuYWN0aXZlOwoJCQlpZiAoIG9wdGlvbnMuc2VsZWN0ZWQgPT09IGZhbHNlICkgewoJCQkJb3B0aW9ucy5zZWxlY3RlZCA9IC0xOwoJCQl9CgkJfSwKCgkJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCWlmICgga2V5ICE9PSAic2VsZWN0ZWQiICkgewoJCQkJcmV0dXJuIHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7CgkJCX0KCgkJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoJCQl0aGlzLl9zdXBlciggImFjdGl2ZSIsIHZhbHVlID09PSAtMSA/IGZhbHNlIDogdmFsdWUgKTsKCQkJb3B0aW9ucy5zZWxlY3RlZCA9IG9wdGlvbnMuYWN0aXZlOwoJCQlpZiAoIG9wdGlvbnMuc2VsZWN0ZWQgPT09IGZhbHNlICkgewoJCQkJb3B0aW9ucy5zZWxlY3RlZCA9IC0xOwoJCQl9CgkJfSwKCgkJX2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApOwoJCQl0aGlzLm9wdGlvbnMuc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnMuYWN0aXZlOwoJCQlpZiAoIHRoaXMub3B0aW9ucy5zZWxlY3RlZCA9PT0gZmFsc2UgKSB7CgkJCQl0aGlzLm9wdGlvbnMuc2VsZWN0ZWQgPSAtMTsKCQkJfQoJCX0KCX0pOwoKCS8vIHNob3cgYW5kIHNlbGVjdCBldmVudAoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQlzaG93OiBudWxsLAoJCQlzZWxlY3Q6IG51bGwKCQl9LAoJCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9zdXBlcigpOwoJCQlpZiAoIHRoaXMub3B0aW9ucy5hY3RpdmUgIT09IGZhbHNlICkgewoJCQkJdGhpcy5fdHJpZ2dlciggInNob3ciLCBudWxsLCB0aGlzLl91aSgKCQkJCQl0aGlzLmFjdGl2ZS5maW5kKCAiLnVpLXRhYnMtYW5jaG9yIiApWyAwIF0sCgkJCQkJdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlIClbIDAgXSApICk7CgkJCX0KCQl9LAoJCV90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGRhdGEgKSB7CgkJCXZhciB0YWIsIHBhbmVsLAoJCQkJcmV0ID0gdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7CgoJCQlpZiAoICFyZXQgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCWlmICggdHlwZSA9PT0gImJlZm9yZUFjdGl2YXRlIiApIHsKCQkJCXRhYiA9IGRhdGEubmV3VGFiLmxlbmd0aCA/IGRhdGEubmV3VGFiIDogZGF0YS5vbGRUYWI7CgkJCQlwYW5lbCA9IGRhdGEubmV3UGFuZWwubGVuZ3RoID8gZGF0YS5uZXdQYW5lbCA6IGRhdGEub2xkUGFuZWw7CgkJCQlyZXQgPSB0aGlzLl9zdXBlciggInNlbGVjdCIsIGV2ZW50LCB7CgkJCQkJdGFiOiB0YWIuZmluZCggIi51aS10YWJzLWFuY2hvciIgKVsgMF0sCgkJCQkJcGFuZWw6IHBhbmVsWyAwIF0sCgkJCQkJaW5kZXg6IHRhYi5jbG9zZXN0KCAibGkiICkuaW5kZXgoKQoJCQkJfSk7CgkJCX0gZWxzZSBpZiAoIHR5cGUgPT09ICJhY3RpdmF0ZSIgJiYgZGF0YS5uZXdUYWIubGVuZ3RoICkgewoJCQkJcmV0ID0gdGhpcy5fc3VwZXIoICJzaG93IiwgZXZlbnQsIHsKCQkJCQl0YWI6IGRhdGEubmV3VGFiLmZpbmQoICIudWktdGFicy1hbmNob3IiIClbIDAgXSwKCQkJCQlwYW5lbDogZGF0YS5uZXdQYW5lbFsgMCBdLAoJCQkJCWluZGV4OiBkYXRhLm5ld1RhYi5jbG9zZXN0KCAibGkiICkuaW5kZXgoKQoJCQkJfSk7CgkJCX0KCQkJcmV0dXJuIHJldDsKCQl9Cgl9KTsKCgkvLyBzZWxlY3QgbWV0aG9kCgkkLndpZGdldCggInVpLnRhYnMiLCAkLnVpLnRhYnMsIHsKCQlzZWxlY3Q6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQkJaW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTsKCQkJaWYgKCBpbmRleCA9PT0gLTEgKSB7CgkJCQlpZiAoIHRoaXMub3B0aW9ucy5jb2xsYXBzaWJsZSAmJiB0aGlzLm9wdGlvbnMuc2VsZWN0ZWQgIT09IC0xICkgewoJCQkJCWluZGV4ID0gdGhpcy5vcHRpb25zLnNlbGVjdGVkOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCX0KCQkJdGhpcy5hbmNob3JzLmVxKCBpbmRleCApLnRyaWdnZXIoIHRoaXMub3B0aW9ucy5ldmVudCArIHRoaXMuZXZlbnROYW1lc3BhY2UgKTsKCQl9Cgl9KTsKCgkvLyBjb29raWUgb3B0aW9uCgkoZnVuY3Rpb24oKSB7CgoJdmFyIGxpc3RJZCA9IDA7CgoJJC53aWRnZXQoICJ1aS50YWJzIiwgJC51aS50YWJzLCB7CgkJb3B0aW9uczogewoJCQljb29raWU6IG51bGwgLy8gZS5nLiB7IGV4cGlyZXM6IDcsIHBhdGg6ICcvJywgZG9tYWluOiAnanF1ZXJ5LmNvbScsIHNlY3VyZTogdHJ1ZSB9CgkJfSwKCQlfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCQlhY3RpdmU7CgkJCWlmICggb3B0aW9ucy5hY3RpdmUgPT0gbnVsbCAmJiBvcHRpb25zLmNvb2tpZSApIHsKCQkJCWFjdGl2ZSA9IHBhcnNlSW50KCB0aGlzLl9jb29raWUoKSwgMTAgKTsKCQkJCWlmICggYWN0aXZlID09PSAtMSApIHsKCQkJCQlhY3RpdmUgPSBmYWxzZTsKCQkJCX0KCQkJCW9wdGlvbnMuYWN0aXZlID0gYWN0aXZlOwoJCQl9CgkJCXRoaXMuX3N1cGVyKCk7CgkJfSwKCQlfY29va2llOiBmdW5jdGlvbiggYWN0aXZlICkgewoJCQl2YXIgY29va2llID0gWyB0aGlzLmNvb2tpZSB8fAoJCQkJKCB0aGlzLmNvb2tpZSA9IHRoaXMub3B0aW9ucy5jb29raWUubmFtZSB8fCAidWktdGFicy0iICsgKCsrbGlzdElkKSApIF07CgkJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJCWNvb2tpZS5wdXNoKCBhY3RpdmUgPT09IGZhbHNlID8gLTEgOiBhY3RpdmUgKTsKCQkJCWNvb2tpZS5wdXNoKCB0aGlzLm9wdGlvbnMuY29va2llICk7CgkJCX0KCQkJcmV0dXJuICQuY29va2llLmFwcGx5KCBudWxsLCBjb29raWUgKTsKCQl9LAoJCV9yZWZyZXNoOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMuY29va2llICkgewoJCQkJdGhpcy5fY29va2llKCB0aGlzLm9wdGlvbnMuYWN0aXZlLCB0aGlzLm9wdGlvbnMuY29va2llICk7CgkJCX0KCQl9LAoJCV9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMuY29va2llICkgewoJCQkJdGhpcy5fY29va2llKCB0aGlzLm9wdGlvbnMuYWN0aXZlLCB0aGlzLm9wdGlvbnMuY29va2llICk7CgkJCX0KCQl9LAoJCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMuY29va2llICkgewoJCQkJdGhpcy5fY29va2llKCBudWxsLCB0aGlzLm9wdGlvbnMuY29va2llICk7CgkJCX0KCQl9Cgl9KTsKCgl9KSgpOwoKCS8vIGxvYWQgZXZlbnQKCSQud2lkZ2V0KCAidWkudGFicyIsICQudWkudGFicywgewoJCV90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGRhdGEgKSB7CgkJCXZhciBfZGF0YSA9ICQuZXh0ZW5kKCB7fSwgZGF0YSApOwoJCQlpZiAoIHR5cGUgPT09ICJsb2FkIiApIHsKCQkJCV9kYXRhLnBhbmVsID0gX2RhdGEucGFuZWxbIDAgXTsKCQkJCV9kYXRhLnRhYiA9IF9kYXRhLnRhYi5maW5kKCAiLnVpLXRhYnMtYW5jaG9yIiApWyAwIF07CgkJCX0KCQkJcmV0dXJuIHRoaXMuX3N1cGVyKCB0eXBlLCBldmVudCwgX2RhdGEgKTsKCQl9Cgl9KTsKCgkvLyBmeCBvcHRpb24KCS8vIFRoZSBuZXcgYW5pbWF0aW9uIG9wdGlvbnMgKHNob3csIGhpZGUpIGNvbmZsaWN0IHdpdGggdGhlIG9sZCBzaG93IGNhbGxiYWNrLgoJLy8gVGhlIG9sZCBmeCBvcHRpb24gd2lucyBvdmVyIHNob3cvaGlkZSBhbnl3YXkgKGFsd2F5cyBmYXZvciBiYWNrLWNvbXBhdCkuCgkvLyBJZiBhIHVzZXIgd2FudHMgdG8gdXNlIHRoZSBuZXcgYW5pbWF0aW9uIEFQSSwgdGhleSBtdXN0IGdpdmUgdXAgdGhlIG9sZCBBUEkuCgkkLndpZGdldCggInVpLnRhYnMiLCAkLnVpLnRhYnMsIHsKCQlvcHRpb25zOiB7CgkJCWZ4OiBudWxsIC8vIGUuZy4geyBoZWlnaHQ6ICJ0b2dnbGUiLCBvcGFjaXR5OiAidG9nZ2xlIiwgZHVyYXRpb246IDIwMCB9CgkJfSwKCgkJX2dldEZ4OiBmdW5jdGlvbigpIHsKCQkJdmFyIGhpZGUsIHNob3csCgkJCQlmeCA9IHRoaXMub3B0aW9ucy5meDsKCgkJCWlmICggZnggKSB7CgkJCQlpZiAoICQuaXNBcnJheSggZnggKSApIHsKCQkJCQloaWRlID0gZnhbIDAgXTsKCQkJCQlzaG93ID0gZnhbIDEgXTsKCQkJCX0gZWxzZSB7CgkJCQkJaGlkZSA9IHNob3cgPSBmeDsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuIGZ4ID8geyBzaG93OiBzaG93LCBoaWRlOiBoaWRlIH0gOiBudWxsOwoJCX0sCgoJCV90b2dnbGU6IGZ1bmN0aW9uKCBldmVudCwgZXZlbnREYXRhICkgewoJCQl2YXIgdGhhdCA9IHRoaXMsCgkJCQl0b1Nob3cgPSBldmVudERhdGEubmV3UGFuZWwsCgkJCQl0b0hpZGUgPSBldmVudERhdGEub2xkUGFuZWwsCgkJCQlmeCA9IHRoaXMuX2dldEZ4KCk7CgoJCQlpZiAoICFmeCApIHsKCQkJCXJldHVybiB0aGlzLl9zdXBlciggZXZlbnQsIGV2ZW50RGF0YSApOwoJCQl9CgoJCQl0aGF0LnJ1bm5pbmcgPSB0cnVlOwoKCQkJZnVuY3Rpb24gY29tcGxldGUoKSB7CgkJCQl0aGF0LnJ1bm5pbmcgPSBmYWxzZTsKCQkJCXRoYXQuX3RyaWdnZXIoICJhY3RpdmF0ZSIsIGV2ZW50LCBldmVudERhdGEgKTsKCQkJfQoKCQkJZnVuY3Rpb24gc2hvdygpIHsKCQkJCWV2ZW50RGF0YS5uZXdUYWIuY2xvc2VzdCggImxpIiApLmFkZENsYXNzKCAidWktdGFicy1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIiApOwoKCQkJCWlmICggdG9TaG93Lmxlbmd0aCAmJiBmeC5zaG93ICkgewoJCQkJCXRvU2hvdwoJCQkJCQkuYW5pbWF0ZSggZnguc2hvdywgZnguc2hvdy5kdXJhdGlvbiwgZnVuY3Rpb24oKSB7CgkJCQkJCQljb21wbGV0ZSgpOwoJCQkJCQl9KTsKCQkJCX0gZWxzZSB7CgkJCQkJdG9TaG93LnNob3coKTsKCQkJCQljb21wbGV0ZSgpOwoJCQkJfQoJCQl9CgoJCQkvLyBzdGFydCBvdXQgYnkgaGlkaW5nLCB0aGVuIHNob3dpbmcsIHRoZW4gY29tcGxldGluZwoJCQlpZiAoIHRvSGlkZS5sZW5ndGggJiYgZnguaGlkZSApIHsKCQkJCXRvSGlkZS5hbmltYXRlKCBmeC5oaWRlLCBmeC5oaWRlLmR1cmF0aW9uLCBmdW5jdGlvbigpIHsKCQkJCQlldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoICJsaSIgKS5yZW1vdmVDbGFzcyggInVpLXRhYnMtYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCQlzaG93KCk7CgkJCQl9KTsKCQkJfSBlbHNlIHsKCQkJCWV2ZW50RGF0YS5vbGRUYWIuY2xvc2VzdCggImxpIiApLnJlbW92ZUNsYXNzKCAidWktdGFicy1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIiApOwoJCQkJdG9IaWRlLmhpZGUoKTsKCQkJCXNob3coKTsKCQkJfQoJCX0KCX0pOwp9Cgp9KSggalF1ZXJ5ICk7CihmdW5jdGlvbiggJCApIHsKCnZhciBpbmNyZW1lbnRzID0gMDsKCmZ1bmN0aW9uIGFkZERlc2NyaWJlZEJ5KCBlbGVtLCBpZCApIHsKCXZhciBkZXNjcmliZWRieSA9IChlbGVtLmF0dHIoICJhcmlhLWRlc2NyaWJlZGJ5IiApIHx8ICIiKS5zcGxpdCggL1xzKy8gKTsKCWRlc2NyaWJlZGJ5LnB1c2goIGlkICk7CgllbGVtCgkJLmRhdGEoICJ1aS10b29sdGlwLWlkIiwgaWQgKQoJCS5hdHRyKCAiYXJpYS1kZXNjcmliZWRieSIsICQudHJpbSggZGVzY3JpYmVkYnkuam9pbiggIiAiICkgKSApOwp9CgpmdW5jdGlvbiByZW1vdmVEZXNjcmliZWRCeSggZWxlbSApIHsKCXZhciBpZCA9IGVsZW0uZGF0YSggInVpLXRvb2x0aXAtaWQiICksCgkJZGVzY3JpYmVkYnkgPSAoZWxlbS5hdHRyKCAiYXJpYS1kZXNjcmliZWRieSIgKSB8fCAiIikuc3BsaXQoIC9ccysvICksCgkJaW5kZXggPSAkLmluQXJyYXkoIGlkLCBkZXNjcmliZWRieSApOwoJaWYgKCBpbmRleCAhPT0gLTEgKSB7CgkJZGVzY3JpYmVkYnkuc3BsaWNlKCBpbmRleCwgMSApOwoJfQoKCWVsZW0ucmVtb3ZlRGF0YSggInVpLXRvb2x0aXAtaWQiICk7CglkZXNjcmliZWRieSA9ICQudHJpbSggZGVzY3JpYmVkYnkuam9pbiggIiAiICkgKTsKCWlmICggZGVzY3JpYmVkYnkgKSB7CgkJZWxlbS5hdHRyKCAiYXJpYS1kZXNjcmliZWRieSIsIGRlc2NyaWJlZGJ5ICk7Cgl9IGVsc2UgewoJCWVsZW0ucmVtb3ZlQXR0ciggImFyaWEtZGVzY3JpYmVkYnkiICk7Cgl9Cn0KCiQud2lkZ2V0KCAidWkudG9vbHRpcCIsIHsKCXZlcnNpb246ICIxLjkuMiIsCglvcHRpb25zOiB7CgkJY29udGVudDogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAkKCB0aGlzICkuYXR0ciggInRpdGxlIiApOwoJCX0sCgkJaGlkZTogdHJ1ZSwKCQkvLyBEaXNhYmxlZCBlbGVtZW50cyBoYXZlIGluY29uc2lzdGVudCBiZWhhdmlvciBhY3Jvc3MgYnJvd3NlcnMgKCM4NjYxKQoJCWl0ZW1zOiAiW3RpdGxlXTpub3QoW2Rpc2FibGVkXSkiLAoJCXBvc2l0aW9uOiB7CgkJCW15OiAibGVmdCB0b3ArMTUiLAoJCQlhdDogImxlZnQgYm90dG9tIiwKCQkJY29sbGlzaW9uOiAiZmxpcGZpdCBmbGlwIgoJCX0sCgkJc2hvdzogdHJ1ZSwKCQl0b29sdGlwQ2xhc3M6IG51bGwsCgkJdHJhY2s6IGZhbHNlLAoKCQkvLyBjYWxsYmFja3MKCQljbG9zZTogbnVsbCwKCQlvcGVuOiBudWxsCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX29uKHsKCQkJbW91c2VvdmVyOiAib3BlbiIsCgkJCWZvY3VzaW46ICJvcGVuIgoJCX0pOwoKCQkvLyBJRHMgb2YgZ2VuZXJhdGVkIHRvb2x0aXBzLCBuZWVkZWQgZm9yIGRlc3Ryb3kKCQl0aGlzLnRvb2x0aXBzID0ge307CgkJLy8gSURzIG9mIHBhcmVudCB0b29sdGlwcyB3aGVyZSB3ZSByZW1vdmVkIHRoZSB0aXRsZSBhdHRyaWJ1dGUKCQl0aGlzLnBhcmVudHMgPSB7fTsKCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCXRoaXMuX2Rpc2FibGUoKTsKCQl9Cgl9LAoKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXZhciB0aGF0ID0gdGhpczsKCgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXNbIHZhbHVlID8gIl9kaXNhYmxlIiA6ICJfZW5hYmxlIiBdKCk7CgkJCXRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCQkJLy8gZGlzYWJsZSBlbGVtZW50IHN0eWxlIGNoYW5nZXMKCQkJcmV0dXJuOwoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCgkJaWYgKCBrZXkgPT09ICJjb250ZW50IiApIHsKCQkJJC5lYWNoKCB0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiggaWQsIGVsZW1lbnQgKSB7CgkJCQl0aGF0Ll91cGRhdGVDb250ZW50KCBlbGVtZW50ICk7CgkJCX0pOwoJCX0KCX0sCgoJX2Rpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpczsKCgkJLy8gY2xvc2Ugb3BlbiB0b29sdGlwcwoJCSQuZWFjaCggdGhpcy50b29sdGlwcywgZnVuY3Rpb24oIGlkLCBlbGVtZW50ICkgewoJCQl2YXIgZXZlbnQgPSAkLkV2ZW50KCAiYmx1ciIgKTsKCQkJZXZlbnQudGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCA9IGVsZW1lbnRbMF07CgkJCXRoYXQuY2xvc2UoIGV2ZW50LCB0cnVlICk7CgkJfSk7CgoJCS8vIHJlbW92ZSB0aXRsZSBhdHRyaWJ1dGVzIHRvIHByZXZlbnQgbmF0aXZlIHRvb2x0aXBzCgkJdGhpcy5lbGVtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApLmFuZFNlbGYoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgZWxlbWVudCA9ICQoIHRoaXMgKTsKCQkJaWYgKCBlbGVtZW50LmlzKCAiW3RpdGxlXSIgKSApIHsKCQkJCWVsZW1lbnQKCQkJCQkuZGF0YSggInVpLXRvb2x0aXAtdGl0bGUiLCBlbGVtZW50LmF0dHIoICJ0aXRsZSIgKSApCgkJCQkJLmF0dHIoICJ0aXRsZSIsICIiICk7CgkJCX0KCQl9KTsKCX0sCgoJX2VuYWJsZTogZnVuY3Rpb24oKSB7CgkJLy8gcmVzdG9yZSB0aXRsZSBhdHRyaWJ1dGVzCgkJdGhpcy5lbGVtZW50LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApLmFuZFNlbGYoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgZWxlbWVudCA9ICQoIHRoaXMgKTsKCQkJaWYgKCBlbGVtZW50LmRhdGEoICJ1aS10b29sdGlwLXRpdGxlIiApICkgewoJCQkJZWxlbWVudC5hdHRyKCAidGl0bGUiLCBlbGVtZW50LmRhdGEoICJ1aS10b29sdGlwLXRpdGxlIiApICk7CgkJCX0KCQl9KTsKCX0sCgoJb3BlbjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJdGFyZ2V0ID0gJCggZXZlbnQgPyBldmVudC50YXJnZXQgOiB0aGlzLmVsZW1lbnQgKQoJCQkJLy8gd2UgbmVlZCBjbG9zZXN0IGhlcmUgZHVlIHRvIG1vdXNlb3ZlciBidWJibGluZywKCQkJCS8vIGJ1dCBhbHdheXMgcG9pbnRpbmcgYXQgdGhlIHNhbWUgZXZlbnQgdGFyZ2V0CgkJCQkuY2xvc2VzdCggdGhpcy5vcHRpb25zLml0ZW1zICk7CgoJCS8vIE5vIGVsZW1lbnQgdG8gc2hvdyBhIHRvb2x0aXAgZm9yIG9yIHRoZSB0b29sdGlwIGlzIGFscmVhZHkgb3BlbgoJCWlmICggIXRhcmdldC5sZW5ndGggfHwgdGFyZ2V0LmRhdGEoICJ1aS10b29sdGlwLWlkIiApICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHRhcmdldC5hdHRyKCAidGl0bGUiICkgKSB7CgkJCXRhcmdldC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIsIHRhcmdldC5hdHRyKCAidGl0bGUiICkgKTsKCQl9CgoJCXRhcmdldC5kYXRhKCAidWktdG9vbHRpcC1vcGVuIiwgdHJ1ZSApOwoKCQkvLyBraWxsIHBhcmVudCB0b29sdGlwcywgY3VzdG9tIG9yIG5hdGl2ZSwgZm9yIGhvdmVyCgkJaWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSAibW91c2VvdmVyIiApIHsKCQkJdGFyZ2V0LnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIHBhcmVudCA9ICQoIHRoaXMgKSwKCQkJCQlibHVyRXZlbnQ7CgkJCQlpZiAoIHBhcmVudC5kYXRhKCAidWktdG9vbHRpcC1vcGVuIiApICkgewoJCQkJCWJsdXJFdmVudCA9ICQuRXZlbnQoICJibHVyIiApOwoJCQkJCWJsdXJFdmVudC50YXJnZXQgPSBibHVyRXZlbnQuY3VycmVudFRhcmdldCA9IHRoaXM7CgkJCQkJdGhhdC5jbG9zZSggYmx1ckV2ZW50LCB0cnVlICk7CgkJCQl9CgkJCQlpZiAoIHBhcmVudC5hdHRyKCAidGl0bGUiICkgKSB7CgkJCQkJcGFyZW50LnVuaXF1ZUlkKCk7CgkJCQkJdGhhdC5wYXJlbnRzWyB0aGlzLmlkIF0gPSB7CgkJCQkJCWVsZW1lbnQ6IHRoaXMsCgkJCQkJCXRpdGxlOiBwYXJlbnQuYXR0ciggInRpdGxlIiApCgkJCQkJfTsKCQkJCQlwYXJlbnQuYXR0ciggInRpdGxlIiwgIiIgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQl0aGlzLl91cGRhdGVDb250ZW50KCB0YXJnZXQsIGV2ZW50ICk7Cgl9LAoKCV91cGRhdGVDb250ZW50OiBmdW5jdGlvbiggdGFyZ2V0LCBldmVudCApIHsKCQl2YXIgY29udGVudCwKCQkJY29udGVudE9wdGlvbiA9IHRoaXMub3B0aW9ucy5jb250ZW50LAoJCQl0aGF0ID0gdGhpcywKCQkJZXZlbnRUeXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbDsKCgkJaWYgKCB0eXBlb2YgY29udGVudE9wdGlvbiA9PT0gInN0cmluZyIgKSB7CgkJCXJldHVybiB0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCBjb250ZW50T3B0aW9uICk7CgkJfQoKCQljb250ZW50ID0gY29udGVudE9wdGlvbi5jYWxsKCB0YXJnZXRbMF0sIGZ1bmN0aW9uKCByZXNwb25zZSApIHsKCQkJLy8gaWdub3JlIGFzeW5jIHJlc3BvbnNlIGlmIHRvb2x0aXAgd2FzIGNsb3NlZCBhbHJlYWR5CgkJCWlmICggIXRhcmdldC5kYXRhKCAidWktdG9vbHRpcC1vcGVuIiApICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCS8vIElFIG1heSBpbnN0YW50bHkgc2VydmUgYSBjYWNoZWQgcmVzcG9uc2UgZm9yIGFqYXggcmVxdWVzdHMKCQkJLy8gZGVsYXkgdGhpcyBjYWxsIHRvIF9vcGVuIHNvIHRoZSBvdGhlciBjYWxsIHRvIF9vcGVuIHJ1bnMgZmlyc3QKCQkJdGhhdC5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQkvLyBqUXVlcnkgY3JlYXRlcyBhIHNwZWNpYWwgZXZlbnQgZm9yIGZvY3VzaW4gd2hlbiBpdCBkb2Vzbid0CgkJCQkvLyBleGlzdCBuYXRpdmVseS4gVG8gaW1wcm92ZSBwZXJmb3JtYW5jZSwgdGhlIG5hdGl2ZSBldmVudAoJCQkJLy8gb2JqZWN0IGlzIHJldXNlZCBhbmQgdGhlIHR5cGUgaXMgY2hhbmdlZC4gVGhlcmVmb3JlLCB3ZSBjYW4ndAoJCQkJLy8gcmVseSBvbiB0aGUgdHlwZSBiZWluZyBjb3JyZWN0IGFmdGVyIHRoZSBldmVudCBmaW5pc2hlZAoJCQkJLy8gYnViYmxpbmcsIHNvIHdlIHNldCBpdCBiYWNrIHRvIHRoZSBwcmV2aW91cyB2YWx1ZS4gKCM4NzQwKQoJCQkJaWYgKCBldmVudCApIHsKCQkJCQlldmVudC50eXBlID0gZXZlbnRUeXBlOwoJCQkJfQoJCQkJdGhpcy5fb3BlbiggZXZlbnQsIHRhcmdldCwgcmVzcG9uc2UgKTsKCQkJfSk7CgkJfSk7CgkJaWYgKCBjb250ZW50ICkgewoJCQl0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCBjb250ZW50ICk7CgkJfQoJfSwKCglfb3BlbjogZnVuY3Rpb24oIGV2ZW50LCB0YXJnZXQsIGNvbnRlbnQgKSB7CgkJdmFyIHRvb2x0aXAsIGV2ZW50cywgZGVsYXllZFNob3csCgkJCXBvc2l0aW9uT3B0aW9uID0gJC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKTsKCgkJaWYgKCAhY29udGVudCApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ29udGVudCBjYW4gYmUgdXBkYXRlZCBtdWx0aXBsZSB0aW1lcy4gSWYgdGhlIHRvb2x0aXAgYWxyZWFkeQoJCS8vIGV4aXN0cywgdGhlbiBqdXN0IHVwZGF0ZSB0aGUgY29udGVudCBhbmQgYmFpbC4KCQl0b29sdGlwID0gdGhpcy5fZmluZCggdGFyZ2V0ICk7CgkJaWYgKCB0b29sdGlwLmxlbmd0aCApIHsKCQkJdG9vbHRpcC5maW5kKCAiLnVpLXRvb2x0aXAtY29udGVudCIgKS5odG1sKCBjb250ZW50ICk7CgkJCXJldHVybjsKCQl9CgoJCS8vIGlmIHdlIGhhdmUgYSB0aXRsZSwgY2xlYXIgaXQgdG8gcHJldmVudCB0aGUgbmF0aXZlIHRvb2x0aXAKCQkvLyB3ZSBoYXZlIHRvIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGRlZmluaW5nIGEgdGl0bGUgaWYgbm9uZSBleGlzdHMKCQkvLyAod2UgZG9uJ3Qgd2FudCB0byBjYXVzZSBhbiBlbGVtZW50IHRvIHN0YXJ0IG1hdGNoaW5nIFt0aXRsZV0pCgkJLy8KCQkvLyBXZSB1c2UgcmVtb3ZlQXR0ciBvbmx5IGZvciBrZXkgZXZlbnRzLCB0byBhbGxvdyBJRSB0byBleHBvcnQgdGhlIGNvcnJlY3QKCQkvLyBhY2Nlc3NpYmxlIGF0dHJpYnV0ZXMuIEZvciBtb3VzZSBldmVudHMsIHNldCB0byBlbXB0eSBzdHJpbmcgdG8gYXZvaWQKCQkvLyBuYXRpdmUgdG9vbHRpcCBzaG93aW5nIHVwIChoYXBwZW5zIG9ubHkgd2hlbiByZW1vdmluZyBpbnNpZGUgbW91c2VvdmVyKS4KCQlpZiAoIHRhcmdldC5pcyggIlt0aXRsZV0iICkgKSB7CgkJCWlmICggZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gIm1vdXNlb3ZlciIgKSB7CgkJCQl0YXJnZXQuYXR0ciggInRpdGxlIiwgIiIgKTsKCQkJfSBlbHNlIHsKCQkJCXRhcmdldC5yZW1vdmVBdHRyKCAidGl0bGUiICk7CgkJCX0KCQl9CgoJCXRvb2x0aXAgPSB0aGlzLl90b29sdGlwKCB0YXJnZXQgKTsKCQlhZGREZXNjcmliZWRCeSggdGFyZ2V0LCB0b29sdGlwLmF0dHIoICJpZCIgKSApOwoJCXRvb2x0aXAuZmluZCggIi51aS10b29sdGlwLWNvbnRlbnQiICkuaHRtbCggY29udGVudCApOwoKCQlmdW5jdGlvbiBwb3NpdGlvbiggZXZlbnQgKSB7CgkJCXBvc2l0aW9uT3B0aW9uLm9mID0gZXZlbnQ7CgkJCWlmICggdG9vbHRpcC5pcyggIjpoaWRkZW4iICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJdG9vbHRpcC5wb3NpdGlvbiggcG9zaXRpb25PcHRpb24gKTsKCQl9CgkJaWYgKCB0aGlzLm9wdGlvbnMudHJhY2sgJiYgZXZlbnQgJiYgL15tb3VzZS8udGVzdCggZXZlbnQudHlwZSApICkgewoJCQl0aGlzLl9vbiggdGhpcy5kb2N1bWVudCwgewoJCQkJbW91c2Vtb3ZlOiBwb3NpdGlvbgoJCQl9KTsKCQkJLy8gdHJpZ2dlciBvbmNlIHRvIG92ZXJyaWRlIGVsZW1lbnQtcmVsYXRpdmUgcG9zaXRpb25pbmcKCQkJcG9zaXRpb24oIGV2ZW50ICk7CgkJfSBlbHNlIHsKCQkJdG9vbHRpcC5wb3NpdGlvbiggJC5leHRlbmQoewoJCQkJb2Y6IHRhcmdldAoJCQl9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKSApOwoJCX0KCgkJdG9vbHRpcC5oaWRlKCk7CgoJCXRoaXMuX3Nob3coIHRvb2x0aXAsIHRoaXMub3B0aW9ucy5zaG93ICk7CgkJLy8gSGFuZGxlIHRyYWNraW5nIHRvb2x0aXBzIHRoYXQgYXJlIHNob3duIHdpdGggYSBkZWxheSAoIzg2NDQpLiBBcyBzb29uCgkJLy8gYXMgdGhlIHRvb2x0aXAgaXMgdmlzaWJsZSwgcG9zaXRpb24gdGhlIHRvb2x0aXAgdXNpbmcgdGhlIG1vc3QgcmVjZW50CgkJLy8gZXZlbnQuCgkJaWYgKCB0aGlzLm9wdGlvbnMuc2hvdyAmJiB0aGlzLm9wdGlvbnMuc2hvdy5kZWxheSApIHsKCQkJZGVsYXllZFNob3cgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHsKCQkJCWlmICggdG9vbHRpcC5pcyggIjp2aXNpYmxlIiApICkgewoJCQkJCXBvc2l0aW9uKCBwb3NpdGlvbk9wdGlvbi5vZiApOwoJCQkJCWNsZWFySW50ZXJ2YWwoIGRlbGF5ZWRTaG93ICk7CgkJCQl9CgkJCX0sICQuZnguaW50ZXJ2YWwgKTsKCQl9CgoJCXRoaXMuX3RyaWdnZXIoICJvcGVuIiwgZXZlbnQsIHsgdG9vbHRpcDogdG9vbHRpcCB9ICk7CgoJCWV2ZW50cyA9IHsKCQkJa2V5dXA6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLkVTQ0FQRSApIHsKCQkJCQl2YXIgZmFrZUV2ZW50ID0gJC5FdmVudChldmVudCk7CgkJCQkJZmFrZUV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0YXJnZXRbMF07CgkJCQkJdGhpcy5jbG9zZSggZmFrZUV2ZW50LCB0cnVlICk7CgkJCQl9CgkJCX0sCgkJCXJlbW92ZTogZnVuY3Rpb24oKSB7CgkJCQl0aGlzLl9yZW1vdmVUb29sdGlwKCB0b29sdGlwICk7CgkJCX0KCQl9OwoJCWlmICggIWV2ZW50IHx8IGV2ZW50LnR5cGUgPT09ICJtb3VzZW92ZXIiICkgewoJCQlldmVudHMubW91c2VsZWF2ZSA9ICJjbG9zZSI7CgkJfQoJCWlmICggIWV2ZW50IHx8IGV2ZW50LnR5cGUgPT09ICJmb2N1c2luIiApIHsKCQkJZXZlbnRzLmZvY3Vzb3V0ID0gImNsb3NlIjsKCQl9CgkJdGhpcy5fb24oIHRydWUsIHRhcmdldCwgZXZlbnRzICk7Cgl9LAoKCWNsb3NlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQl0YXJnZXQgPSAkKCBldmVudCA/IGV2ZW50LmN1cnJlbnRUYXJnZXQgOiB0aGlzLmVsZW1lbnQgKSwKCQkJdG9vbHRpcCA9IHRoaXMuX2ZpbmQoIHRhcmdldCApOwoKCQkvLyBkaXNhYmxpbmcgY2xvc2VzIHRoZSB0b29sdGlwLCBzbyB3ZSBuZWVkIHRvIHRyYWNrIHdoZW4gd2UncmUgY2xvc2luZwoJCS8vIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgaW4gY2FzZSB0aGUgdG9vbHRpcCBiZWNvbWVzIGRpc2FibGVkIG9uIGNsb3NlCgkJaWYgKCB0aGlzLmNsb3NpbmcgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIG9ubHkgc2V0IHRpdGxlIGlmIHdlIGhhZCBvbmUgYmVmb3JlIChzZWUgY29tbWVudCBpbiBfb3BlbigpKQoJCWlmICggdGFyZ2V0LmRhdGEoICJ1aS10b29sdGlwLXRpdGxlIiApICkgewoJCQl0YXJnZXQuYXR0ciggInRpdGxlIiwgdGFyZ2V0LmRhdGEoICJ1aS10b29sdGlwLXRpdGxlIiApICk7CgkJfQoKCQlyZW1vdmVEZXNjcmliZWRCeSggdGFyZ2V0ICk7CgoJCXRvb2x0aXAuc3RvcCggdHJ1ZSApOwoJCXRoaXMuX2hpZGUoIHRvb2x0aXAsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHsKCQkJdGhhdC5fcmVtb3ZlVG9vbHRpcCggJCggdGhpcyApICk7CgkJfSk7CgoJCXRhcmdldC5yZW1vdmVEYXRhKCAidWktdG9vbHRpcC1vcGVuIiApOwoJCXRoaXMuX29mZiggdGFyZ2V0LCAibW91c2VsZWF2ZSBmb2N1c291dCBrZXl1cCIgKTsKCQkvLyBSZW1vdmUgJ3JlbW92ZScgYmluZGluZyBvbmx5IG9uIGRlbGVnYXRlZCB0YXJnZXRzCgkJaWYgKCB0YXJnZXRbMF0gIT09IHRoaXMuZWxlbWVudFswXSApIHsKCQkJdGhpcy5fb2ZmKCB0YXJnZXQsICJyZW1vdmUiICk7CgkJfQoJCXRoaXMuX29mZiggdGhpcy5kb2N1bWVudCwgIm1vdXNlbW92ZSIgKTsKCgkJaWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSAibW91c2VsZWF2ZSIgKSB7CgkJCSQuZWFjaCggdGhpcy5wYXJlbnRzLCBmdW5jdGlvbiggaWQsIHBhcmVudCApIHsKCQkJCSQoIHBhcmVudC5lbGVtZW50ICkuYXR0ciggInRpdGxlIiwgcGFyZW50LnRpdGxlICk7CgkJCQlkZWxldGUgdGhhdC5wYXJlbnRzWyBpZCBdOwoJCQl9KTsKCQl9CgoJCXRoaXMuY2xvc2luZyA9IHRydWU7CgkJdGhpcy5fdHJpZ2dlciggImNsb3NlIiwgZXZlbnQsIHsgdG9vbHRpcDogdG9vbHRpcCB9ICk7CgkJdGhpcy5jbG9zaW5nID0gZmFsc2U7Cgl9LAoKCV90b29sdGlwOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgaWQgPSAidWktdG9vbHRpcC0iICsgaW5jcmVtZW50cysrLAoJCQl0b29sdGlwID0gJCggIjxkaXY+IiApCgkJCQkuYXR0cih7CgkJCQkJaWQ6IGlkLAoJCQkJCXJvbGU6ICJ0b29sdGlwIgoJCQkJfSkKCQkJCS5hZGRDbGFzcyggInVpLXRvb2x0aXAgdWktd2lkZ2V0IHVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LWNvbnRlbnQgIiArCgkJCQkJKCB0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzIHx8ICIiICkgKTsKCQkkKCAiPGRpdj4iICkKCQkJLmFkZENsYXNzKCAidWktdG9vbHRpcC1jb250ZW50IiApCgkJCS5hcHBlbmRUbyggdG9vbHRpcCApOwoJCXRvb2x0aXAuYXBwZW5kVG8oIHRoaXMuZG9jdW1lbnRbMF0uYm9keSApOwoJCWlmICggJC5mbi5iZ2lmcmFtZSApIHsKCQkJdG9vbHRpcC5iZ2lmcmFtZSgpOwoJCX0KCQl0aGlzLnRvb2x0aXBzWyBpZCBdID0gZWxlbWVudDsKCQlyZXR1cm4gdG9vbHRpcDsKCX0sCgoJX2ZpbmQ6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CgkJdmFyIGlkID0gdGFyZ2V0LmRhdGEoICJ1aS10b29sdGlwLWlkIiApOwoJCXJldHVybiBpZCA/ICQoICIjIiArIGlkICkgOiAkKCk7Cgl9LAoKCV9yZW1vdmVUb29sdGlwOiBmdW5jdGlvbiggdG9vbHRpcCApIHsKCQl0b29sdGlwLnJlbW92ZSgpOwoJCWRlbGV0ZSB0aGlzLnRvb2x0aXBzWyB0b29sdGlwLmF0dHIoICJpZCIgKSBdOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoKCQkvLyBjbG9zZSBvcGVuIHRvb2x0aXBzCgkJJC5lYWNoKCB0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiggaWQsIGVsZW1lbnQgKSB7CgkJCS8vIERlbGVnYXRlIHRvIGNsb3NlIG1ldGhvZCB0byBoYW5kbGUgY29tbW9uIGNsZWFudXAKCQkJdmFyIGV2ZW50ID0gJC5FdmVudCggImJsdXIiICk7CgkJCWV2ZW50LnRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBlbGVtZW50WzBdOwoJCQl0aGF0LmNsb3NlKCBldmVudCwgdHJ1ZSApOwoKCQkJLy8gUmVtb3ZlIGltbWVkaWF0ZWx5OyBkZXN0cm95aW5nIGFuIG9wZW4gdG9vbHRpcCBkb2Vzbid0IHVzZSB0aGUKCQkJLy8gaGlkZSBhbmltYXRpb24KCQkJJCggIiMiICsgaWQgKS5yZW1vdmUoKTsKCgkJCS8vIFJlc3RvcmUgdGhlIHRpdGxlCgkJCWlmICggZWxlbWVudC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApIHsKCQkJCWVsZW1lbnQuYXR0ciggInRpdGxlIiwgZWxlbWVudC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApOwoJCQkJZWxlbWVudC5yZW1vdmVEYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKTsKCQkJfQoJCX0pOwoJfQp9KTsKCn0oIGpRdWVyeSApICk7CjsoalF1ZXJ5LmVmZmVjdHMgfHwgKGZ1bmN0aW9uKCQsIHVuZGVmaW5lZCkgewoKdmFyIGJhY2tDb21wYXQgPSAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UsCgkvLyBwcmVmaXggdXNlZCBmb3Igc3RvcmluZyBkYXRhIG9uIC5kYXRhKCkKCWRhdGFTcGFjZSA9ICJ1aS1lZmZlY3RzLSI7CgokLmVmZmVjdHMgPSB7CgllZmZlY3Q6IHt9Cn07CgovKiEKICogalF1ZXJ5IENvbG9yIEFuaW1hdGlvbnMgdjIuMC4wCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBDb3B5cmlnaHQgMjAxMiBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiBNb24gQXVnIDEzIDEzOjQxOjAyIDIwMTIgLTA1MDAKICovCihmdW5jdGlvbiggalF1ZXJ5LCB1bmRlZmluZWQgKSB7CgoJdmFyIHN0ZXBIb29rcyA9ICJiYWNrZ3JvdW5kQ29sb3IgYm9yZGVyQm90dG9tQ29sb3IgYm9yZGVyTGVmdENvbG9yIGJvcmRlclJpZ2h0Q29sb3IgYm9yZGVyVG9wQ29sb3IgY29sb3IgY29sdW1uUnVsZUNvbG9yIG91dGxpbmVDb2xvciB0ZXh0RGVjb3JhdGlvbkNvbG9yIHRleHRFbXBoYXNpc0NvbG9yIi5zcGxpdCgiICIpLAoKCS8vIHBsdXNlcXVhbHMgdGVzdCBmb3IgKz0gMTAwIC09IDEwMAoJcnBsdXNlcXVhbHMgPSAvXihbXC0rXSk9XHMqKFxkK1wuP1xkKikvLAoJLy8gYSBzZXQgb2YgUkUncyB0aGF0IGNhbiBtYXRjaCBzdHJpbmdzIGFuZCBnZW5lcmF0ZSBjb2xvciB0dXBsZXMuCglzdHJpbmdQYXJzZXJzID0gW3sKCQkJcmU6IC9yZ2JhP1woXHMqKFxkezEsM30pXHMqLFxzKihcZHsxLDN9KVxzKixccyooXGR7MSwzfSlccyooPzosXHMqKFxkKyg/OlwuXGQrKT8pXHMqKT9cKS8sCgkJCXBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHsKCQkJCXJldHVybiBbCgkJCQkJZXhlY1Jlc3VsdFsgMSBdLAoJCQkJCWV4ZWNSZXN1bHRbIDIgXSwKCQkJCQlleGVjUmVzdWx0WyAzIF0sCgkJCQkJZXhlY1Jlc3VsdFsgNCBdCgkJCQldOwoJCQl9CgkJfSwgewoJCQlyZTogL3JnYmE/XChccyooXGQrKD86XC5cZCspPylcJVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKig/OixccyooXGQrKD86XC5cZCspPylccyopP1wpLywKCQkJcGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkgewoJCQkJcmV0dXJuIFsKCQkJCQlleGVjUmVzdWx0WyAxIF0gKiAyLjU1LAoJCQkJCWV4ZWNSZXN1bHRbIDIgXSAqIDIuNTUsCgkJCQkJZXhlY1Jlc3VsdFsgMyBdICogMi41NSwKCQkJCQlleGVjUmVzdWx0WyA0IF0KCQkJCV07CgkJCX0KCQl9LCB7CgkJCS8vIHRoaXMgcmVnZXggaWdub3JlcyBBLUYgYmVjYXVzZSBpdCdzIGNvbXBhcmVkIGFnYWluc3QgYW4gYWxyZWFkeSBsb3dlcmNhc2VkIHN0cmluZwoJCQlyZTogLyMoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkvLAoJCQlwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7CgkJCQlyZXR1cm4gWwoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAxIF0sIDE2ICksCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDIgXSwgMTYgKSwKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMyBdLCAxNiApCgkJCQldOwoJCQl9CgkJfSwgewoJCQkvLyB0aGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmcKCQkJcmU6IC8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pLywKCQkJcGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkgewoJCQkJcmV0dXJuIFsKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMSBdICsgZXhlY1Jlc3VsdFsgMSBdLCAxNiApLAoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAyIF0gKyBleGVjUmVzdWx0WyAyIF0sIDE2ICksCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDMgXSArIGV4ZWNSZXN1bHRbIDMgXSwgMTYgKQoJCQkJXTsKCQkJfQoJCX0sIHsKCQkJcmU6IC9oc2xhP1woXHMqKFxkKyg/OlwuXGQrKT8pXHMqLFxzKihcZCsoPzpcLlxkKyk/KVwlXHMqLFxzKihcZCsoPzpcLlxkKyk/KVwlXHMqKD86LFxzKihcZCsoPzpcLlxkKyk/KVxzKik/XCkvLAoJCQlzcGFjZTogImhzbGEiLAoJCQlwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7CgkJCQlyZXR1cm4gWwoJCQkJCWV4ZWNSZXN1bHRbIDEgXSwKCQkJCQlleGVjUmVzdWx0WyAyIF0gLyAxMDAsCgkJCQkJZXhlY1Jlc3VsdFsgMyBdIC8gMTAwLAoJCQkJCWV4ZWNSZXN1bHRbIDQgXQoJCQkJXTsKCQkJfQoJCX1dLAoKCS8vIGpRdWVyeS5Db2xvciggKQoJY29sb3IgPSBqUXVlcnkuQ29sb3IgPSBmdW5jdGlvbiggY29sb3IsIGdyZWVuLCBibHVlLCBhbHBoYSApIHsKCQlyZXR1cm4gbmV3IGpRdWVyeS5Db2xvci5mbi5wYXJzZSggY29sb3IsIGdyZWVuLCBibHVlLCBhbHBoYSApOwoJfSwKCXNwYWNlcyA9IHsKCQlyZ2JhOiB7CgkJCXByb3BzOiB7CgkJCQlyZWQ6IHsKCQkJCQlpZHg6IDAsCgkJCQkJdHlwZTogImJ5dGUiCgkJCQl9LAoJCQkJZ3JlZW46IHsKCQkJCQlpZHg6IDEsCgkJCQkJdHlwZTogImJ5dGUiCgkJCQl9LAoJCQkJYmx1ZTogewoJCQkJCWlkeDogMiwKCQkJCQl0eXBlOiAiYnl0ZSIKCQkJCX0KCQkJfQoJCX0sCgoJCWhzbGE6IHsKCQkJcHJvcHM6IHsKCQkJCWh1ZTogewoJCQkJCWlkeDogMCwKCQkJCQl0eXBlOiAiZGVncmVlcyIKCQkJCX0sCgkJCQlzYXR1cmF0aW9uOiB7CgkJCQkJaWR4OiAxLAoJCQkJCXR5cGU6ICJwZXJjZW50IgoJCQkJfSwKCQkJCWxpZ2h0bmVzczogewoJCQkJCWlkeDogMiwKCQkJCQl0eXBlOiAicGVyY2VudCIKCQkJCX0KCQkJfQoJCX0KCX0sCglwcm9wVHlwZXMgPSB7CgkJImJ5dGUiOiB7CgkJCWZsb29yOiB0cnVlLAoJCQltYXg6IDI1NQoJCX0sCgkJInBlcmNlbnQiOiB7CgkJCW1heDogMQoJCX0sCgkJImRlZ3JlZXMiOiB7CgkJCW1vZDogMzYwLAoJCQlmbG9vcjogdHJ1ZQoJCX0KCX0sCglzdXBwb3J0ID0gY29sb3Iuc3VwcG9ydCA9IHt9LAoKCS8vIGVsZW1lbnQgZm9yIHN1cHBvcnQgdGVzdHMKCXN1cHBvcnRFbGVtID0galF1ZXJ5KCAiPHA+IiApWyAwIF0sCgoJLy8gY29sb3JzID0galF1ZXJ5LkNvbG9yLm5hbWVzCgljb2xvcnMsCgoJLy8gbG9jYWwgYWxpYXNlcyBvZiBmdW5jdGlvbnMgY2FsbGVkIG9mdGVuCgllYWNoID0galF1ZXJ5LmVhY2g7CgovLyBkZXRlcm1pbmUgcmdiYSBzdXBwb3J0IGltbWVkaWF0ZWx5CnN1cHBvcnRFbGVtLnN0eWxlLmNzc1RleHQgPSAiYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEsMSwxLC41KSI7CnN1cHBvcnQucmdiYSA9IHN1cHBvcnRFbGVtLnN0eWxlLmJhY2tncm91bmRDb2xvci5pbmRleE9mKCAicmdiYSIgKSA+IC0xOwoKLy8gZGVmaW5lIGNhY2hlIG5hbWUgYW5kIGFscGhhIHByb3BlcnRpZXMKLy8gZm9yIHJnYmEgYW5kIGhzbGEgc3BhY2VzCmVhY2goIHNwYWNlcywgZnVuY3Rpb24oIHNwYWNlTmFtZSwgc3BhY2UgKSB7CglzcGFjZS5jYWNoZSA9ICJfIiArIHNwYWNlTmFtZTsKCXNwYWNlLnByb3BzLmFscGhhID0gewoJCWlkeDogMywKCQl0eXBlOiAicGVyY2VudCIsCgkJZGVmOiAxCgl9Owp9KTsKCmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgcHJvcCwgYWxsb3dFbXB0eSApIHsKCXZhciB0eXBlID0gcHJvcFR5cGVzWyBwcm9wLnR5cGUgXSB8fCB7fTsKCglpZiAoIHZhbHVlID09IG51bGwgKSB7CgkJcmV0dXJuIChhbGxvd0VtcHR5IHx8ICFwcm9wLmRlZikgPyBudWxsIDogcHJvcC5kZWY7Cgl9CgoJLy8gfn4gaXMgYW4gc2hvcnQgd2F5IG9mIGRvaW5nIGZsb29yIGZvciBwb3NpdGl2ZSBudW1iZXJzCgl2YWx1ZSA9IHR5cGUuZmxvb3IgPyB+fnZhbHVlIDogcGFyc2VGbG9hdCggdmFsdWUgKTsKCgkvLyBJRSB3aWxsIHBhc3MgaW4gZW1wdHkgc3RyaW5ncyBhcyB2YWx1ZSBmb3IgYWxwaGEsCgkvLyB3aGljaCB3aWxsIGhpdCB0aGlzIGNhc2UKCWlmICggaXNOYU4oIHZhbHVlICkgKSB7CgkJcmV0dXJuIHByb3AuZGVmOwoJfQoKCWlmICggdHlwZS5tb2QgKSB7CgkJLy8gd2UgYWRkIG1vZCBiZWZvcmUgbW9kZGluZyB0byBtYWtlIHN1cmUgdGhhdCBuZWdhdGl2ZXMgdmFsdWVzCgkJLy8gZ2V0IGNvbnZlcnRlZCBwcm9wZXJseTogLTEwIC0+IDM1MAoJCXJldHVybiAodmFsdWUgKyB0eXBlLm1vZCkgJSB0eXBlLm1vZDsKCX0KCgkvLyBmb3Igbm93IGFsbCBwcm9wZXJ0eSB0eXBlcyB3aXRob3V0IG1vZCBoYXZlIG1pbiBhbmQgbWF4CglyZXR1cm4gMCA+IHZhbHVlID8gMCA6IHR5cGUubWF4IDwgdmFsdWUgPyB0eXBlLm1heCA6IHZhbHVlOwp9CgpmdW5jdGlvbiBzdHJpbmdQYXJzZSggc3RyaW5nICkgewoJdmFyIGluc3QgPSBjb2xvcigpLAoJCXJnYmEgPSBpbnN0Ll9yZ2JhID0gW107CgoJc3RyaW5nID0gc3RyaW5nLnRvTG93ZXJDYXNlKCk7CgoJZWFjaCggc3RyaW5nUGFyc2VycywgZnVuY3Rpb24oIGksIHBhcnNlciApIHsKCQl2YXIgcGFyc2VkLAoJCQltYXRjaCA9IHBhcnNlci5yZS5leGVjKCBzdHJpbmcgKSwKCQkJdmFsdWVzID0gbWF0Y2ggJiYgcGFyc2VyLnBhcnNlKCBtYXRjaCApLAoJCQlzcGFjZU5hbWUgPSBwYXJzZXIuc3BhY2UgfHwgInJnYmEiOwoKCQlpZiAoIHZhbHVlcyApIHsKCQkJcGFyc2VkID0gaW5zdFsgc3BhY2VOYW1lIF0oIHZhbHVlcyApOwoKCQkJLy8gaWYgdGhpcyB3YXMgYW4gcmdiYSBwYXJzZSB0aGUgYXNzaWdubWVudCBtaWdodCBoYXBwZW4gdHdpY2UKCQkJLy8gb2ggd2VsbC4uLi4KCQkJaW5zdFsgc3BhY2VzWyBzcGFjZU5hbWUgXS5jYWNoZSBdID0gcGFyc2VkWyBzcGFjZXNbIHNwYWNlTmFtZSBdLmNhY2hlIF07CgkJCXJnYmEgPSBpbnN0Ll9yZ2JhID0gcGFyc2VkLl9yZ2JhOwoKCQkJLy8gZXhpdCBlYWNoKCBzdHJpbmdQYXJzZXJzICkgaGVyZSBiZWNhdXNlIHdlIG1hdGNoZWQKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0pOwoKCS8vIEZvdW5kIGEgc3RyaW5nUGFyc2VyIHRoYXQgaGFuZGxlZCBpdAoJaWYgKCByZ2JhLmxlbmd0aCApIHsKCgkJLy8gaWYgdGhpcyBjYW1lIGZyb20gYSBwYXJzZWQgc3RyaW5nLCBmb3JjZSAidHJhbnNwYXJlbnQiIHdoZW4gYWxwaGEgaXMgMAoJCS8vIGNocm9tZSwgKGFuZCBtYXliZSBvdGhlcnMpIHJldHVybiAidHJhbnNwYXJlbnQiIGFzIHJnYmEoMCwwLDAsMCkKCQlpZiAoIHJnYmEuam9pbigpID09PSAiMCwwLDAsMCIgKSB7CgkJCWpRdWVyeS5leHRlbmQoIHJnYmEsIGNvbG9ycy50cmFuc3BhcmVudCApOwoJCX0KCQlyZXR1cm4gaW5zdDsKCX0KCgkvLyBuYW1lZCBjb2xvcnMKCXJldHVybiBjb2xvcnNbIHN0cmluZyBdOwp9Cgpjb2xvci5mbiA9IGpRdWVyeS5leHRlbmQoIGNvbG9yLnByb3RvdHlwZSwgewoJcGFyc2U6IGZ1bmN0aW9uKCByZWQsIGdyZWVuLCBibHVlLCBhbHBoYSApIHsKCQlpZiAoIHJlZCA9PT0gdW5kZWZpbmVkICkgewoJCQl0aGlzLl9yZ2JhID0gWyBudWxsLCBudWxsLCBudWxsLCBudWxsIF07CgkJCXJldHVybiB0aGlzOwoJCX0KCQlpZiAoIHJlZC5qcXVlcnkgfHwgcmVkLm5vZGVUeXBlICkgewoJCQlyZWQgPSBqUXVlcnkoIHJlZCApLmNzcyggZ3JlZW4gKTsKCQkJZ3JlZW4gPSB1bmRlZmluZWQ7CgkJfQoKCQl2YXIgaW5zdCA9IHRoaXMsCgkJCXR5cGUgPSBqUXVlcnkudHlwZSggcmVkICksCgkJCXJnYmEgPSB0aGlzLl9yZ2JhID0gW107CgoJCS8vIG1vcmUgdGhhbiAxIGFyZ3VtZW50IHNwZWNpZmllZCAtIGFzc3VtZSAoIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhICkKCQlpZiAoIGdyZWVuICE9PSB1bmRlZmluZWQgKSB7CgkJCXJlZCA9IFsgcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEgXTsKCQkJdHlwZSA9ICJhcnJheSI7CgkJfQoKCQlpZiAoIHR5cGUgPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4gdGhpcy5wYXJzZSggc3RyaW5nUGFyc2UoIHJlZCApIHx8IGNvbG9ycy5fZGVmYXVsdCApOwoJCX0KCgkJaWYgKCB0eXBlID09PSAiYXJyYXkiICkgewoJCQllYWNoKCBzcGFjZXMucmdiYS5wcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCQkJCXJnYmFbIHByb3AuaWR4IF0gPSBjbGFtcCggcmVkWyBwcm9wLmlkeCBdLCBwcm9wICk7CgkJCX0pOwoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCWlmICggdHlwZSA9PT0gIm9iamVjdCIgKSB7CgkJCWlmICggcmVkIGluc3RhbmNlb2YgY29sb3IgKSB7CgkJCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJCQkJCWlmICggcmVkWyBzcGFjZS5jYWNoZSBdICkgewoJCQkJCQlpbnN0WyBzcGFjZS5jYWNoZSBdID0gcmVkWyBzcGFjZS5jYWNoZSBdLnNsaWNlKCk7CgkJCQkJfQoJCQkJfSk7CgkJCX0gZWxzZSB7CgkJCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJCQkJCXZhciBjYWNoZSA9IHNwYWNlLmNhY2hlOwoJCQkJCWVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoKCQkJCQkJLy8gaWYgdGhlIGNhY2hlIGRvZXNuJ3QgZXhpc3QsIGFuZCB3ZSBrbm93IGhvdyB0byBjb252ZXJ0CgkJCQkJCWlmICggIWluc3RbIGNhY2hlIF0gJiYgc3BhY2UudG8gKSB7CgoJCQkJCQkJLy8gaWYgdGhlIHZhbHVlIHdhcyBudWxsLCB3ZSBkb24ndCBuZWVkIHRvIGNvcHkgaXQKCQkJCQkJCS8vIGlmIHRoZSBrZXkgd2FzIGFscGhhLCB3ZSBkb24ndCBuZWVkIHRvIGNvcHkgaXQgZWl0aGVyCgkJCQkJCQlpZiAoIGtleSA9PT0gImFscGhhIiB8fCByZWRbIGtleSBdID09IG51bGwgKSB7CgkJCQkJCQkJcmV0dXJuOwoJCQkJCQkJfQoJCQkJCQkJaW5zdFsgY2FjaGUgXSA9IHNwYWNlLnRvKCBpbnN0Ll9yZ2JhICk7CgkJCQkJCX0KCgkJCQkJCS8vIHRoaXMgaXMgdGhlIG9ubHkgY2FzZSB3aGVyZSB3ZSBhbGxvdyBudWxscyBmb3IgQUxMIHByb3BlcnRpZXMuCgkJCQkJCS8vIGNhbGwgY2xhbXAgd2l0aCBhbHdheXNBbGxvd0VtcHR5CgkJCQkJCWluc3RbIGNhY2hlIF1bIHByb3AuaWR4IF0gPSBjbGFtcCggcmVkWyBrZXkgXSwgcHJvcCwgdHJ1ZSApOwoJCQkJCX0pOwoKCQkJCQkvLyBldmVyeXRoaW5nIGRlZmluZWQgYnV0IGFscGhhPwoJCQkJCWlmICggaW5zdFsgY2FjaGUgXSAmJiAkLmluQXJyYXkoIG51bGwsIGluc3RbIGNhY2hlIF0uc2xpY2UoIDAsIDMgKSApIDwgMCApIHsKCQkJCQkJLy8gdXNlIHRoZSBkZWZhdWx0IG9mIDEKCQkJCQkJaW5zdFsgY2FjaGUgXVsgMyBdID0gMTsKCQkJCQkJaWYgKCBzcGFjZS5mcm9tICkgewoJCQkJCQkJaW5zdC5fcmdiYSA9IHNwYWNlLmZyb20oIGluc3RbIGNhY2hlIF0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJCXJldHVybiB0aGlzOwoJCX0KCX0sCglpczogZnVuY3Rpb24oIGNvbXBhcmUgKSB7CgkJdmFyIGlzID0gY29sb3IoIGNvbXBhcmUgKSwKCQkJc2FtZSA9IHRydWUsCgkJCWluc3QgPSB0aGlzOwoKCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBfLCBzcGFjZSApIHsKCQkJdmFyIGxvY2FsQ2FjaGUsCgkJCQlpc0NhY2hlID0gaXNbIHNwYWNlLmNhY2hlIF07CgkJCWlmIChpc0NhY2hlKSB7CgkJCQlsb2NhbENhY2hlID0gaW5zdFsgc3BhY2UuY2FjaGUgXSB8fCBzcGFjZS50byAmJiBzcGFjZS50byggaW5zdC5fcmdiYSApIHx8IFtdOwoJCQkJZWFjaCggc3BhY2UucHJvcHMsIGZ1bmN0aW9uKCBfLCBwcm9wICkgewoJCQkJCWlmICggaXNDYWNoZVsgcHJvcC5pZHggXSAhPSBudWxsICkgewoJCQkJCQlzYW1lID0gKCBpc0NhY2hlWyBwcm9wLmlkeCBdID09PSBsb2NhbENhY2hlWyBwcm9wLmlkeCBdICk7CgkJCQkJCXJldHVybiBzYW1lOwoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJCXJldHVybiBzYW1lOwoJCX0pOwoJCXJldHVybiBzYW1lOwoJfSwKCV9zcGFjZTogZnVuY3Rpb24oKSB7CgkJdmFyIHVzZWQgPSBbXSwKCQkJaW5zdCA9IHRoaXM7CgkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHsKCQkJaWYgKCBpbnN0WyBzcGFjZS5jYWNoZSBdICkgewoJCQkJdXNlZC5wdXNoKCBzcGFjZU5hbWUgKTsKCQkJfQoJCX0pOwoJCXJldHVybiB1c2VkLnBvcCgpOwoJfSwKCXRyYW5zaXRpb246IGZ1bmN0aW9uKCBvdGhlciwgZGlzdGFuY2UgKSB7CgkJdmFyIGVuZCA9IGNvbG9yKCBvdGhlciApLAoJCQlzcGFjZU5hbWUgPSBlbmQuX3NwYWNlKCksCgkJCXNwYWNlID0gc3BhY2VzWyBzcGFjZU5hbWUgXSwKCQkJc3RhcnRDb2xvciA9IHRoaXMuYWxwaGEoKSA9PT0gMCA/IGNvbG9yKCAidHJhbnNwYXJlbnQiICkgOiB0aGlzLAoJCQlzdGFydCA9IHN0YXJ0Q29sb3JbIHNwYWNlLmNhY2hlIF0gfHwgc3BhY2UudG8oIHN0YXJ0Q29sb3IuX3JnYmEgKSwKCQkJcmVzdWx0ID0gc3RhcnQuc2xpY2UoKTsKCgkJZW5kID0gZW5kWyBzcGFjZS5jYWNoZSBdOwoJCWVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCQl2YXIgaW5kZXggPSBwcm9wLmlkeCwKCQkJCXN0YXJ0VmFsdWUgPSBzdGFydFsgaW5kZXggXSwKCQkJCWVuZFZhbHVlID0gZW5kWyBpbmRleCBdLAoJCQkJdHlwZSA9IHByb3BUeXBlc1sgcHJvcC50eXBlIF0gfHwge307CgoJCQkvLyBpZiBudWxsLCBkb24ndCBvdmVycmlkZSBzdGFydCB2YWx1ZQoJCQlpZiAoIGVuZFZhbHVlID09PSBudWxsICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCS8vIGlmIG51bGwgLSB1c2UgZW5kCgkJCWlmICggc3RhcnRWYWx1ZSA9PT0gbnVsbCApIHsKCQkJCXJlc3VsdFsgaW5kZXggXSA9IGVuZFZhbHVlOwoJCQl9IGVsc2UgewoJCQkJaWYgKCB0eXBlLm1vZCApIHsKCQkJCQlpZiAoIGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSA+IHR5cGUubW9kIC8gMiApIHsKCQkJCQkJc3RhcnRWYWx1ZSArPSB0eXBlLm1vZDsKCQkJCQl9IGVsc2UgaWYgKCBzdGFydFZhbHVlIC0gZW5kVmFsdWUgPiB0eXBlLm1vZCAvIDIgKSB7CgkJCQkJCXN0YXJ0VmFsdWUgLT0gdHlwZS5tb2Q7CgkJCQkJfQoJCQkJfQoJCQkJcmVzdWx0WyBpbmRleCBdID0gY2xhbXAoICggZW5kVmFsdWUgLSBzdGFydFZhbHVlICkgKiBkaXN0YW5jZSArIHN0YXJ0VmFsdWUsIHByb3AgKTsKCQkJfQoJCX0pOwoJCXJldHVybiB0aGlzWyBzcGFjZU5hbWUgXSggcmVzdWx0ICk7Cgl9LAoJYmxlbmQ6IGZ1bmN0aW9uKCBvcGFxdWUgKSB7CgkJLy8gaWYgd2UgYXJlIGFscmVhZHkgb3BhcXVlIC0gcmV0dXJuIG91cnNlbGYKCQlpZiAoIHRoaXMuX3JnYmFbIDMgXSA9PT0gMSApIHsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQl2YXIgcmdiID0gdGhpcy5fcmdiYS5zbGljZSgpLAoJCQlhID0gcmdiLnBvcCgpLAoJCQlibGVuZCA9IGNvbG9yKCBvcGFxdWUgKS5fcmdiYTsKCgkJcmV0dXJuIGNvbG9yKCBqUXVlcnkubWFwKCByZ2IsIGZ1bmN0aW9uKCB2LCBpICkgewoJCQlyZXR1cm4gKCAxIC0gYSApICogYmxlbmRbIGkgXSArIGEgKiB2OwoJCX0pKTsKCX0sCgl0b1JnYmFTdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVmaXggPSAicmdiYSgiLAoJCQlyZ2JhID0galF1ZXJ5Lm1hcCggdGhpcy5fcmdiYSwgZnVuY3Rpb24oIHYsIGkgKSB7CgkJCQlyZXR1cm4gdiA9PSBudWxsID8gKCBpID4gMiA/IDEgOiAwICkgOiB2OwoJCQl9KTsKCgkJaWYgKCByZ2JhWyAzIF0gPT09IDEgKSB7CgkJCXJnYmEucG9wKCk7CgkJCXByZWZpeCA9ICJyZ2IoIjsKCQl9CgoJCXJldHVybiBwcmVmaXggKyByZ2JhLmpvaW4oKSArICIpIjsKCX0sCgl0b0hzbGFTdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVmaXggPSAiaHNsYSgiLAoJCQloc2xhID0galF1ZXJ5Lm1hcCggdGhpcy5oc2xhKCksIGZ1bmN0aW9uKCB2LCBpICkgewoJCQkJaWYgKCB2ID09IG51bGwgKSB7CgkJCQkJdiA9IGkgPiAyID8gMSA6IDA7CgkJCQl9CgoJCQkJLy8gY2F0Y2ggMSBhbmQgMgoJCQkJaWYgKCBpICYmIGkgPCAzICkgewoJCQkJCXYgPSBNYXRoLnJvdW5kKCB2ICogMTAwICkgKyAiJSI7CgkJCQl9CgkJCQlyZXR1cm4gdjsKCQkJfSk7CgoJCWlmICggaHNsYVsgMyBdID09PSAxICkgewoJCQloc2xhLnBvcCgpOwoJCQlwcmVmaXggPSAiaHNsKCI7CgkJfQoJCXJldHVybiBwcmVmaXggKyBoc2xhLmpvaW4oKSArICIpIjsKCX0sCgl0b0hleFN0cmluZzogZnVuY3Rpb24oIGluY2x1ZGVBbHBoYSApIHsKCQl2YXIgcmdiYSA9IHRoaXMuX3JnYmEuc2xpY2UoKSwKCQkJYWxwaGEgPSByZ2JhLnBvcCgpOwoKCQlpZiAoIGluY2x1ZGVBbHBoYSApIHsKCQkJcmdiYS5wdXNoKCB+figgYWxwaGEgKiAyNTUgKSApOwoJCX0KCgkJcmV0dXJuICIjIiArIGpRdWVyeS5tYXAoIHJnYmEsIGZ1bmN0aW9uKCB2ICkgewoKCQkJLy8gZGVmYXVsdCB0byAwIHdoZW4gbnVsbHMgZXhpc3QKCQkJdiA9ICggdiB8fCAwICkudG9TdHJpbmcoIDE2ICk7CgkJCXJldHVybiB2Lmxlbmd0aCA9PT0gMSA/ICIwIiArIHYgOiB2OwoJCX0pLmpvaW4oIiIpOwoJfSwKCXRvU3RyaW5nOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fcmdiYVsgMyBdID09PSAwID8gInRyYW5zcGFyZW50IiA6IHRoaXMudG9SZ2JhU3RyaW5nKCk7Cgl9Cn0pOwpjb2xvci5mbi5wYXJzZS5wcm90b3R5cGUgPSBjb2xvci5mbjsKCi8vIGhzbGEgY29udmVyc2lvbnMgYWRhcHRlZCBmcm9tOgovLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL21hYXNoYWFjay9zb3VyY2UvYnJvd3NlL3BhY2thZ2VzL2dyYXBoaWNzL3RydW5rL3NyYy9ncmFwaGljcy9jb2xvcnMvSFVFMlJHQi5hcz9yPTUwMjEKCmZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIGggKSB7CgloID0gKCBoICsgMSApICUgMTsKCWlmICggaCAqIDYgPCAxICkgewoJCXJldHVybiBwICsgKHEgLSBwKSAqIGggKiA2OwoJfQoJaWYgKCBoICogMiA8IDEpIHsKCQlyZXR1cm4gcTsKCX0KCWlmICggaCAqIDMgPCAyICkgewoJCXJldHVybiBwICsgKHEgLSBwKSAqICgoMi8zKSAtIGgpICogNjsKCX0KCXJldHVybiBwOwp9CgpzcGFjZXMuaHNsYS50byA9IGZ1bmN0aW9uICggcmdiYSApIHsKCWlmICggcmdiYVsgMCBdID09IG51bGwgfHwgcmdiYVsgMSBdID09IG51bGwgfHwgcmdiYVsgMiBdID09IG51bGwgKSB7CgkJcmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgcmdiYVsgMyBdIF07Cgl9Cgl2YXIgciA9IHJnYmFbIDAgXSAvIDI1NSwKCQlnID0gcmdiYVsgMSBdIC8gMjU1LAoJCWIgPSByZ2JhWyAyIF0gLyAyNTUsCgkJYSA9IHJnYmFbIDMgXSwKCQltYXggPSBNYXRoLm1heCggciwgZywgYiApLAoJCW1pbiA9IE1hdGgubWluKCByLCBnLCBiICksCgkJZGlmZiA9IG1heCAtIG1pbiwKCQlhZGQgPSBtYXggKyBtaW4sCgkJbCA9IGFkZCAqIDAuNSwKCQloLCBzOwoKCWlmICggbWluID09PSBtYXggKSB7CgkJaCA9IDA7Cgl9IGVsc2UgaWYgKCByID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGcgLSBiICkgLyBkaWZmICkgKyAzNjA7Cgl9IGVsc2UgaWYgKCBnID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGIgLSByICkgLyBkaWZmICkgKyAxMjA7Cgl9IGVsc2UgewoJCWggPSAoIDYwICogKCByIC0gZyApIC8gZGlmZiApICsgMjQwOwoJfQoKCWlmICggbCA9PT0gMCB8fCBsID09PSAxICkgewoJCXMgPSBsOwoJfSBlbHNlIGlmICggbCA8PSAwLjUgKSB7CgkJcyA9IGRpZmYgLyBhZGQ7Cgl9IGVsc2UgewoJCXMgPSBkaWZmIC8gKCAyIC0gYWRkICk7Cgl9CglyZXR1cm4gWyBNYXRoLnJvdW5kKGgpICUgMzYwLCBzLCBsLCBhID09IG51bGwgPyAxIDogYSBdOwp9OwoKc3BhY2VzLmhzbGEuZnJvbSA9IGZ1bmN0aW9uICggaHNsYSApIHsKCWlmICggaHNsYVsgMCBdID09IG51bGwgfHwgaHNsYVsgMSBdID09IG51bGwgfHwgaHNsYVsgMiBdID09IG51bGwgKSB7CgkJcmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgaHNsYVsgMyBdIF07Cgl9Cgl2YXIgaCA9IGhzbGFbIDAgXSAvIDM2MCwKCQlzID0gaHNsYVsgMSBdLAoJCWwgPSBoc2xhWyAyIF0sCgkJYSA9IGhzbGFbIDMgXSwKCQlxID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSBsICogcywKCQlwID0gMiAqIGwgLSBxOwoKCXJldHVybiBbCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCArICggMSAvIDMgKSApICogMjU1ICksCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCApICogMjU1ICksCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCAtICggMSAvIDMgKSApICogMjU1ICksCgkJYQoJXTsKfTsKCgplYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJdmFyIHByb3BzID0gc3BhY2UucHJvcHMsCgkJY2FjaGUgPSBzcGFjZS5jYWNoZSwKCQl0byA9IHNwYWNlLnRvLAoJCWZyb20gPSBzcGFjZS5mcm9tOwoKCS8vIG1ha2VzIHJnYmEoKSBhbmQgaHNsYSgpCgljb2xvci5mblsgc3BhY2VOYW1lIF0gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgoJCS8vIGdlbmVyYXRlIGEgY2FjaGUgZm9yIHRoaXMgc3BhY2UgaWYgaXQgZG9lc24ndCBleGlzdAoJCWlmICggdG8gJiYgIXRoaXNbIGNhY2hlIF0gKSB7CgkJCXRoaXNbIGNhY2hlIF0gPSB0byggdGhpcy5fcmdiYSApOwoJCX0KCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzWyBjYWNoZSBdLnNsaWNlKCk7CgkJfQoKCQl2YXIgcmV0LAoJCQl0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksCgkJCWFyciA9ICggdHlwZSA9PT0gImFycmF5IiB8fCB0eXBlID09PSAib2JqZWN0IiApID8gdmFsdWUgOiBhcmd1bWVudHMsCgkJCWxvY2FsID0gdGhpc1sgY2FjaGUgXS5zbGljZSgpOwoKCQllYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCQkJdmFyIHZhbCA9IGFyclsgdHlwZSA9PT0gIm9iamVjdCIgPyBrZXkgOiBwcm9wLmlkeCBdOwoJCQlpZiAoIHZhbCA9PSBudWxsICkgewoJCQkJdmFsID0gbG9jYWxbIHByb3AuaWR4IF07CgkJCX0KCQkJbG9jYWxbIHByb3AuaWR4IF0gPSBjbGFtcCggdmFsLCBwcm9wICk7CgkJfSk7CgoJCWlmICggZnJvbSApIHsKCQkJcmV0ID0gY29sb3IoIGZyb20oIGxvY2FsICkgKTsKCQkJcmV0WyBjYWNoZSBdID0gbG9jYWw7CgkJCXJldHVybiByZXQ7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIGNvbG9yKCBsb2NhbCApOwoJCX0KCX07CgoJLy8gbWFrZXMgcmVkKCkgZ3JlZW4oKSBibHVlKCkgYWxwaGEoKSBodWUoKSBzYXR1cmF0aW9uKCkgbGlnaHRuZXNzKCkKCWVhY2goIHByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCS8vIGFscGhhIGlzIGluY2x1ZGVkIGluIG1vcmUgdGhhbiBvbmUgc3BhY2UKCQlpZiAoIGNvbG9yLmZuWyBrZXkgXSApIHsKCQkJcmV0dXJuOwoJCX0KCQljb2xvci5mblsga2V5IF0gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciB2dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApLAoJCQkJZm4gPSAoIGtleSA9PT0gImFscGhhIiA/ICggdGhpcy5faHNsYSA/ICJoc2xhIiA6ICJyZ2JhIiApIDogc3BhY2VOYW1lICksCgkJCQlsb2NhbCA9IHRoaXNbIGZuIF0oKSwKCQkJCWN1ciA9IGxvY2FsWyBwcm9wLmlkeCBdLAoJCQkJbWF0Y2g7CgoJCQlpZiAoIHZ0eXBlID09PSAidW5kZWZpbmVkIiApIHsKCQkJCXJldHVybiBjdXI7CgkJCX0KCgkJCWlmICggdnR5cGUgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQl2YWx1ZSA9IHZhbHVlLmNhbGwoIHRoaXMsIGN1ciApOwoJCQkJdnR5cGUgPSBqUXVlcnkudHlwZSggdmFsdWUgKTsKCQkJfQoJCQlpZiAoIHZhbHVlID09IG51bGwgJiYgcHJvcC5lbXB0eSApIHsKCQkJCXJldHVybiB0aGlzOwoJCQl9CgkJCWlmICggdnR5cGUgPT09ICJzdHJpbmciICkgewoJCQkJbWF0Y2ggPSBycGx1c2VxdWFscy5leGVjKCB2YWx1ZSApOwoJCQkJaWYgKCBtYXRjaCApIHsKCQkJCQl2YWx1ZSA9IGN1ciArIHBhcnNlRmxvYXQoIG1hdGNoWyAyIF0gKSAqICggbWF0Y2hbIDEgXSA9PT0gIisiID8gMSA6IC0xICk7CgkJCQl9CgkJCX0KCQkJbG9jYWxbIHByb3AuaWR4IF0gPSB2YWx1ZTsKCQkJcmV0dXJuIHRoaXNbIGZuIF0oIGxvY2FsICk7CgkJfTsKCX0pOwp9KTsKCi8vIGFkZCAuZnguc3RlcCBmdW5jdGlvbnMKZWFjaCggc3RlcEhvb2tzLCBmdW5jdGlvbiggaSwgaG9vayApIHsKCWpRdWVyeS5jc3NIb29rc1sgaG9vayBdID0gewoJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQl2YXIgcGFyc2VkLCBjdXJFbGVtLAoJCQkJYmFja2dyb3VuZENvbG9yID0gIiI7CgoJCQlpZiAoIGpRdWVyeS50eXBlKCB2YWx1ZSApICE9PSAic3RyaW5nIiB8fCAoIHBhcnNlZCA9IHN0cmluZ1BhcnNlKCB2YWx1ZSApICkgKSB7CgkJCQl2YWx1ZSA9IGNvbG9yKCBwYXJzZWQgfHwgdmFsdWUgKTsKCQkJCWlmICggIXN1cHBvcnQucmdiYSAmJiB2YWx1ZS5fcmdiYVsgMyBdICE9PSAxICkgewoJCQkJCWN1ckVsZW0gPSBob29rID09PSAiYmFja2dyb3VuZENvbG9yIiA/IGVsZW0ucGFyZW50Tm9kZSA6IGVsZW07CgkJCQkJd2hpbGUgKAoJCQkJCQkoYmFja2dyb3VuZENvbG9yID09PSAiIiB8fCBiYWNrZ3JvdW5kQ29sb3IgPT09ICJ0cmFuc3BhcmVudCIpICYmCgkJCQkJCWN1ckVsZW0gJiYgY3VyRWxlbS5zdHlsZQoJCQkJCSkgewoJCQkJCQl0cnkgewoJCQkJCQkJYmFja2dyb3VuZENvbG9yID0galF1ZXJ5LmNzcyggY3VyRWxlbSwgImJhY2tncm91bmRDb2xvciIgKTsKCQkJCQkJCWN1ckVsZW0gPSBjdXJFbGVtLnBhcmVudE5vZGU7CgkJCQkJCX0gY2F0Y2ggKCBlICkgewoJCQkJCQl9CgkJCQkJfQoKCQkJCQl2YWx1ZSA9IHZhbHVlLmJsZW5kKCBiYWNrZ3JvdW5kQ29sb3IgJiYgYmFja2dyb3VuZENvbG9yICE9PSAidHJhbnNwYXJlbnQiID8KCQkJCQkJYmFja2dyb3VuZENvbG9yIDoKCQkJCQkJIl9kZWZhdWx0IiApOwoJCQkJfQoKCQkJCXZhbHVlID0gdmFsdWUudG9SZ2JhU3RyaW5nKCk7CgkJCX0KCQkJdHJ5IHsKCQkJCWVsZW0uc3R5bGVbIGhvb2sgXSA9IHZhbHVlOwoJCQl9IGNhdGNoKCBlcnJvciApIHsKCQkJCS8vIHdyYXBwZWQgdG8gcHJldmVudCBJRSBmcm9tIHRocm93aW5nIGVycm9ycyBvbiAiaW52YWxpZCIgdmFsdWVzIGxpa2UgJ2F1dG8nIG9yICdpbmhlcml0JwoJCQl9CgkJfQoJfTsKCWpRdWVyeS5meC5zdGVwWyBob29rIF0gPSBmdW5jdGlvbiggZnggKSB7CgkJaWYgKCAhZnguY29sb3JJbml0ICkgewoJCQlmeC5zdGFydCA9IGNvbG9yKCBmeC5lbGVtLCBob29rICk7CgkJCWZ4LmVuZCA9IGNvbG9yKCBmeC5lbmQgKTsKCQkJZnguY29sb3JJbml0ID0gdHJ1ZTsKCQl9CgkJalF1ZXJ5LmNzc0hvb2tzWyBob29rIF0uc2V0KCBmeC5lbGVtLCBmeC5zdGFydC50cmFuc2l0aW9uKCBmeC5lbmQsIGZ4LnBvcyApICk7Cgl9Owp9KTsKCmpRdWVyeS5jc3NIb29rcy5ib3JkZXJDb2xvciA9IHsKCWV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXZhciBleHBhbmRlZCA9IHt9OwoKCQllYWNoKCBbICJUb3AiLCAiUmlnaHQiLCAiQm90dG9tIiwgIkxlZnQiIF0sIGZ1bmN0aW9uKCBpLCBwYXJ0ICkgewoJCQlleHBhbmRlZFsgImJvcmRlciIgKyBwYXJ0ICsgIkNvbG9yIiBdID0gdmFsdWU7CgkJfSk7CgkJcmV0dXJuIGV4cGFuZGVkOwoJfQp9OwoKLy8gQmFzaWMgY29sb3IgbmFtZXMgb25seS4KLy8gVXNhZ2Ugb2YgYW55IG9mIHRoZSBvdGhlciBjb2xvciBuYW1lcyByZXF1aXJlcyBhZGRpbmcgeW91cnNlbGYgb3IgaW5jbHVkaW5nCi8vIGpxdWVyeS5jb2xvci5zdmctbmFtZXMuanMuCmNvbG9ycyA9IGpRdWVyeS5Db2xvci5uYW1lcyA9IHsKCS8vIDQuMS4gQmFzaWMgY29sb3Iga2V5d29yZHMKCWFxdWE6ICIjMDBmZmZmIiwKCWJsYWNrOiAiIzAwMDAwMCIsCglibHVlOiAiIzAwMDBmZiIsCglmdWNoc2lhOiAiI2ZmMDBmZiIsCglncmF5OiAiIzgwODA4MCIsCglncmVlbjogIiMwMDgwMDAiLAoJbGltZTogIiMwMGZmMDAiLAoJbWFyb29uOiAiIzgwMDAwMCIsCgluYXZ5OiAiIzAwMDA4MCIsCglvbGl2ZTogIiM4MDgwMDAiLAoJcHVycGxlOiAiIzgwMDA4MCIsCglyZWQ6ICIjZmYwMDAwIiwKCXNpbHZlcjogIiNjMGMwYzAiLAoJdGVhbDogIiMwMDgwODAiLAoJd2hpdGU6ICIjZmZmZmZmIiwKCXllbGxvdzogIiNmZmZmMDAiLAoKCS8vIDQuMi4zLiAidHJhbnNwYXJlbnQiIGNvbG9yIGtleXdvcmQKCXRyYW5zcGFyZW50OiBbIG51bGwsIG51bGwsIG51bGwsIDAgXSwKCglfZGVmYXVsdDogIiNmZmZmZmYiCn07Cgp9KSggalF1ZXJ5ICk7CgoKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQ0xBU1MgQU5JTUFUSU9OUyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCihmdW5jdGlvbigpIHsKCnZhciBjbGFzc0FuaW1hdGlvbkFjdGlvbnMgPSBbICJhZGQiLCAicmVtb3ZlIiwgInRvZ2dsZSIgXSwKCXNob3J0aGFuZFN0eWxlcyA9IHsKCQlib3JkZXI6IDEsCgkJYm9yZGVyQm90dG9tOiAxLAoJCWJvcmRlckNvbG9yOiAxLAoJCWJvcmRlckxlZnQ6IDEsCgkJYm9yZGVyUmlnaHQ6IDEsCgkJYm9yZGVyVG9wOiAxLAoJCWJvcmRlcldpZHRoOiAxLAoJCW1hcmdpbjogMSwKCQlwYWRkaW5nOiAxCgl9OwoKJC5lYWNoKFsgImJvcmRlckxlZnRTdHlsZSIsICJib3JkZXJSaWdodFN0eWxlIiwgImJvcmRlckJvdHRvbVN0eWxlIiwgImJvcmRlclRvcFN0eWxlIiBdLCBmdW5jdGlvbiggXywgcHJvcCApIHsKCSQuZnguc3RlcFsgcHJvcCBdID0gZnVuY3Rpb24oIGZ4ICkgewoJCWlmICggZnguZW5kICE9PSAibm9uZSIgJiYgIWZ4LnNldEF0dHIgfHwgZngucG9zID09PSAxICYmICFmeC5zZXRBdHRyICkgewoJCQlqUXVlcnkuc3R5bGUoIGZ4LmVsZW0sIHByb3AsIGZ4LmVuZCApOwoJCQlmeC5zZXRBdHRyID0gdHJ1ZTsKCQl9Cgl9Owp9KTsKCmZ1bmN0aW9uIGdldEVsZW1lbnRTdHlsZXMoKSB7Cgl2YXIgc3R5bGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgPwoJCQl0aGlzLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcywgbnVsbCApIDoKCQkJdGhpcy5jdXJyZW50U3R5bGUsCgkJbmV3U3R5bGUgPSB7fSwKCQlrZXksCgkJbGVuOwoKCS8vIHdlYmtpdCBlbnVtZXJhdGVzIHN0eWxlIHBvcnBlcnRpZXMKCWlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoICYmIHN0eWxlWyAwIF0gJiYgc3R5bGVbIHN0eWxlWyAwIF0gXSApIHsKCQlsZW4gPSBzdHlsZS5sZW5ndGg7CgkJd2hpbGUgKCBsZW4tLSApIHsKCQkJa2V5ID0gc3R5bGVbIGxlbiBdOwoJCQlpZiAoIHR5cGVvZiBzdHlsZVsga2V5IF0gPT09ICJzdHJpbmciICkgewoJCQkJbmV3U3R5bGVbICQuY2FtZWxDYXNlKCBrZXkgKSBdID0gc3R5bGVbIGtleSBdOwoJCQl9CgkJfQoJfSBlbHNlIHsKCQlmb3IgKCBrZXkgaW4gc3R5bGUgKSB7CgkJCWlmICggdHlwZW9mIHN0eWxlWyBrZXkgXSA9PT0gInN0cmluZyIgKSB7CgkJCQluZXdTdHlsZVsga2V5IF0gPSBzdHlsZVsga2V5IF07CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIG5ld1N0eWxlOwp9CgoKZnVuY3Rpb24gc3R5bGVEaWZmZXJlbmNlKCBvbGRTdHlsZSwgbmV3U3R5bGUgKSB7Cgl2YXIgZGlmZiA9IHt9LAoJCW5hbWUsIHZhbHVlOwoKCWZvciAoIG5hbWUgaW4gbmV3U3R5bGUgKSB7CgkJdmFsdWUgPSBuZXdTdHlsZVsgbmFtZSBdOwoJCWlmICggb2xkU3R5bGVbIG5hbWUgXSAhPT0gdmFsdWUgKSB7CgkJCWlmICggIXNob3J0aGFuZFN0eWxlc1sgbmFtZSBdICkgewoJCQkJaWYgKCAkLmZ4LnN0ZXBbIG5hbWUgXSB8fCAhaXNOYU4oIHBhcnNlRmxvYXQoIHZhbHVlICkgKSApIHsKCQkJCQlkaWZmWyBuYW1lIF0gPSB2YWx1ZTsKCQkJCX0KCQkJfQoJCX0KCX0KCglyZXR1cm4gZGlmZjsKfQoKJC5lZmZlY3RzLmFuaW1hdGVDbGFzcyA9IGZ1bmN0aW9uKCB2YWx1ZSwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2sgKSB7Cgl2YXIgbyA9ICQuc3BlZWQoIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrICk7CgoJcmV0dXJuIHRoaXMucXVldWUoIGZ1bmN0aW9uKCkgewoJCXZhciBhbmltYXRlZCA9ICQoIHRoaXMgKSwKCQkJYmFzZUNsYXNzID0gYW5pbWF0ZWQuYXR0ciggImNsYXNzIiApIHx8ICIiLAoJCQlhcHBseUNsYXNzQ2hhbmdlLAoJCQlhbGxBbmltYXRpb25zID0gby5jaGlsZHJlbiA/IGFuaW1hdGVkLmZpbmQoICIqIiApLmFuZFNlbGYoKSA6IGFuaW1hdGVkOwoKCQkvLyBtYXAgdGhlIGFuaW1hdGVkIG9iamVjdHMgdG8gc3RvcmUgdGhlIG9yaWdpbmFsIHN0eWxlcy4KCQlhbGxBbmltYXRpb25zID0gYWxsQW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24oKSB7CgkJCXZhciBlbCA9ICQoIHRoaXMgKTsKCQkJcmV0dXJuIHsKCQkJCWVsOiBlbCwKCQkJCXN0YXJ0OiBnZXRFbGVtZW50U3R5bGVzLmNhbGwoIHRoaXMgKQoJCQl9OwoJCX0pOwoKCQkvLyBhcHBseSBjbGFzcyBjaGFuZ2UKCQlhcHBseUNsYXNzQ2hhbmdlID0gZnVuY3Rpb24oKSB7CgkJCSQuZWFjaCggY2xhc3NBbmltYXRpb25BY3Rpb25zLCBmdW5jdGlvbihpLCBhY3Rpb24pIHsKCQkJCWlmICggdmFsdWVbIGFjdGlvbiBdICkgewoJCQkJCWFuaW1hdGVkWyBhY3Rpb24gKyAiQ2xhc3MiIF0oIHZhbHVlWyBhY3Rpb24gXSApOwoJCQkJfQoJCQl9KTsKCQl9OwoJCWFwcGx5Q2xhc3NDaGFuZ2UoKTsKCgkJLy8gbWFwIGFsbCBhbmltYXRlZCBvYmplY3RzIGFnYWluIC0gY2FsY3VsYXRlIG5ldyBzdHlsZXMgYW5kIGRpZmYKCQlhbGxBbmltYXRpb25zID0gYWxsQW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24oKSB7CgkJCXRoaXMuZW5kID0gZ2V0RWxlbWVudFN0eWxlcy5jYWxsKCB0aGlzLmVsWyAwIF0gKTsKCQkJdGhpcy5kaWZmID0gc3R5bGVEaWZmZXJlbmNlKCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCApOwoJCQlyZXR1cm4gdGhpczsKCQl9KTsKCgkJLy8gYXBwbHkgb3JpZ2luYWwgY2xhc3MKCQlhbmltYXRlZC5hdHRyKCAiY2xhc3MiLCBiYXNlQ2xhc3MgKTsKCgkJLy8gbWFwIGFsbCBhbmltYXRlZCBvYmplY3RzIGFnYWluIC0gdGhpcyB0aW1lIGNvbGxlY3RpbmcgYSBwcm9taXNlCgkJYWxsQW5pbWF0aW9ucyA9IGFsbEFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uKCkgewoJCQl2YXIgc3R5bGVJbmZvID0gdGhpcywKCQkJCWRmZCA9ICQuRGVmZXJyZWQoKSwKCQkJCW9wdHMgPSBqUXVlcnkuZXh0ZW5kKHt9LCBvLCB7CgkJCQkJcXVldWU6IGZhbHNlLAoJCQkJCWNvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQkJCQkJZGZkLnJlc29sdmUoIHN0eWxlSW5mbyApOwoJCQkJCX0KCQkJCX0pOwoKCQkJdGhpcy5lbC5hbmltYXRlKCB0aGlzLmRpZmYsIG9wdHMgKTsKCQkJcmV0dXJuIGRmZC5wcm9taXNlKCk7CgkJfSk7CgoJCS8vIG9uY2UgYWxsIGFuaW1hdGlvbnMgaGF2ZSBjb21wbGV0ZWQ6CgkJJC53aGVuLmFwcGx5KCAkLCBhbGxBbmltYXRpb25zLmdldCgpICkuZG9uZShmdW5jdGlvbigpIHsKCgkJCS8vIHNldCB0aGUgZmluYWwgY2xhc3MKCQkJYXBwbHlDbGFzc0NoYW5nZSgpOwoKCQkJLy8gZm9yIGVhY2ggYW5pbWF0ZWQgZWxlbWVudCwKCQkJLy8gY2xlYXIgYWxsIGNzcyBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBhbmltYXRlZAoJCQkkLmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oKSB7CgkJCQl2YXIgZWwgPSB0aGlzLmVsOwoJCQkJJC5lYWNoKCB0aGlzLmRpZmYsIGZ1bmN0aW9uKGtleSkgewoJCQkJCWVsLmNzcygga2V5LCAnJyApOwoJCQkJfSk7CgkJCX0pOwoKCQkJLy8gdGhpcyBpcyBndWFybnRlZWQgdG8gYmUgdGhlcmUgaWYgeW91IHVzZSBqUXVlcnkuc3BlZWQoKQoJCQkvLyBpdCBhbHNvIGhhbmRsZXMgZGVxdWV1aW5nIHRoZSBuZXh0IGFuaW0uLi4KCQkJby5jb21wbGV0ZS5jYWxsKCBhbmltYXRlZFsgMCBdICk7CgkJfSk7Cgl9KTsKfTsKCiQuZm4uZXh0ZW5kKHsKCV9hZGRDbGFzczogJC5mbi5hZGRDbGFzcywKCWFkZENsYXNzOiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CgkJcmV0dXJuIHNwZWVkID8KCQkJJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLAoJCQkJeyBhZGQ6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6CgkJCXRoaXMuX2FkZENsYXNzKCBjbGFzc05hbWVzICk7Cgl9LAoKCV9yZW1vdmVDbGFzczogJC5mbi5yZW1vdmVDbGFzcywKCXJlbW92ZUNsYXNzOiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CgkJcmV0dXJuIHNwZWVkID8KCQkJJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLAoJCQkJeyByZW1vdmU6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6CgkJCXRoaXMuX3JlbW92ZUNsYXNzKCBjbGFzc05hbWVzICk7Cgl9LAoKCV90b2dnbGVDbGFzczogJC5mbi50b2dnbGVDbGFzcywKCXRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggY2xhc3NOYW1lcywgZm9yY2UsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewoJCWlmICggdHlwZW9mIGZvcmNlID09PSAiYm9vbGVhbiIgfHwgZm9yY2UgPT09IHVuZGVmaW5lZCApIHsKCQkJaWYgKCAhc3BlZWQgKSB7CgkJCQkvLyB3aXRob3V0IHNwZWVkIHBhcmFtZXRlcgoJCQkJcmV0dXJuIHRoaXMuX3RvZ2dsZUNsYXNzKCBjbGFzc05hbWVzLCBmb3JjZSApOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuICQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcywKCQkJCQkoZm9yY2UgPyB7IGFkZDogY2xhc3NOYW1lcyB9IDogeyByZW1vdmU6IGNsYXNzTmFtZXMgfSksCgkJCQkJc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCQkJfQoJCX0gZWxzZSB7CgkJCS8vIHdpdGhvdXQgZm9yY2UgcGFyYW1ldGVyCgkJCXJldHVybiAkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsCgkJCQl7IHRvZ2dsZTogY2xhc3NOYW1lcyB9LCBmb3JjZSwgc3BlZWQsIGVhc2luZyApOwoJCX0KCX0sCgoJc3dpdGNoQ2xhc3M6IGZ1bmN0aW9uKCByZW1vdmUsIGFkZCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spIHsKCQlyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLCB7CgkJCWFkZDogYWRkLAoJCQlyZW1vdmU6IHJlbW92ZQoJCX0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7Cgl9Cn0pOwoKfSkoKTsKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFRkZFQ1RTICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgooZnVuY3Rpb24oKSB7CgokLmV4dGVuZCggJC5lZmZlY3RzLCB7Cgl2ZXJzaW9uOiAiMS45LjIiLAoKCS8vIFNhdmVzIGEgc2V0IG9mIHByb3BlcnRpZXMgaW4gYSBkYXRhIHN0b3JhZ2UKCXNhdmU6IGZ1bmN0aW9uKCBlbGVtZW50LCBzZXQgKSB7CgkJZm9yKCB2YXIgaT0wOyBpIDwgc2V0Lmxlbmd0aDsgaSsrICkgewoJCQlpZiAoIHNldFsgaSBdICE9PSBudWxsICkgewoJCQkJZWxlbWVudC5kYXRhKCBkYXRhU3BhY2UgKyBzZXRbIGkgXSwgZWxlbWVudFsgMCBdLnN0eWxlWyBzZXRbIGkgXSBdICk7CgkJCX0KCQl9Cgl9LAoKCS8vIFJlc3RvcmVzIGEgc2V0IG9mIHByZXZpb3VzbHkgc2F2ZWQgcHJvcGVydGllcyBmcm9tIGEgZGF0YSBzdG9yYWdlCglyZXN0b3JlOiBmdW5jdGlvbiggZWxlbWVudCwgc2V0ICkgewoJCXZhciB2YWwsIGk7CgkJZm9yKCBpPTA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7CgkJCWlmICggc2V0WyBpIF0gIT09IG51bGwgKSB7CgkJCQl2YWwgPSBlbGVtZW50LmRhdGEoIGRhdGFTcGFjZSArIHNldFsgaSBdICk7CgkJCQkvLyBzdXBwb3J0OiBqUXVlcnkgMS42LjIKCQkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk5MTcKCQkJCS8vIGpRdWVyeSAxLjYuMiBpbmNvcnJlY3RseSByZXR1cm5zIHVuZGVmaW5lZCBmb3IgYW55IGZhbHN5IHZhbHVlLgoJCQkJLy8gV2UgY2FuJ3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuICIiIGFuZCAwIGhlcmUsIHNvIHdlIGp1c3QgYXNzdW1lCgkJCQkvLyBlbXB0eSBzdHJpbmcgc2luY2UgaXQncyBsaWtlbHkgdG8gYmUgYSBtb3JlIGNvbW1vbiB2YWx1ZS4uLgoJCQkJaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHsKCQkJCQl2YWwgPSAiIjsKCQkJCX0KCQkJCWVsZW1lbnQuY3NzKCBzZXRbIGkgXSwgdmFsICk7CgkJCX0KCQl9Cgl9LAoKCXNldE1vZGU6IGZ1bmN0aW9uKCBlbCwgbW9kZSApIHsKCQlpZiAobW9kZSA9PT0gInRvZ2dsZSIpIHsKCQkJbW9kZSA9IGVsLmlzKCAiOmhpZGRlbiIgKSA/ICJzaG93IiA6ICJoaWRlIjsKCQl9CgkJcmV0dXJuIG1vZGU7Cgl9LAoKCS8vIFRyYW5zbGF0ZXMgYSBbdG9wLGxlZnRdIGFycmF5IGludG8gYSBiYXNlbGluZSB2YWx1ZQoJLy8gdGhpcyBzaG91bGQgYmUgYSBsaXR0bGUgbW9yZSBmbGV4aWJsZSBpbiB0aGUgZnV0dXJlIHRvIGhhbmRsZSBhIHN0cmluZyAmIGhhc2gKCWdldEJhc2VsaW5lOiBmdW5jdGlvbiggb3JpZ2luLCBvcmlnaW5hbCApIHsKCQl2YXIgeSwgeDsKCQlzd2l0Y2ggKCBvcmlnaW5bIDAgXSApIHsKCQkJY2FzZSAidG9wIjogeSA9IDA7IGJyZWFrOwoJCQljYXNlICJtaWRkbGUiOiB5ID0gMC41OyBicmVhazsKCQkJY2FzZSAiYm90dG9tIjogeSA9IDE7IGJyZWFrOwoJCQlkZWZhdWx0OiB5ID0gb3JpZ2luWyAwIF0gLyBvcmlnaW5hbC5oZWlnaHQ7CgkJfQoJCXN3aXRjaCAoIG9yaWdpblsgMSBdICkgewoJCQljYXNlICJsZWZ0IjogeCA9IDA7IGJyZWFrOwoJCQljYXNlICJjZW50ZXIiOiB4ID0gMC41OyBicmVhazsKCQkJY2FzZSAicmlnaHQiOiB4ID0gMTsgYnJlYWs7CgkJCWRlZmF1bHQ6IHggPSBvcmlnaW5bIDEgXSAvIG9yaWdpbmFsLndpZHRoOwoJCX0KCQlyZXR1cm4gewoJCQl4OiB4LAoJCQl5OiB5CgkJfTsKCX0sCgoJLy8gV3JhcHMgdGhlIGVsZW1lbnQgYXJvdW5kIGEgd3JhcHBlciB0aGF0IGNvcGllcyBwb3NpdGlvbiBwcm9wZXJ0aWVzCgljcmVhdGVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCgkJLy8gaWYgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSB3cmFwcGVkLCByZXR1cm4gaXQKCQlpZiAoIGVsZW1lbnQucGFyZW50KCkuaXMoICIudWktZWZmZWN0cy13cmFwcGVyIiApKSB7CgkJCXJldHVybiBlbGVtZW50LnBhcmVudCgpOwoJCX0KCgkJLy8gd3JhcCB0aGUgZWxlbWVudAoJCXZhciBwcm9wcyA9IHsKCQkJCXdpZHRoOiBlbGVtZW50Lm91dGVyV2lkdGgodHJ1ZSksCgkJCQloZWlnaHQ6IGVsZW1lbnQub3V0ZXJIZWlnaHQodHJ1ZSksCgkJCQkiZmxvYXQiOiBlbGVtZW50LmNzcyggImZsb2F0IiApCgkJCX0sCgkJCXdyYXBwZXIgPSAkKCAiPGRpdj48L2Rpdj4iICkKCQkJCS5hZGRDbGFzcyggInVpLWVmZmVjdHMtd3JhcHBlciIgKQoJCQkJLmNzcyh7CgkJCQkJZm9udFNpemU6ICIxMDAlIiwKCQkJCQliYWNrZ3JvdW5kOiAidHJhbnNwYXJlbnQiLAoJCQkJCWJvcmRlcjogIm5vbmUiLAoJCQkJCW1hcmdpbjogMCwKCQkJCQlwYWRkaW5nOiAwCgkJCQl9KSwKCQkJLy8gU3RvcmUgdGhlIHNpemUgaW4gY2FzZSB3aWR0aC9oZWlnaHQgYXJlIGRlZmluZWQgaW4gJSAtIEZpeGVzICM1MjQ1CgkJCXNpemUgPSB7CgkJCQl3aWR0aDogZWxlbWVudC53aWR0aCgpLAoJCQkJaGVpZ2h0OiBlbGVtZW50LmhlaWdodCgpCgkJCX0sCgkJCWFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7CgoJCS8vIHN1cHBvcnQ6IEZpcmVmb3gKCQkvLyBGaXJlZm94IGluY29ycmVjdGx5IGV4cG9zZXMgYW5vbnltb3VzIGNvbnRlbnQKCQkvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NjE2NjQKCQl0cnkgewoJCQlhY3RpdmUuaWQ7CgkJfSBjYXRjaCggZSApIHsKCQkJYWN0aXZlID0gZG9jdW1lbnQuYm9keTsKCQl9CgoJCWVsZW1lbnQud3JhcCggd3JhcHBlciApOwoKCQkvLyBGaXhlcyAjNzU5NSAtIEVsZW1lbnRzIGxvc2UgZm9jdXMgd2hlbiB3cmFwcGVkLgoJCWlmICggZWxlbWVudFsgMCBdID09PSBhY3RpdmUgfHwgJC5jb250YWlucyggZWxlbWVudFsgMCBdLCBhY3RpdmUgKSApIHsKCQkJJCggYWN0aXZlICkuZm9jdXMoKTsKCQl9CgoJCXdyYXBwZXIgPSBlbGVtZW50LnBhcmVudCgpOyAvL0hvdGZpeCBmb3IgalF1ZXJ5IDEuNCBzaW5jZSBzb21lIGNoYW5nZSBpbiB3cmFwKCkgc2VlbXMgdG8gYWN0dWFsbHkgbG9zZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSB3cmFwcGVkIGVsZW1lbnQKCgkJLy8gdHJhbnNmZXIgcG9zaXRpb25pbmcgcHJvcGVydGllcyB0byB0aGUgd3JhcHBlcgoJCWlmICggZWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSA9PT0gInN0YXRpYyIgKSB7CgkJCXdyYXBwZXIuY3NzKHsgcG9zaXRpb246ICJyZWxhdGl2ZSIgfSk7CgkJCWVsZW1lbnQuY3NzKHsgcG9zaXRpb246ICJyZWxhdGl2ZSIgfSk7CgkJfSBlbHNlIHsKCQkJJC5leHRlbmQoIHByb3BzLCB7CgkJCQlwb3NpdGlvbjogZWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSwKCQkJCXpJbmRleDogZWxlbWVudC5jc3MoICJ6LWluZGV4IiApCgkJCX0pOwoJCQkkLmVhY2goWyAidG9wIiwgImxlZnQiLCAiYm90dG9tIiwgInJpZ2h0IiBdLCBmdW5jdGlvbihpLCBwb3MpIHsKCQkJCXByb3BzWyBwb3MgXSA9IGVsZW1lbnQuY3NzKCBwb3MgKTsKCQkJCWlmICggaXNOYU4oIHBhcnNlSW50KCBwcm9wc1sgcG9zIF0sIDEwICkgKSApIHsKCQkJCQlwcm9wc1sgcG9zIF0gPSAiYXV0byI7CgkJCQl9CgkJCX0pOwoJCQllbGVtZW50LmNzcyh7CgkJCQlwb3NpdGlvbjogInJlbGF0aXZlIiwKCQkJCXRvcDogMCwKCQkJCWxlZnQ6IDAsCgkJCQlyaWdodDogImF1dG8iLAoJCQkJYm90dG9tOiAiYXV0byIKCQkJfSk7CgkJfQoJCWVsZW1lbnQuY3NzKHNpemUpOwoKCQlyZXR1cm4gd3JhcHBlci5jc3MoIHByb3BzICkuc2hvdygpOwoJfSwKCglyZW1vdmVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCgkJaWYgKCBlbGVtZW50LnBhcmVudCgpLmlzKCAiLnVpLWVmZmVjdHMtd3JhcHBlciIgKSApIHsKCQkJZWxlbWVudC5wYXJlbnQoKS5yZXBsYWNlV2l0aCggZWxlbWVudCApOwoKCQkJLy8gRml4ZXMgIzc1OTUgLSBFbGVtZW50cyBsb3NlIGZvY3VzIHdoZW4gd3JhcHBlZC4KCQkJaWYgKCBlbGVtZW50WyAwIF0gPT09IGFjdGl2ZSB8fCAkLmNvbnRhaW5zKCBlbGVtZW50WyAwIF0sIGFjdGl2ZSApICkgewoJCQkJJCggYWN0aXZlICkuZm9jdXMoKTsKCQkJfQoJCX0KCgoJCXJldHVybiBlbGVtZW50OwoJfSwKCglzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiggZWxlbWVudCwgbGlzdCwgZmFjdG9yLCB2YWx1ZSApIHsKCQl2YWx1ZSA9IHZhbHVlIHx8IHt9OwoJCSQuZWFjaCggbGlzdCwgZnVuY3Rpb24oIGksIHggKSB7CgkJCXZhciB1bml0ID0gZWxlbWVudC5jc3NVbml0KCB4ICk7CgkJCWlmICggdW5pdFsgMCBdID4gMCApIHsKCQkJCXZhbHVlWyB4IF0gPSB1bml0WyAwIF0gKiBmYWN0b3IgKyB1bml0WyAxIF07CgkJCX0KCQl9KTsKCQlyZXR1cm4gdmFsdWU7Cgl9Cn0pOwoKLy8gcmV0dXJuIGFuIGVmZmVjdCBvcHRpb25zIG9iamVjdCBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlcnM6CmZ1bmN0aW9uIF9ub3JtYWxpemVBcmd1bWVudHMoIGVmZmVjdCwgb3B0aW9ucywgc3BlZWQsIGNhbGxiYWNrICkgewoKCS8vIGFsbG93IHBhc3NpbmcgYWxsIG9wdGlvbnMgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcgoJaWYgKCAkLmlzUGxhaW5PYmplY3QoIGVmZmVjdCApICkgewoJCW9wdGlvbnMgPSBlZmZlY3Q7CgkJZWZmZWN0ID0gZWZmZWN0LmVmZmVjdDsKCX0KCgkvLyBjb252ZXJ0IHRvIGFuIG9iamVjdAoJZWZmZWN0ID0geyBlZmZlY3Q6IGVmZmVjdCB9OwoKCS8vIGNhdGNoIChlZmZlY3QsIG51bGwsIC4uLikKCWlmICggb3B0aW9ucyA9PSBudWxsICkgewoJCW9wdGlvbnMgPSB7fTsKCX0KCgkvLyBjYXRjaCAoZWZmZWN0LCBjYWxsYmFjaykKCWlmICggJC5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7CgkJY2FsbGJhY2sgPSBvcHRpb25zOwoJCXNwZWVkID0gbnVsbDsKCQlvcHRpb25zID0ge307Cgl9CgoJLy8gY2F0Y2ggKGVmZmVjdCwgc3BlZWQsID8pCglpZiAoIHR5cGVvZiBvcHRpb25zID09PSAibnVtYmVyIiB8fCAkLmZ4LnNwZWVkc1sgb3B0aW9ucyBdICkgewoJCWNhbGxiYWNrID0gc3BlZWQ7CgkJc3BlZWQgPSBvcHRpb25zOwoJCW9wdGlvbnMgPSB7fTsKCX0KCgkvLyBjYXRjaCAoZWZmZWN0LCBvcHRpb25zLCBjYWxsYmFjaykKCWlmICggJC5pc0Z1bmN0aW9uKCBzcGVlZCApICkgewoJCWNhbGxiYWNrID0gc3BlZWQ7CgkJc3BlZWQgPSBudWxsOwoJfQoKCS8vIGFkZCBvcHRpb25zIHRvIGVmZmVjdAoJaWYgKCBvcHRpb25zICkgewoJCSQuZXh0ZW5kKCBlZmZlY3QsIG9wdGlvbnMgKTsKCX0KCglzcGVlZCA9IHNwZWVkIHx8IG9wdGlvbnMuZHVyYXRpb247CgllZmZlY3QuZHVyYXRpb24gPSAkLmZ4Lm9mZiA/IDAgOgoJCXR5cGVvZiBzcGVlZCA9PT0gIm51bWJlciIgPyBzcGVlZCA6CgkJc3BlZWQgaW4gJC5meC5zcGVlZHMgPyAkLmZ4LnNwZWVkc1sgc3BlZWQgXSA6CgkJJC5meC5zcGVlZHMuX2RlZmF1bHQ7CgoJZWZmZWN0LmNvbXBsZXRlID0gY2FsbGJhY2sgfHwgb3B0aW9ucy5jb21wbGV0ZTsKCglyZXR1cm4gZWZmZWN0Owp9CgpmdW5jdGlvbiBzdGFuZGFyZFNwZWVkKCBzcGVlZCApIHsKCS8vIHZhbGlkIHN0YW5kYXJkIHNwZWVkcwoJaWYgKCAhc3BlZWQgfHwgdHlwZW9mIHNwZWVkID09PSAibnVtYmVyIiB8fCAkLmZ4LnNwZWVkc1sgc3BlZWQgXSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLyBpbnZhbGlkIHN0cmluZ3MgLSB0cmVhdCBhcyAibm9ybWFsIiBzcGVlZAoJaWYgKCB0eXBlb2Ygc3BlZWQgPT09ICJzdHJpbmciICYmICEkLmVmZmVjdHMuZWZmZWN0WyBzcGVlZCBdICkgewoJCS8vIFRPRE86IHJlbW92ZSBpbiAyLjAgKCM3MTE1KQoJCWlmICggYmFja0NvbXBhdCAmJiAkLmVmZmVjdHNbIHNwZWVkIF0gKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuIHRydWU7Cgl9CgoJcmV0dXJuIGZhbHNlOwp9CgokLmZuLmV4dGVuZCh7CgllZmZlY3Q6IGZ1bmN0aW9uKCAvKiBlZmZlY3QsIG9wdGlvbnMsIHNwZWVkLCBjYWxsYmFjayAqLyApIHsKCQl2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApLAoJCQltb2RlID0gYXJncy5tb2RlLAoJCQlxdWV1ZSA9IGFyZ3MucXVldWUsCgkJCWVmZmVjdE1ldGhvZCA9ICQuZWZmZWN0cy5lZmZlY3RbIGFyZ3MuZWZmZWN0IF0sCgoJCQkvLyBERVBSRUNBVEVEOiByZW1vdmUgaW4gMi4wICgjNzExNSkKCQkJb2xkRWZmZWN0TWV0aG9kID0gIWVmZmVjdE1ldGhvZCAmJiBiYWNrQ29tcGF0ICYmICQuZWZmZWN0c1sgYXJncy5lZmZlY3QgXTsKCgkJaWYgKCAkLmZ4Lm9mZiB8fCAhKCBlZmZlY3RNZXRob2QgfHwgb2xkRWZmZWN0TWV0aG9kICkgKSB7CgkJCS8vIGRlbGVnYXRlIHRvIHRoZSBvcmlnaW5hbCBtZXRob2QgKGUuZy4sIC5zaG93KCkpIGlmIHBvc3NpYmxlCgkJCWlmICggbW9kZSApIHsKCQkJCXJldHVybiB0aGlzWyBtb2RlIF0oIGFyZ3MuZHVyYXRpb24sIGFyZ3MuY29tcGxldGUgKTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJCWlmICggYXJncy5jb21wbGV0ZSApIHsKCQkJCQkJYXJncy5jb21wbGV0ZS5jYWxsKCB0aGlzICk7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCQl9CgoJCWZ1bmN0aW9uIHJ1biggbmV4dCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJCQljb21wbGV0ZSA9IGFyZ3MuY29tcGxldGUsCgkJCQltb2RlID0gYXJncy5tb2RlOwoKCQkJZnVuY3Rpb24gZG9uZSgpIHsKCQkJCWlmICggJC5pc0Z1bmN0aW9uKCBjb21wbGV0ZSApICkgewoJCQkJCWNvbXBsZXRlLmNhbGwoIGVsZW1bMF0gKTsKCQkJCX0KCQkJCWlmICggJC5pc0Z1bmN0aW9uKCBuZXh0ICkgKSB7CgkJCQkJbmV4dCgpOwoJCQkJfQoJCQl9CgoJCQkvLyBpZiB0aGUgZWxlbWVudCBpcyBoaWRkZGVuIGFuZCBtb2RlIGlzIGhpZGUsCgkJCS8vIG9yIGVsZW1lbnQgaXMgdmlzaWJsZSBhbmQgbW9kZSBpcyBzaG93CgkJCWlmICggZWxlbS5pcyggIjpoaWRkZW4iICkgPyBtb2RlID09PSAiaGlkZSIgOiBtb2RlID09PSAic2hvdyIgKSB7CgkJCQlkb25lKCk7CgkJCX0gZWxzZSB7CgkJCQllZmZlY3RNZXRob2QuY2FsbCggZWxlbVswXSwgYXJncywgZG9uZSApOwoJCQl9CgkJfQoKCQkvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjayBpbiAyLjAsIGVmZmVjdE1ldGhvZCB3aWxsIGFsd2F5cyBiZSB0cnVlCgkJaWYgKCBlZmZlY3RNZXRob2QgKSB7CgkJCXJldHVybiBxdWV1ZSA9PT0gZmFsc2UgPyB0aGlzLmVhY2goIHJ1biApIDogdGhpcy5xdWV1ZSggcXVldWUgfHwgImZ4IiwgcnVuICk7CgkJfSBlbHNlIHsKCQkJLy8gREVQUkVDQVRFRDogcmVtb3ZlIGluIDIuMCAoIzcxMTUpCgkJCXJldHVybiBvbGRFZmZlY3RNZXRob2QuY2FsbCh0aGlzLCB7CgkJCQlvcHRpb25zOiBhcmdzLAoJCQkJZHVyYXRpb246IGFyZ3MuZHVyYXRpb24sCgkJCQljYWxsYmFjazogYXJncy5jb21wbGV0ZSwKCQkJCW1vZGU6IGFyZ3MubW9kZQoJCQl9KTsKCQl9Cgl9LAoKCV9zaG93OiAkLmZuLnNob3csCglzaG93OiBmdW5jdGlvbiggc3BlZWQgKSB7CgkJaWYgKCBzdGFuZGFyZFNwZWVkKCBzcGVlZCApICkgewoJCQlyZXR1cm4gdGhpcy5fc2hvdy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJfSBlbHNlIHsKCQkJdmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJYXJncy5tb2RlID0gInNob3ciOwoJCQlyZXR1cm4gdGhpcy5lZmZlY3QuY2FsbCggdGhpcywgYXJncyApOwoJCX0KCX0sCgoJX2hpZGU6ICQuZm4uaGlkZSwKCWhpZGU6IGZ1bmN0aW9uKCBzcGVlZCApIHsKCQlpZiAoIHN0YW5kYXJkU3BlZWQoIHNwZWVkICkgKSB7CgkJCXJldHVybiB0aGlzLl9oaWRlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl9IGVsc2UgewoJCQl2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQlhcmdzLm1vZGUgPSAiaGlkZSI7CgkJCXJldHVybiB0aGlzLmVmZmVjdC5jYWxsKCB0aGlzLCBhcmdzICk7CgkJfQoJfSwKCgkvLyBqUXVlcnkgY29yZSBvdmVybG9hZHMgdG9nZ2xlIGFuZCBjcmVhdGVzIF90b2dnbGUKCV9fdG9nZ2xlOiAkLmZuLnRvZ2dsZSwKCXRvZ2dsZTogZnVuY3Rpb24oIHNwZWVkICkgewoJCWlmICggc3RhbmRhcmRTcGVlZCggc3BlZWQgKSB8fCB0eXBlb2Ygc3BlZWQgPT09ICJib29sZWFuIiB8fCAkLmlzRnVuY3Rpb24oIHNwZWVkICkgKSB7CgkJCXJldHVybiB0aGlzLl9fdG9nZ2xlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl9IGVsc2UgewoJCQl2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQlhcmdzLm1vZGUgPSAidG9nZ2xlIjsKCQkJcmV0dXJuIHRoaXMuZWZmZWN0LmNhbGwoIHRoaXMsIGFyZ3MgKTsKCQl9Cgl9LAoKCS8vIGhlbHBlciBmdW5jdGlvbnMKCWNzc1VuaXQ6IGZ1bmN0aW9uKGtleSkgewoJCXZhciBzdHlsZSA9IHRoaXMuY3NzKCBrZXkgKSwKCQkJdmFsID0gW107CgoJCSQuZWFjaCggWyAiZW0iLCAicHgiLCAiJSIsICJwdCIgXSwgZnVuY3Rpb24oIGksIHVuaXQgKSB7CgkJCWlmICggc3R5bGUuaW5kZXhPZiggdW5pdCApID4gMCApIHsKCQkJCXZhbCA9IFsgcGFyc2VGbG9hdCggc3R5bGUgKSwgdW5pdCBdOwoJCQl9CgkJfSk7CgkJcmV0dXJuIHZhbDsKCX0KfSk7Cgp9KSgpOwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVBU0lORyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCihmdW5jdGlvbigpIHsKCi8vIGJhc2VkIG9uIGVhc2luZyBlcXVhdGlvbnMgZnJvbSBSb2JlcnQgUGVubmVyIChodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nKQoKdmFyIGJhc2VFYXNpbmdzID0ge307CgokLmVhY2goIFsgIlF1YWQiLCAiQ3ViaWMiLCAiUXVhcnQiLCAiUXVpbnQiLCAiRXhwbyIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgliYXNlRWFzaW5nc1sgbmFtZSBdID0gZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIE1hdGgucG93KCBwLCBpICsgMiApOwoJfTsKfSk7CgokLmV4dGVuZCggYmFzZUVhc2luZ3MsIHsKCVNpbmU6IGZ1bmN0aW9uICggcCApIHsKCQlyZXR1cm4gMSAtIE1hdGguY29zKCBwICogTWF0aC5QSSAvIDIgKTsKCX0sCglDaXJjOiBmdW5jdGlvbiAoIHAgKSB7CgkJcmV0dXJuIDEgLSBNYXRoLnNxcnQoIDEgLSBwICogcCApOwoJfSwKCUVsYXN0aWM6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiBwID09PSAwIHx8IHAgPT09IDEgPyBwIDoKCQkJLU1hdGgucG93KCAyLCA4ICogKHAgLSAxKSApICogTWF0aC5zaW4oICggKHAgLSAxKSAqIDgwIC0gNy41ICkgKiBNYXRoLlBJIC8gMTUgKTsKCX0sCglCYWNrOiBmdW5jdGlvbiggcCApIHsKCQlyZXR1cm4gcCAqIHAgKiAoIDMgKiBwIC0gMiApOwoJfSwKCUJvdW5jZTogZnVuY3Rpb24gKCBwICkgewoJCXZhciBwb3cyLAoJCQlib3VuY2UgPSA0OwoKCQl3aGlsZSAoIHAgPCAoICggcG93MiA9IE1hdGgucG93KCAyLCAtLWJvdW5jZSApICkgLSAxICkgLyAxMSApIHt9CgkJcmV0dXJuIDEgLyBNYXRoLnBvdyggNCwgMyAtIGJvdW5jZSApIC0gNy41NjI1ICogTWF0aC5wb3coICggcG93MiAqIDMgLSAyICkgLyAyMiAtIHAsIDIgKTsKCX0KfSk7CgokLmVhY2goIGJhc2VFYXNpbmdzLCBmdW5jdGlvbiggbmFtZSwgZWFzZUluICkgewoJJC5lYXNpbmdbICJlYXNlSW4iICsgbmFtZSBdID0gZWFzZUluOwoJJC5lYXNpbmdbICJlYXNlT3V0IiArIG5hbWUgXSA9IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiAxIC0gZWFzZUluKCAxIC0gcCApOwoJfTsKCSQuZWFzaW5nWyAiZWFzZUluT3V0IiArIG5hbWUgXSA9IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiBwIDwgMC41ID8KCQkJZWFzZUluKCBwICogMiApIC8gMiA6CgkJCTEgLSBlYXNlSW4oIHAgKiAtMiArIDIgKSAvIDI7Cgl9Owp9KTsKCn0pKCk7Cgp9KShqUXVlcnkpKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgcnZlcnRpY2FsID0gL3VwfGRvd258dmVydGljYWwvLAoJcnBvc2l0aXZlbW90aW9uID0gL3VwfGxlZnR8dmVydGljYWx8aG9yaXpvbnRhbC87CgokLmVmZmVjdHMuZWZmZWN0LmJsaW5kID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgkvLyBDcmVhdGUgZWxlbWVudAoJdmFyIGVsID0gJCggdGhpcyApLAoJCXByb3BzID0gWyAicG9zaXRpb24iLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgImhlaWdodCIsICJ3aWR0aCIgXSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgImhpZGUiICksCgkJZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgInVwIiwKCQl2ZXJ0aWNhbCA9IHJ2ZXJ0aWNhbC50ZXN0KCBkaXJlY3Rpb24gKSwKCQlyZWYgPSB2ZXJ0aWNhbCA/ICJoZWlnaHQiIDogIndpZHRoIiwKCQlyZWYyID0gdmVydGljYWwgPyAidG9wIiA6ICJsZWZ0IiwKCQltb3Rpb24gPSBycG9zaXRpdmVtb3Rpb24udGVzdCggZGlyZWN0aW9uICksCgkJYW5pbWF0aW9uID0ge30sCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQl3cmFwcGVyLCBkaXN0YW5jZSwgbWFyZ2luOwoKCS8vIGlmIGFscmVhZHkgd3JhcHBlZCwgdGhlIHdyYXBwZXIncyBwcm9wZXJ0aWVzIGFyZSBteSBwcm9wZXJ0eS4gIzYyNDUKCWlmICggZWwucGFyZW50KCkuaXMoICIudWktZWZmZWN0cy13cmFwcGVyIiApICkgewoJCSQuZWZmZWN0cy5zYXZlKCBlbC5wYXJlbnQoKSwgcHJvcHMgKTsKCX0gZWxzZSB7CgkJJC5lZmZlY3RzLnNhdmUoIGVsLCBwcm9wcyApOwoJfQoJZWwuc2hvdygpOwoJd3JhcHBlciA9ICQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApLmNzcyh7CgkJb3ZlcmZsb3c6ICJoaWRkZW4iCgl9KTsKCglkaXN0YW5jZSA9IHdyYXBwZXJbIHJlZiBdKCk7CgltYXJnaW4gPSBwYXJzZUZsb2F0KCB3cmFwcGVyLmNzcyggcmVmMiApICkgfHwgMDsKCglhbmltYXRpb25bIHJlZiBdID0gc2hvdyA/IGRpc3RhbmNlIDogMDsKCWlmICggIW1vdGlvbiApIHsKCQllbAoJCQkuY3NzKCB2ZXJ0aWNhbCA/ICJib3R0b20iIDogInJpZ2h0IiwgMCApCgkJCS5jc3MoIHZlcnRpY2FsID8gInRvcCIgOiAibGVmdCIsICJhdXRvIiApCgkJCS5jc3MoeyBwb3NpdGlvbjogImFic29sdXRlIiB9KTsKCgkJYW5pbWF0aW9uWyByZWYyIF0gPSBzaG93ID8gbWFyZ2luIDogZGlzdGFuY2UgKyBtYXJnaW47Cgl9CgoJLy8gc3RhcnQgYXQgMCBpZiB3ZSBhcmUgc2hvd2luZwoJaWYgKCBzaG93ICkgewoJCXdyYXBwZXIuY3NzKCByZWYsIDAgKTsKCQlpZiAoICEgbW90aW9uICkgewoJCQl3cmFwcGVyLmNzcyggcmVmMiwgbWFyZ2luICsgZGlzdGFuY2UgKTsKCQl9Cgl9CgoJLy8gQW5pbWF0ZQoJd3JhcHBlci5hbmltYXRlKCBhbmltYXRpb24sIHsKCQlkdXJhdGlvbjogby5kdXJhdGlvbiwKCQllYXNpbmc6IG8uZWFzaW5nLAoJCXF1ZXVlOiBmYWxzZSwKCQljb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCWlmICggbW9kZSA9PT0gImhpZGUiICkgewoJCQkJZWwuaGlkZSgpOwoJCQl9CgkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkJJC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7CgkJCWRvbmUoKTsKCQl9Cgl9KTsKCn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuYm91bmNlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7Cgl2YXIgZWwgPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAiaGVpZ2h0IiwgIndpZHRoIiBdLAoKCQkvLyBkZWZhdWx0czoKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgImVmZmVjdCIgKSwKCQloaWRlID0gbW9kZSA9PT0gImhpZGUiLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgkJZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgInVwIiwKCQlkaXN0YW5jZSA9IG8uZGlzdGFuY2UsCgkJdGltZXMgPSBvLnRpbWVzIHx8IDUsCgoJCS8vIG51bWJlciBvZiBpbnRlcm5hbCBhbmltYXRpb25zCgkJYW5pbXMgPSB0aW1lcyAqIDIgKyAoIHNob3cgfHwgaGlkZSA/IDEgOiAwICksCgkJc3BlZWQgPSBvLmR1cmF0aW9uIC8gYW5pbXMsCgkJZWFzaW5nID0gby5lYXNpbmcsCgoJCS8vIHV0aWxpdHk6CgkJcmVmID0gKCBkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAiZG93biIgKSA/ICJ0b3AiIDogImxlZnQiLAoJCW1vdGlvbiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImxlZnQiICksCgkJaSwKCQl1cEFuaW0sCgkJZG93bkFuaW0sCgoJCS8vIHdlIHdpbGwgbmVlZCB0byByZS1hc3NlbWJsZSB0aGUgcXVldWUgdG8gc3RhY2sgb3VyIGFuaW1hdGlvbnMgaW4gcGxhY2UKCQlxdWV1ZSA9IGVsLnF1ZXVlKCksCgkJcXVldWVsZW4gPSBxdWV1ZS5sZW5ndGg7CgoJLy8gQXZvaWQgdG91Y2hpbmcgb3BhY2l0eSB0byBwcmV2ZW50IGNsZWFyVHlwZSBhbmQgUE5HIGlzc3VlcyBpbiBJRQoJaWYgKCBzaG93IHx8IGhpZGUgKSB7CgkJcHJvcHMucHVzaCggIm9wYWNpdHkiICk7Cgl9CgoJJC5lZmZlY3RzLnNhdmUoIGVsLCBwcm9wcyApOwoJZWwuc2hvdygpOwoJJC5lZmZlY3RzLmNyZWF0ZVdyYXBwZXIoIGVsICk7IC8vIENyZWF0ZSBXcmFwcGVyCgoJLy8gZGVmYXVsdCBkaXN0YW5jZSBmb3IgdGhlIEJJR0dFU1QgYm91bmNlIGlzIHRoZSBvdXRlciBEaXN0YW5jZSAvIDMKCWlmICggIWRpc3RhbmNlICkgewoJCWRpc3RhbmNlID0gZWxbIHJlZiA9PT0gInRvcCIgPyAib3V0ZXJIZWlnaHQiIDogIm91dGVyV2lkdGgiIF0oKSAvIDM7Cgl9CgoJaWYgKCBzaG93ICkgewoJCWRvd25BbmltID0geyBvcGFjaXR5OiAxIH07CgkJZG93bkFuaW1bIHJlZiBdID0gMDsKCgkJLy8gaWYgd2UgYXJlIHNob3dpbmcsIGZvcmNlIG9wYWNpdHkgMCBhbmQgc2V0IHRoZSBpbml0aWFsIHBvc2l0aW9uCgkJLy8gdGhlbiBkbyB0aGUgImZpcnN0IiBhbmltYXRpb24KCQllbC5jc3MoICJvcGFjaXR5IiwgMCApCgkJCS5jc3MoIHJlZiwgbW90aW9uID8gLWRpc3RhbmNlICogMiA6IGRpc3RhbmNlICogMiApCgkJCS5hbmltYXRlKCBkb3duQW5pbSwgc3BlZWQsIGVhc2luZyApOwoJfQoKCS8vIHN0YXJ0IGF0IHRoZSBzbWFsbGVzdCBkaXN0YW5jZSBpZiB3ZSBhcmUgaGlkaW5nCglpZiAoIGhpZGUgKSB7CgkJZGlzdGFuY2UgPSBkaXN0YW5jZSAvIE1hdGgucG93KCAyLCB0aW1lcyAtIDEgKTsKCX0KCglkb3duQW5pbSA9IHt9OwoJZG93bkFuaW1bIHJlZiBdID0gMDsKCS8vIEJvdW5jZXMgdXAvZG93bi9sZWZ0L3JpZ2h0IHRoZW4gYmFjayB0byAwIC0tIHRpbWVzICogMiBhbmltYXRpb25zIGhhcHBlbiBoZXJlCglmb3IgKCBpID0gMDsgaSA8IHRpbWVzOyBpKysgKSB7CgkJdXBBbmltID0ge307CgkJdXBBbmltWyByZWYgXSA9ICggbW90aW9uID8gIi09IiA6ICIrPSIgKSArIGRpc3RhbmNlOwoKCQllbC5hbmltYXRlKCB1cEFuaW0sIHNwZWVkLCBlYXNpbmcgKQoJCQkuYW5pbWF0ZSggZG93bkFuaW0sIHNwZWVkLCBlYXNpbmcgKTsKCgkJZGlzdGFuY2UgPSBoaWRlID8gZGlzdGFuY2UgKiAyIDogZGlzdGFuY2UgLyAyOwoJfQoKCS8vIExhc3QgQm91bmNlIHdoZW4gSGlkaW5nCglpZiAoIGhpZGUgKSB7CgkJdXBBbmltID0geyBvcGFjaXR5OiAwIH07CgkJdXBBbmltWyByZWYgXSA9ICggbW90aW9uID8gIi09IiA6ICIrPSIgKSArIGRpc3RhbmNlOwoKCQllbC5hbmltYXRlKCB1cEFuaW0sIHNwZWVkLCBlYXNpbmcgKTsKCX0KCgllbC5xdWV1ZShmdW5jdGlvbigpIHsKCQlpZiAoIGhpZGUgKSB7CgkJCWVsLmhpZGUoKTsKCQl9CgkJJC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApOwoJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCWRvbmUoKTsKCX0pOwoKCS8vIGluamVjdCBhbGwgdGhlIGFuaW1hdGlvbnMgd2UganVzdCBxdWV1ZWQgdG8gYmUgZmlyc3QgaW4gbGluZSAoYWZ0ZXIgImlucHJvZ3Jlc3MiKQoJaWYgKCBxdWV1ZWxlbiA+IDEpIHsKCQlxdWV1ZS5zcGxpY2UuYXBwbHkoIHF1ZXVlLAoJCQlbIDEsIDAgXS5jb25jYXQoIHF1ZXVlLnNwbGljZSggcXVldWVsZW4sIGFuaW1zICsgMSApICkgKTsKCX0KCWVsLmRlcXVldWUoKTsKCn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuY2xpcCA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQlwcm9wcyA9IFsgInBvc2l0aW9uIiwgInRvcCIsICJib3R0b20iLCAibGVmdCIsICJyaWdodCIsICJoZWlnaHQiLCAid2lkdGgiIF0sCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJoaWRlIiApLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgkJZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgInZlcnRpY2FsIiwKCQl2ZXJ0ID0gZGlyZWN0aW9uID09PSAidmVydGljYWwiLAoJCXNpemUgPSB2ZXJ0ID8gImhlaWdodCIgOiAid2lkdGgiLAoJCXBvc2l0aW9uID0gdmVydCA/ICJ0b3AiIDogImxlZnQiLAoJCWFuaW1hdGlvbiA9IHt9LAoJCXdyYXBwZXIsIGFuaW1hdGUsIGRpc3RhbmNlOwoKCS8vIFNhdmUgJiBTaG93CgkkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7CgllbC5zaG93KCk7CgoJLy8gQ3JlYXRlIFdyYXBwZXIKCXdyYXBwZXIgPSAkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3MoewoJCW92ZXJmbG93OiAiaGlkZGVuIgoJfSk7CglhbmltYXRlID0gKCBlbFswXS50YWdOYW1lID09PSAiSU1HIiApID8gd3JhcHBlciA6IGVsOwoJZGlzdGFuY2UgPSBhbmltYXRlWyBzaXplIF0oKTsKCgkvLyBTaGlmdAoJaWYgKCBzaG93ICkgewoJCWFuaW1hdGUuY3NzKCBzaXplLCAwICk7CgkJYW5pbWF0ZS5jc3MoIHBvc2l0aW9uLCBkaXN0YW5jZSAvIDIgKTsKCX0KCgkvLyBDcmVhdGUgQW5pbWF0aW9uIE9iamVjdDoKCWFuaW1hdGlvblsgc2l6ZSBdID0gc2hvdyA/IGRpc3RhbmNlIDogMDsKCWFuaW1hdGlvblsgcG9zaXRpb24gXSA9IHNob3cgPyAwIDogZGlzdGFuY2UgLyAyOwoKCS8vIEFuaW1hdGUKCWFuaW1hdGUuYW5pbWF0ZSggYW5pbWF0aW9uLCB7CgkJcXVldWU6IGZhbHNlLAoJCWR1cmF0aW9uOiBvLmR1cmF0aW9uLAoJCWVhc2luZzogby5lYXNpbmcsCgkJY29tcGxldGU6IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFzaG93ICkgewoJCQkJZWwuaGlkZSgpOwoJCQl9CgkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkJJC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7CgkJCWRvbmUoKTsKCQl9Cgl9KTsKCn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuZHJvcCA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQlwcm9wcyA9IFsgInBvc2l0aW9uIiwgInRvcCIsICJib3R0b20iLCAibGVmdCIsICJyaWdodCIsICJvcGFjaXR5IiwgImhlaWdodCIsICJ3aWR0aCIgXSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgImhpZGUiICksCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQlkaXJlY3Rpb24gPSBvLmRpcmVjdGlvbiB8fCAibGVmdCIsCgkJcmVmID0gKCBkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAiZG93biIgKSA/ICJ0b3AiIDogImxlZnQiLAoJCW1vdGlvbiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImxlZnQiICkgPyAicG9zIiA6ICJuZWciLAoJCWFuaW1hdGlvbiA9IHsKCQkJb3BhY2l0eTogc2hvdyA/IDEgOiAwCgkJfSwKCQlkaXN0YW5jZTsKCgkvLyBBZGp1c3QKCSQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTsKCWVsLnNob3coKTsKCSQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApOwoKCWRpc3RhbmNlID0gby5kaXN0YW5jZSB8fCBlbFsgcmVmID09PSAidG9wIiA/ICJvdXRlckhlaWdodCI6ICJvdXRlcldpZHRoIiBdKCB0cnVlICkgLyAyOwoKCWlmICggc2hvdyApIHsKCQllbAoJCQkuY3NzKCAib3BhY2l0eSIsIDAgKQoJCQkuY3NzKCByZWYsIG1vdGlvbiA9PT0gInBvcyIgPyAtZGlzdGFuY2UgOiBkaXN0YW5jZSApOwoJfQoKCS8vIEFuaW1hdGlvbgoJYW5pbWF0aW9uWyByZWYgXSA9ICggc2hvdyA/CgkJKCBtb3Rpb24gPT09ICJwb3MiID8gIis9IiA6ICItPSIgKSA6CgkJKCBtb3Rpb24gPT09ICJwb3MiID8gIi09IiA6ICIrPSIgKSApICsKCQlkaXN0YW5jZTsKCgkvLyBBbmltYXRlCgllbC5hbmltYXRlKCBhbmltYXRpb24sIHsKCQlxdWV1ZTogZmFsc2UsCgkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJZWFzaW5nOiBvLmVhc2luZywKCQljb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCWlmICggbW9kZSA9PT0gImhpZGUiICkgewoJCQkJZWwuaGlkZSgpOwoJCQl9CgkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkJJC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7CgkJCWRvbmUoKTsKCQl9Cgl9KTsKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5leHBsb2RlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgoJdmFyIHJvd3MgPSBvLnBpZWNlcyA/IE1hdGgucm91bmQoIE1hdGguc3FydCggby5waWVjZXMgKSApIDogMywKCQljZWxscyA9IHJvd3MsCgkJZWwgPSAkKCB0aGlzICksCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJoaWRlIiApLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgoJCS8vIHNob3cgYW5kIHRoZW4gdmlzaWJpbGl0eTpoaWRkZW4gdGhlIGVsZW1lbnQgYmVmb3JlIGNhbGN1bGF0aW5nIG9mZnNldAoJCW9mZnNldCA9IGVsLnNob3coKS5jc3MoICJ2aXNpYmlsaXR5IiwgImhpZGRlbiIgKS5vZmZzZXQoKSwKCgkJLy8gd2lkdGggYW5kIGhlaWdodCBvZiBhIHBpZWNlCgkJd2lkdGggPSBNYXRoLmNlaWwoIGVsLm91dGVyV2lkdGgoKSAvIGNlbGxzICksCgkJaGVpZ2h0ID0gTWF0aC5jZWlsKCBlbC5vdXRlckhlaWdodCgpIC8gcm93cyApLAoJCXBpZWNlcyA9IFtdLAoKCQkvLyBsb29wCgkJaSwgaiwgbGVmdCwgdG9wLCBteCwgbXk7CgoJLy8gY2hpbGRyZW4gYW5pbWF0ZSBjb21wbGV0ZToKCWZ1bmN0aW9uIGNoaWxkQ29tcGxldGUoKSB7CgkJcGllY2VzLnB1c2goIHRoaXMgKTsKCQlpZiAoIHBpZWNlcy5sZW5ndGggPT09IHJvd3MgKiBjZWxscyApIHsKCQkJYW5pbUNvbXBsZXRlKCk7CgkJfQoJfQoKCS8vIGNsb25lIHRoZSBlbGVtZW50IGZvciBlYWNoIHJvdyBhbmQgY2VsbC4KCWZvciggaSA9IDA7IGkgPCByb3dzIDsgaSsrICkgeyAvLyA9PT0+CgkJdG9wID0gb2Zmc2V0LnRvcCArIGkgKiBoZWlnaHQ7CgkJbXkgPSBpIC0gKCByb3dzIC0gMSApIC8gMiA7CgoJCWZvciggaiA9IDA7IGogPCBjZWxscyA7IGorKyApIHsgLy8gfHx8CgkJCWxlZnQgPSBvZmZzZXQubGVmdCArIGogKiB3aWR0aDsKCQkJbXggPSBqIC0gKCBjZWxscyAtIDEgKSAvIDIgOwoKCQkJLy8gQ3JlYXRlIGEgY2xvbmUgb2YgdGhlIG5vdyBoaWRkZW4gbWFpbiBlbGVtZW50IHRoYXQgd2lsbCBiZSBhYnNvbHV0ZSBwb3NpdGlvbmVkCgkJCS8vIHdpdGhpbiBhIHdyYXBwZXIgZGl2IG9mZiB0aGUgLWxlZnQgYW5kIC10b3AgZXF1YWwgdG8gc2l6ZSBvZiBvdXIgcGllY2VzCgkJCWVsCgkJCQkuY2xvbmUoKQoJCQkJLmFwcGVuZFRvKCAiYm9keSIgKQoJCQkJLndyYXAoICI8ZGl2PjwvZGl2PiIgKQoJCQkJLmNzcyh7CgkJCQkJcG9zaXRpb246ICJhYnNvbHV0ZSIsCgkJCQkJdmlzaWJpbGl0eTogInZpc2libGUiLAoJCQkJCWxlZnQ6IC1qICogd2lkdGgsCgkJCQkJdG9wOiAtaSAqIGhlaWdodAoJCQkJfSkKCgkJCS8vIHNlbGVjdCB0aGUgd3JhcHBlciAtIG1ha2UgaXQgb3ZlcmZsb3c6IGhpZGRlbiBhbmQgYWJzb2x1dGUgcG9zaXRpb25lZCBiYXNlZCBvbgoJCQkvLyB3aGVyZSB0aGUgb3JpZ2luYWwgd2FzIGxvY2F0ZWQgK2xlZnQgYW5kICt0b3AgZXF1YWwgdG8gdGhlIHNpemUgb2YgcGllY2VzCgkJCQkucGFyZW50KCkKCQkJCS5hZGRDbGFzcyggInVpLWVmZmVjdHMtZXhwbG9kZSIgKQoJCQkJLmNzcyh7CgkJCQkJcG9zaXRpb246ICJhYnNvbHV0ZSIsCgkJCQkJb3ZlcmZsb3c6ICJoaWRkZW4iLAoJCQkJCXdpZHRoOiB3aWR0aCwKCQkJCQloZWlnaHQ6IGhlaWdodCwKCQkJCQlsZWZ0OiBsZWZ0ICsgKCBzaG93ID8gbXggKiB3aWR0aCA6IDAgKSwKCQkJCQl0b3A6IHRvcCArICggc2hvdyA/IG15ICogaGVpZ2h0IDogMCApLAoJCQkJCW9wYWNpdHk6IHNob3cgPyAwIDogMQoJCQkJfSkuYW5pbWF0ZSh7CgkJCQkJbGVmdDogbGVmdCArICggc2hvdyA/IDAgOiBteCAqIHdpZHRoICksCgkJCQkJdG9wOiB0b3AgKyAoIHNob3cgPyAwIDogbXkgKiBoZWlnaHQgKSwKCQkJCQlvcGFjaXR5OiBzaG93ID8gMSA6IDAKCQkJCX0sIG8uZHVyYXRpb24gfHwgNTAwLCBvLmVhc2luZywgY2hpbGRDb21wbGV0ZSApOwoJCX0KCX0KCglmdW5jdGlvbiBhbmltQ29tcGxldGUoKSB7CgkJZWwuY3NzKHsKCQkJdmlzaWJpbGl0eTogInZpc2libGUiCgkJfSk7CgkJJCggcGllY2VzICkucmVtb3ZlKCk7CgkJaWYgKCAhc2hvdyApIHsKCQkJZWwuaGlkZSgpOwoJCX0KCQlkb25lKCk7Cgl9Cn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuZmFkZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJdmFyIGVsID0gJCggdGhpcyApLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAidG9nZ2xlIiApOwoKCWVsLmFuaW1hdGUoewoJCW9wYWNpdHk6IG1vZGUKCX0sIHsKCQlxdWV1ZTogZmFsc2UsCgkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJZWFzaW5nOiBvLmVhc2luZywKCQljb21wbGV0ZTogZG9uZQoJfSk7Cn07Cgp9KSggalF1ZXJ5ICk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5mb2xkID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQlwcm9wcyA9IFsgInBvc2l0aW9uIiwgInRvcCIsICJib3R0b20iLCAibGVmdCIsICJyaWdodCIsICJoZWlnaHQiLCAid2lkdGgiIF0sCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJoaWRlIiApLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgkJaGlkZSA9IG1vZGUgPT09ICJoaWRlIiwKCQlzaXplID0gby5zaXplIHx8IDE1LAoJCXBlcmNlbnQgPSAvKFswLTldKyklLy5leGVjKCBzaXplICksCgkJaG9yaXpGaXJzdCA9ICEhby5ob3JpekZpcnN0LAoJCXdpZHRoRmlyc3QgPSBzaG93ICE9PSBob3JpekZpcnN0LAoJCXJlZiA9IHdpZHRoRmlyc3QgPyBbICJ3aWR0aCIsICJoZWlnaHQiIF0gOiBbICJoZWlnaHQiLCAid2lkdGgiIF0sCgkJZHVyYXRpb24gPSBvLmR1cmF0aW9uIC8gMiwKCQl3cmFwcGVyLCBkaXN0YW5jZSwKCQlhbmltYXRpb24xID0ge30sCgkJYW5pbWF0aW9uMiA9IHt9OwoKCSQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTsKCWVsLnNob3coKTsKCgkvLyBDcmVhdGUgV3JhcHBlcgoJd3JhcHBlciA9ICQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApLmNzcyh7CgkJb3ZlcmZsb3c6ICJoaWRkZW4iCgl9KTsKCWRpc3RhbmNlID0gd2lkdGhGaXJzdCA/CgkJWyB3cmFwcGVyLndpZHRoKCksIHdyYXBwZXIuaGVpZ2h0KCkgXSA6CgkJWyB3cmFwcGVyLmhlaWdodCgpLCB3cmFwcGVyLndpZHRoKCkgXTsKCglpZiAoIHBlcmNlbnQgKSB7CgkJc2l6ZSA9IHBhcnNlSW50KCBwZXJjZW50WyAxIF0sIDEwICkgLyAxMDAgKiBkaXN0YW5jZVsgaGlkZSA/IDAgOiAxIF07Cgl9CglpZiAoIHNob3cgKSB7CgkJd3JhcHBlci5jc3MoIGhvcml6Rmlyc3QgPyB7CgkJCWhlaWdodDogMCwKCQkJd2lkdGg6IHNpemUKCQl9IDogewoJCQloZWlnaHQ6IHNpemUsCgkJCXdpZHRoOiAwCgkJfSk7Cgl9CgoJLy8gQW5pbWF0aW9uCglhbmltYXRpb24xWyByZWZbIDAgXSBdID0gc2hvdyA/IGRpc3RhbmNlWyAwIF0gOiBzaXplOwoJYW5pbWF0aW9uMlsgcmVmWyAxIF0gXSA9IHNob3cgPyBkaXN0YW5jZVsgMSBdIDogMDsKCgkvLyBBbmltYXRlCgl3cmFwcGVyCgkJLmFuaW1hdGUoIGFuaW1hdGlvbjEsIGR1cmF0aW9uLCBvLmVhc2luZyApCgkJLmFuaW1hdGUoIGFuaW1hdGlvbjIsIGR1cmF0aW9uLCBvLmVhc2luZywgZnVuY3Rpb24oKSB7CgkJCWlmICggaGlkZSApIHsKCQkJCWVsLmhpZGUoKTsKCQkJfQoJCQkkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7CgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfSk7Cgp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LmhpZ2hsaWdodCA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJiYWNrZ3JvdW5kSW1hZ2UiLCAiYmFja2dyb3VuZENvbG9yIiwgIm9wYWNpdHkiIF0sCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbGVtLCBvLm1vZGUgfHwgInNob3ciICksCgkJYW5pbWF0aW9uID0gewoJCQliYWNrZ3JvdW5kQ29sb3I6IGVsZW0uY3NzKCAiYmFja2dyb3VuZENvbG9yIiApCgkJfTsKCglpZiAobW9kZSA9PT0gImhpZGUiKSB7CgkJYW5pbWF0aW9uLm9wYWNpdHkgPSAwOwoJfQoKCSQuZWZmZWN0cy5zYXZlKCBlbGVtLCBwcm9wcyApOwoKCWVsZW0KCQkuc2hvdygpCgkJLmNzcyh7CgkJCWJhY2tncm91bmRJbWFnZTogIm5vbmUiLAoJCQliYWNrZ3JvdW5kQ29sb3I6IG8uY29sb3IgfHwgIiNmZmZmOTkiCgkJfSkKCQkuYW5pbWF0ZSggYW5pbWF0aW9uLCB7CgkJCXF1ZXVlOiBmYWxzZSwKCQkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJCWVhc2luZzogby5lYXNpbmcsCgkJCWNvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQkJCWlmICggbW9kZSA9PT0gImhpZGUiICkgewoJCQkJCWVsZW0uaGlkZSgpOwoJCQkJfQoJCQkJJC5lZmZlY3RzLnJlc3RvcmUoIGVsZW0sIHByb3BzICk7CgkJCQlkb25lKCk7CgkJCX0KCQl9KTsKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5wdWxzYXRlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7Cgl2YXIgZWxlbSA9ICQoIHRoaXMgKSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsZW0sIG8ubW9kZSB8fCAic2hvdyIgKSwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoJCWhpZGUgPSBtb2RlID09PSAiaGlkZSIsCgkJc2hvd2hpZGUgPSAoIHNob3cgfHwgbW9kZSA9PT0gImhpZGUiICksCgoJCS8vIHNob3dpbmcgb3IgaGlkaW5nIGxlYXZlcyBvZiB0aGUgImxhc3QiIGFuaW1hdGlvbgoJCWFuaW1zID0gKCAoIG8udGltZXMgfHwgNSApICogMiApICsgKCBzaG93aGlkZSA/IDEgOiAwICksCgkJZHVyYXRpb24gPSBvLmR1cmF0aW9uIC8gYW5pbXMsCgkJYW5pbWF0ZVRvID0gMCwKCQlxdWV1ZSA9IGVsZW0ucXVldWUoKSwKCQlxdWV1ZWxlbiA9IHF1ZXVlLmxlbmd0aCwKCQlpOwoKCWlmICggc2hvdyB8fCAhZWxlbS5pcygiOnZpc2libGUiKSkgewoJCWVsZW0uY3NzKCAib3BhY2l0eSIsIDAgKS5zaG93KCk7CgkJYW5pbWF0ZVRvID0gMTsKCX0KCgkvLyBhbmltcyAtIDEgb3BhY2l0eSAidG9nZ2xlcyIKCWZvciAoIGkgPSAxOyBpIDwgYW5pbXM7IGkrKyApIHsKCQllbGVtLmFuaW1hdGUoewoJCQlvcGFjaXR5OiBhbmltYXRlVG8KCQl9LCBkdXJhdGlvbiwgby5lYXNpbmcgKTsKCQlhbmltYXRlVG8gPSAxIC0gYW5pbWF0ZVRvOwoJfQoKCWVsZW0uYW5pbWF0ZSh7CgkJb3BhY2l0eTogYW5pbWF0ZVRvCgl9LCBkdXJhdGlvbiwgby5lYXNpbmcpOwoKCWVsZW0ucXVldWUoZnVuY3Rpb24oKSB7CgkJaWYgKCBoaWRlICkgewoJCQllbGVtLmhpZGUoKTsKCQl9CgkJZG9uZSgpOwoJfSk7CgoJLy8gV2UganVzdCBxdWV1ZWQgdXAgImFuaW1zIiBhbmltYXRpb25zLCB3ZSBuZWVkIHRvIHB1dCB0aGVtIG5leHQgaW4gdGhlIHF1ZXVlCglpZiAoIHF1ZXVlbGVuID4gMSApIHsKCQlxdWV1ZS5zcGxpY2UuYXBwbHkoIHF1ZXVlLAoJCQlbIDEsIDAgXS5jb25jYXQoIHF1ZXVlLnNwbGljZSggcXVldWVsZW4sIGFuaW1zICsgMSApICkgKTsKCX0KCWVsZW0uZGVxdWV1ZSgpOwp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LnB1ZmYgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCXZhciBlbGVtID0gJCggdGhpcyApLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWxlbSwgby5tb2RlIHx8ICJoaWRlIiApLAoJCWhpZGUgPSBtb2RlID09PSAiaGlkZSIsCgkJcGVyY2VudCA9IHBhcnNlSW50KCBvLnBlcmNlbnQsIDEwICkgfHwgMTUwLAoJCWZhY3RvciA9IHBlcmNlbnQgLyAxMDAsCgkJb3JpZ2luYWwgPSB7CgkJCWhlaWdodDogZWxlbS5oZWlnaHQoKSwKCQkJd2lkdGg6IGVsZW0ud2lkdGgoKSwKCQkJb3V0ZXJIZWlnaHQ6IGVsZW0ub3V0ZXJIZWlnaHQoKSwKCQkJb3V0ZXJXaWR0aDogZWxlbS5vdXRlcldpZHRoKCkKCQl9OwoKCSQuZXh0ZW5kKCBvLCB7CgkJZWZmZWN0OiAic2NhbGUiLAoJCXF1ZXVlOiBmYWxzZSwKCQlmYWRlOiB0cnVlLAoJCW1vZGU6IG1vZGUsCgkJY29tcGxldGU6IGRvbmUsCgkJcGVyY2VudDogaGlkZSA/IHBlcmNlbnQgOiAxMDAsCgkJZnJvbTogaGlkZSA/CgkJCW9yaWdpbmFsIDoKCQkJewoJCQkJaGVpZ2h0OiBvcmlnaW5hbC5oZWlnaHQgKiBmYWN0b3IsCgkJCQl3aWR0aDogb3JpZ2luYWwud2lkdGggKiBmYWN0b3IsCgkJCQlvdXRlckhlaWdodDogb3JpZ2luYWwub3V0ZXJIZWlnaHQgKiBmYWN0b3IsCgkJCQlvdXRlcldpZHRoOiBvcmlnaW5hbC5vdXRlcldpZHRoICogZmFjdG9yCgkJCX0KCX0pOwoKCWVsZW0uZWZmZWN0KCBvICk7Cn07CgokLmVmZmVjdHMuZWZmZWN0LnNjYWxlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQlvcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHt9LCBvICksCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJlZmZlY3QiICksCgkJcGVyY2VudCA9IHBhcnNlSW50KCBvLnBlcmNlbnQsIDEwICkgfHwKCQkJKCBwYXJzZUludCggby5wZXJjZW50LCAxMCApID09PSAwID8gMCA6ICggbW9kZSA9PT0gImhpZGUiID8gMCA6IDEwMCApICksCgkJZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgImJvdGgiLAoJCW9yaWdpbiA9IG8ub3JpZ2luLAoJCW9yaWdpbmFsID0gewoJCQloZWlnaHQ6IGVsLmhlaWdodCgpLAoJCQl3aWR0aDogZWwud2lkdGgoKSwKCQkJb3V0ZXJIZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCksCgkJCW91dGVyV2lkdGg6IGVsLm91dGVyV2lkdGgoKQoJCX0sCgkJZmFjdG9yID0gewoJCQl5OiBkaXJlY3Rpb24gIT09ICJob3Jpem9udGFsIiA/IChwZXJjZW50IC8gMTAwKSA6IDEsCgkJCXg6IGRpcmVjdGlvbiAhPT0gInZlcnRpY2FsIiA/IChwZXJjZW50IC8gMTAwKSA6IDEKCQl9OwoKCS8vIFdlIGFyZSBnb2luZyB0byBwYXNzIHRoaXMgZWZmZWN0IHRvIHRoZSBzaXplIGVmZmVjdDoKCW9wdGlvbnMuZWZmZWN0ID0gInNpemUiOwoJb3B0aW9ucy5xdWV1ZSA9IGZhbHNlOwoJb3B0aW9ucy5jb21wbGV0ZSA9IGRvbmU7CgoJLy8gU2V0IGRlZmF1bHQgb3JpZ2luIGFuZCByZXN0b3JlIGZvciBzaG93L2hpZGUKCWlmICggbW9kZSAhPT0gImVmZmVjdCIgKSB7CgkJb3B0aW9ucy5vcmlnaW4gPSBvcmlnaW4gfHwgWyJtaWRkbGUiLCJjZW50ZXIiXTsKCQlvcHRpb25zLnJlc3RvcmUgPSB0cnVlOwoJfQoKCW9wdGlvbnMuZnJvbSA9IG8uZnJvbSB8fCAoIG1vZGUgPT09ICJzaG93IiA/IHsKCQloZWlnaHQ6IDAsCgkJd2lkdGg6IDAsCgkJb3V0ZXJIZWlnaHQ6IDAsCgkJb3V0ZXJXaWR0aDogMAoJfSA6IG9yaWdpbmFsICk7CglvcHRpb25zLnRvID0gewoJCWhlaWdodDogb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLnksCgkJd2lkdGg6IG9yaWdpbmFsLndpZHRoICogZmFjdG9yLngsCgkJb3V0ZXJIZWlnaHQ6IG9yaWdpbmFsLm91dGVySGVpZ2h0ICogZmFjdG9yLnksCgkJb3V0ZXJXaWR0aDogb3JpZ2luYWwub3V0ZXJXaWR0aCAqIGZhY3Rvci54Cgl9OwoKCS8vIEZhZGUgb3B0aW9uIHRvIHN1cHBvcnQgcHVmZgoJaWYgKCBvcHRpb25zLmZhZGUgKSB7CgkJaWYgKCBtb2RlID09PSAic2hvdyIgKSB7CgkJCW9wdGlvbnMuZnJvbS5vcGFjaXR5ID0gMDsKCQkJb3B0aW9ucy50by5vcGFjaXR5ID0gMTsKCQl9CgkJaWYgKCBtb2RlID09PSAiaGlkZSIgKSB7CgkJCW9wdGlvbnMuZnJvbS5vcGFjaXR5ID0gMTsKCQkJb3B0aW9ucy50by5vcGFjaXR5ID0gMDsKCQl9Cgl9CgoJLy8gQW5pbWF0ZQoJZWwuZWZmZWN0KCBvcHRpb25zICk7Cgp9OwoKJC5lZmZlY3RzLmVmZmVjdC5zaXplID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBvcmlnaW5hbCwgYmFzZWxpbmUsIGZhY3RvciwKCQllbCA9ICQoIHRoaXMgKSwKCQlwcm9wczAgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAid2lkdGgiLCAiaGVpZ2h0IiwgIm92ZXJmbG93IiwgIm9wYWNpdHkiIF0sCgoJCS8vIEFsd2F5cyByZXN0b3JlCgkJcHJvcHMxID0gWyAicG9zaXRpb24iLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgIm92ZXJmbG93IiwgIm9wYWNpdHkiIF0sCgoJCS8vIENvcHkgZm9yIGNoaWxkcmVuCgkJcHJvcHMyID0gWyAid2lkdGgiLCAiaGVpZ2h0IiwgIm92ZXJmbG93IiBdLAoJCWNQcm9wcyA9IFsgImZvbnRTaXplIiBdLAoJCXZQcm9wcyA9IFsgImJvcmRlclRvcFdpZHRoIiwgImJvcmRlckJvdHRvbVdpZHRoIiwgInBhZGRpbmdUb3AiLCAicGFkZGluZ0JvdHRvbSIgXSwKCQloUHJvcHMgPSBbICJib3JkZXJMZWZ0V2lkdGgiLCAiYm9yZGVyUmlnaHRXaWR0aCIsICJwYWRkaW5nTGVmdCIsICJwYWRkaW5nUmlnaHQiIF0sCgoJCS8vIFNldCBvcHRpb25zCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJlZmZlY3QiICksCgkJcmVzdG9yZSA9IG8ucmVzdG9yZSB8fCBtb2RlICE9PSAiZWZmZWN0IiwKCQlzY2FsZSA9IG8uc2NhbGUgfHwgImJvdGgiLAoJCW9yaWdpbiA9IG8ub3JpZ2luIHx8IFsgIm1pZGRsZSIsICJjZW50ZXIiIF0sCgkJcG9zaXRpb24gPSBlbC5jc3MoICJwb3NpdGlvbiIgKSwKCQlwcm9wcyA9IHJlc3RvcmUgPyBwcm9wczAgOiBwcm9wczEsCgkJemVybyA9IHsKCQkJaGVpZ2h0OiAwLAoJCQl3aWR0aDogMCwKCQkJb3V0ZXJIZWlnaHQ6IDAsCgkJCW91dGVyV2lkdGg6IDAKCQl9OwoKCWlmICggbW9kZSA9PT0gInNob3ciICkgewoJCWVsLnNob3coKTsKCX0KCW9yaWdpbmFsID0gewoJCWhlaWdodDogZWwuaGVpZ2h0KCksCgkJd2lkdGg6IGVsLndpZHRoKCksCgkJb3V0ZXJIZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCksCgkJb3V0ZXJXaWR0aDogZWwub3V0ZXJXaWR0aCgpCgl9OwoKCWlmICggby5tb2RlID09PSAidG9nZ2xlIiAmJiBtb2RlID09PSAic2hvdyIgKSB7CgkJZWwuZnJvbSA9IG8udG8gfHwgemVybzsKCQllbC50byA9IG8uZnJvbSB8fCBvcmlnaW5hbDsKCX0gZWxzZSB7CgkJZWwuZnJvbSA9IG8uZnJvbSB8fCAoIG1vZGUgPT09ICJzaG93IiA/IHplcm8gOiBvcmlnaW5hbCApOwoJCWVsLnRvID0gby50byB8fCAoIG1vZGUgPT09ICJoaWRlIiA/IHplcm8gOiBvcmlnaW5hbCApOwoJfQoKCS8vIFNldCBzY2FsaW5nIGZhY3RvcgoJZmFjdG9yID0gewoJCWZyb206IHsKCQkJeTogZWwuZnJvbS5oZWlnaHQgLyBvcmlnaW5hbC5oZWlnaHQsCgkJCXg6IGVsLmZyb20ud2lkdGggLyBvcmlnaW5hbC53aWR0aAoJCX0sCgkJdG86IHsKCQkJeTogZWwudG8uaGVpZ2h0IC8gb3JpZ2luYWwuaGVpZ2h0LAoJCQl4OiBlbC50by53aWR0aCAvIG9yaWdpbmFsLndpZHRoCgkJfQoJfTsKCgkvLyBTY2FsZSB0aGUgY3NzIGJveAoJaWYgKCBzY2FsZSA9PT0gImJveCIgfHwgc2NhbGUgPT09ICJib3RoIiApIHsKCgkJLy8gVmVydGljYWwgcHJvcHMgc2NhbGluZwoJCWlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7CgkJCXByb3BzID0gcHJvcHMuY29uY2F0KCB2UHJvcHMgKTsKCQkJZWwuZnJvbSA9ICQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKCBlbCwgdlByb3BzLCBmYWN0b3IuZnJvbS55LCBlbC5mcm9tICk7CgkJCWVsLnRvID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCB2UHJvcHMsIGZhY3Rvci50by55LCBlbC50byApOwoJCX0KCgkJLy8gSG9yaXpvbnRhbCBwcm9wcyBzY2FsaW5nCgkJaWYgKCBmYWN0b3IuZnJvbS54ICE9PSBmYWN0b3IudG8ueCApIHsKCQkJcHJvcHMgPSBwcm9wcy5jb25jYXQoIGhQcm9wcyApOwoJCQllbC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBoUHJvcHMsIGZhY3Rvci5mcm9tLngsIGVsLmZyb20gKTsKCQkJZWwudG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggZWwsIGhQcm9wcywgZmFjdG9yLnRvLngsIGVsLnRvICk7CgkJfQoJfQoKCS8vIFNjYWxlIHRoZSBjb250ZW50CglpZiAoIHNjYWxlID09PSAiY29udGVudCIgfHwgc2NhbGUgPT09ICJib3RoIiApIHsKCgkJLy8gVmVydGljYWwgcHJvcHMgc2NhbGluZwoJCWlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7CgkJCXByb3BzID0gcHJvcHMuY29uY2F0KCBjUHJvcHMgKS5jb25jYXQoIHByb3BzMiApOwoJCQllbC5mcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsLCBjUHJvcHMsIGZhY3Rvci5mcm9tLnksIGVsLmZyb20gKTsKCQkJZWwudG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggZWwsIGNQcm9wcywgZmFjdG9yLnRvLnksIGVsLnRvICk7CgkJfQoJfQoKCSQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTsKCWVsLnNob3coKTsKCSQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApOwoJZWwuY3NzKCAib3ZlcmZsb3ciLCAiaGlkZGVuIiApLmNzcyggZWwuZnJvbSApOwoKCS8vIEFkanVzdAoJaWYgKG9yaWdpbikgeyAvLyBDYWxjdWxhdGUgYmFzZWxpbmUgc2hpZnRzCgkJYmFzZWxpbmUgPSAkLmVmZmVjdHMuZ2V0QmFzZWxpbmUoIG9yaWdpbiwgb3JpZ2luYWwgKTsKCQllbC5mcm9tLnRvcCA9ICggb3JpZ2luYWwub3V0ZXJIZWlnaHQgLSBlbC5vdXRlckhlaWdodCgpICkgKiBiYXNlbGluZS55OwoJCWVsLmZyb20ubGVmdCA9ICggb3JpZ2luYWwub3V0ZXJXaWR0aCAtIGVsLm91dGVyV2lkdGgoKSApICogYmFzZWxpbmUueDsKCQllbC50by50b3AgPSAoIG9yaWdpbmFsLm91dGVySGVpZ2h0IC0gZWwudG8ub3V0ZXJIZWlnaHQgKSAqIGJhc2VsaW5lLnk7CgkJZWwudG8ubGVmdCA9ICggb3JpZ2luYWwub3V0ZXJXaWR0aCAtIGVsLnRvLm91dGVyV2lkdGggKSAqIGJhc2VsaW5lLng7Cgl9CgllbC5jc3MoIGVsLmZyb20gKTsgLy8gc2V0IHRvcCAmIGxlZnQKCgkvLyBBbmltYXRlCglpZiAoIHNjYWxlID09PSAiY29udGVudCIgfHwgc2NhbGUgPT09ICJib3RoIiApIHsgLy8gU2NhbGUgdGhlIGNoaWxkcmVuCgoJCS8vIEFkZCBtYXJnaW5zL2ZvbnQtc2l6ZQoJCXZQcm9wcyA9IHZQcm9wcy5jb25jYXQoWyAibWFyZ2luVG9wIiwgIm1hcmdpbkJvdHRvbSIgXSkuY29uY2F0KGNQcm9wcyk7CgkJaFByb3BzID0gaFByb3BzLmNvbmNhdChbICJtYXJnaW5MZWZ0IiwgIm1hcmdpblJpZ2h0IiBdKTsKCQlwcm9wczIgPSBwcm9wczAuY29uY2F0KHZQcm9wcykuY29uY2F0KGhQcm9wcyk7CgoJCWVsLmZpbmQoICIqW3dpZHRoXSIgKS5lYWNoKCBmdW5jdGlvbigpewoJCQl2YXIgY2hpbGQgPSAkKCB0aGlzICksCgkJCQljX29yaWdpbmFsID0gewoJCQkJCWhlaWdodDogY2hpbGQuaGVpZ2h0KCksCgkJCQkJd2lkdGg6IGNoaWxkLndpZHRoKCksCgkJCQkJb3V0ZXJIZWlnaHQ6IGNoaWxkLm91dGVySGVpZ2h0KCksCgkJCQkJb3V0ZXJXaWR0aDogY2hpbGQub3V0ZXJXaWR0aCgpCgkJCQl9OwoJCQlpZiAocmVzdG9yZSkgewoJCQkJJC5lZmZlY3RzLnNhdmUoY2hpbGQsIHByb3BzMik7CgkJCX0KCgkJCWNoaWxkLmZyb20gPSB7CgkJCQloZWlnaHQ6IGNfb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLmZyb20ueSwKCQkJCXdpZHRoOiBjX29yaWdpbmFsLndpZHRoICogZmFjdG9yLmZyb20ueCwKCQkJCW91dGVySGVpZ2h0OiBjX29yaWdpbmFsLm91dGVySGVpZ2h0ICogZmFjdG9yLmZyb20ueSwKCQkJCW91dGVyV2lkdGg6IGNfb3JpZ2luYWwub3V0ZXJXaWR0aCAqIGZhY3Rvci5mcm9tLngKCQkJfTsKCQkJY2hpbGQudG8gPSB7CgkJCQloZWlnaHQ6IGNfb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLnRvLnksCgkJCQl3aWR0aDogY19vcmlnaW5hbC53aWR0aCAqIGZhY3Rvci50by54LAoJCQkJb3V0ZXJIZWlnaHQ6IGNfb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLnRvLnksCgkJCQlvdXRlcldpZHRoOiBjX29yaWdpbmFsLndpZHRoICogZmFjdG9yLnRvLngKCQkJfTsKCgkJCS8vIFZlcnRpY2FsIHByb3BzIHNjYWxpbmcKCQkJaWYgKCBmYWN0b3IuZnJvbS55ICE9PSBmYWN0b3IudG8ueSApIHsKCQkJCWNoaWxkLmZyb20gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIHZQcm9wcywgZmFjdG9yLmZyb20ueSwgY2hpbGQuZnJvbSApOwoJCQkJY2hpbGQudG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIHZQcm9wcywgZmFjdG9yLnRvLnksIGNoaWxkLnRvICk7CgkJCX0KCgkJCS8vIEhvcml6b250YWwgcHJvcHMgc2NhbGluZwoJCQlpZiAoIGZhY3Rvci5mcm9tLnggIT09IGZhY3Rvci50by54ICkgewoJCQkJY2hpbGQuZnJvbSA9ICQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKCBjaGlsZCwgaFByb3BzLCBmYWN0b3IuZnJvbS54LCBjaGlsZC5mcm9tICk7CgkJCQljaGlsZC50byA9ICQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKCBjaGlsZCwgaFByb3BzLCBmYWN0b3IudG8ueCwgY2hpbGQudG8gKTsKCQkJfQoKCQkJLy8gQW5pbWF0ZSBjaGlsZHJlbgoJCQljaGlsZC5jc3MoIGNoaWxkLmZyb20gKTsKCQkJY2hpbGQuYW5pbWF0ZSggY2hpbGQudG8sIG8uZHVyYXRpb24sIG8uZWFzaW5nLCBmdW5jdGlvbigpIHsKCgkJCQkvLyBSZXN0b3JlIGNoaWxkcmVuCgkJCQlpZiAoIHJlc3RvcmUgKSB7CgkJCQkJJC5lZmZlY3RzLnJlc3RvcmUoIGNoaWxkLCBwcm9wczIgKTsKCQkJCX0KCQkJfSk7CgkJfSk7Cgl9CgoJLy8gQW5pbWF0ZQoJZWwuYW5pbWF0ZSggZWwudG8sIHsKCQlxdWV1ZTogZmFsc2UsCgkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJZWFzaW5nOiBvLmVhc2luZywKCQljb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCWlmICggZWwudG8ub3BhY2l0eSA9PT0gMCApIHsKCQkJCWVsLmNzcyggIm9wYWNpdHkiLCBlbC5mcm9tLm9wYWNpdHkgKTsKCQkJfQoJCQlpZiggbW9kZSA9PT0gImhpZGUiICkgewoJCQkJZWwuaGlkZSgpOwoJCQl9CgkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkJaWYgKCAhcmVzdG9yZSApIHsKCgkJCQkvLyB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSBvdXIgbmV3IHBvc2l0aW9uaW5nIGJhc2VkIG9uIHRoZSBzY2FsaW5nCgkJCQlpZiAoIHBvc2l0aW9uID09PSAic3RhdGljIiApIHsKCQkJCQllbC5jc3MoewoJCQkJCQlwb3NpdGlvbjogInJlbGF0aXZlIiwKCQkJCQkJdG9wOiBlbC50by50b3AsCgkJCQkJCWxlZnQ6IGVsLnRvLmxlZnQKCQkJCQl9KTsKCQkJCX0gZWxzZSB7CgkJCQkJJC5lYWNoKFsgInRvcCIsICJsZWZ0IiBdLCBmdW5jdGlvbiggaWR4LCBwb3MgKSB7CgkJCQkJCWVsLmNzcyggcG9zLCBmdW5jdGlvbiggXywgc3RyICkgewoJCQkJCQkJdmFyIHZhbCA9IHBhcnNlSW50KCBzdHIsIDEwICksCgkJCQkJCQkJdG9SZWYgPSBpZHggPyBlbC50by5sZWZ0IDogZWwudG8udG9wOwoKCQkJCQkJCS8vIGlmIG9yaWdpbmFsIHdhcyAiYXV0byIsIHJlY2FsY3VsYXRlIHRoZSBuZXcgdmFsdWUgZnJvbSB3cmFwcGVyCgkJCQkJCQlpZiAoIHN0ciA9PT0gImF1dG8iICkgewoJCQkJCQkJCXJldHVybiB0b1JlZiArICJweCI7CgkJCQkJCQl9CgoJCQkJCQkJcmV0dXJuIHZhbCArIHRvUmVmICsgInB4IjsKCQkJCQkJfSk7CgkJCQkJfSk7CgkJCQl9CgkJCX0KCgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfQoJfSk7Cgp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LnNoYWtlID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7CgoJdmFyIGVsID0gJCggdGhpcyApLAoJCXByb3BzID0gWyAicG9zaXRpb24iLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgImhlaWdodCIsICJ3aWR0aCIgXSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgImVmZmVjdCIgKSwKCQlkaXJlY3Rpb24gPSBvLmRpcmVjdGlvbiB8fCAibGVmdCIsCgkJZGlzdGFuY2UgPSBvLmRpc3RhbmNlIHx8IDIwLAoJCXRpbWVzID0gby50aW1lcyB8fCAzLAoJCWFuaW1zID0gdGltZXMgKiAyICsgMSwKCQlzcGVlZCA9IE1hdGgucm91bmQoby5kdXJhdGlvbi9hbmltcyksCgkJcmVmID0gKGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJkb3duIikgPyAidG9wIiA6ICJsZWZ0IiwKCQlwb3NpdGl2ZU1vdGlvbiA9IChkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAibGVmdCIpLAoJCWFuaW1hdGlvbiA9IHt9LAoJCWFuaW1hdGlvbjEgPSB7fSwKCQlhbmltYXRpb24yID0ge30sCgkJaSwKCgkJLy8gd2Ugd2lsbCBuZWVkIHRvIHJlLWFzc2VtYmxlIHRoZSBxdWV1ZSB0byBzdGFjayBvdXIgYW5pbWF0aW9ucyBpbiBwbGFjZQoJCXF1ZXVlID0gZWwucXVldWUoKSwKCQlxdWV1ZWxlbiA9IHF1ZXVlLmxlbmd0aDsKCgkkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7CgllbC5zaG93KCk7CgkkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKTsKCgkvLyBBbmltYXRpb24KCWFuaW1hdGlvblsgcmVmIF0gPSAoIHBvc2l0aXZlTW90aW9uID8gIi09IiA6ICIrPSIgKSArIGRpc3RhbmNlOwoJYW5pbWF0aW9uMVsgcmVmIF0gPSAoIHBvc2l0aXZlTW90aW9uID8gIis9IiA6ICItPSIgKSArIGRpc3RhbmNlICogMjsKCWFuaW1hdGlvbjJbIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZSAqIDI7CgoJLy8gQW5pbWF0ZQoJZWwuYW5pbWF0ZSggYW5pbWF0aW9uLCBzcGVlZCwgby5lYXNpbmcgKTsKCgkvLyBTaGFrZXMKCWZvciAoIGkgPSAxOyBpIDwgdGltZXM7IGkrKyApIHsKCQllbC5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgby5lYXNpbmcgKS5hbmltYXRlKCBhbmltYXRpb24yLCBzcGVlZCwgby5lYXNpbmcgKTsKCX0KCWVsCgkJLmFuaW1hdGUoIGFuaW1hdGlvbjEsIHNwZWVkLCBvLmVhc2luZyApCgkJLmFuaW1hdGUoIGFuaW1hdGlvbiwgc3BlZWQgLyAyLCBvLmVhc2luZyApCgkJLnF1ZXVlKGZ1bmN0aW9uKCkgewoJCQlpZiAoIG1vZGUgPT09ICJoaWRlIiApIHsKCQkJCWVsLmhpZGUoKTsKCQkJfQoJCQkkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7CgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfSk7CgoJLy8gaW5qZWN0IGFsbCB0aGUgYW5pbWF0aW9ucyB3ZSBqdXN0IHF1ZXVlZCB0byBiZSBmaXJzdCBpbiBsaW5lIChhZnRlciAiaW5wcm9ncmVzcyIpCglpZiAoIHF1ZXVlbGVuID4gMSkgewoJCXF1ZXVlLnNwbGljZS5hcHBseSggcXVldWUsCgkJCVsgMSwgMCBdLmNvbmNhdCggcXVldWUuc3BsaWNlKCBxdWV1ZWxlbiwgYW5pbXMgKyAxICkgKSApOwoJfQoJZWwuZGVxdWV1ZSgpOwoKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5zbGlkZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoKCS8vIENyZWF0ZSBlbGVtZW50Cgl2YXIgZWwgPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAid2lkdGgiLCAiaGVpZ2h0IiBdLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAic2hvdyIgKSwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoJCWRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8ICJsZWZ0IiwKCQlyZWYgPSAoZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImRvd24iKSA/ICJ0b3AiIDogImxlZnQiLAoJCXBvc2l0aXZlTW90aW9uID0gKGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJsZWZ0IiksCgkJZGlzdGFuY2UsCgkJYW5pbWF0aW9uID0ge307CgoJLy8gQWRqdXN0CgkkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7CgllbC5zaG93KCk7CglkaXN0YW5jZSA9IG8uZGlzdGFuY2UgfHwgZWxbIHJlZiA9PT0gInRvcCIgPyAib3V0ZXJIZWlnaHQiIDogIm91dGVyV2lkdGgiIF0oIHRydWUgKTsKCgkkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3MoewoJCW92ZXJmbG93OiAiaGlkZGVuIgoJfSk7CgoJaWYgKCBzaG93ICkgewoJCWVsLmNzcyggcmVmLCBwb3NpdGl2ZU1vdGlvbiA/IChpc05hTihkaXN0YW5jZSkgPyAiLSIgKyBkaXN0YW5jZSA6IC1kaXN0YW5jZSkgOiBkaXN0YW5jZSApOwoJfQoKCS8vIEFuaW1hdGlvbgoJYW5pbWF0aW9uWyByZWYgXSA9ICggc2hvdyA/CgkJKCBwb3NpdGl2ZU1vdGlvbiA/ICIrPSIgOiAiLT0iKSA6CgkJKCBwb3NpdGl2ZU1vdGlvbiA/ICItPSIgOiAiKz0iKSkgKwoJCWRpc3RhbmNlOwoKCS8vIEFuaW1hdGUKCWVsLmFuaW1hdGUoIGFuaW1hdGlvbiwgewoJCXF1ZXVlOiBmYWxzZSwKCQlkdXJhdGlvbjogby5kdXJhdGlvbiwKCQllYXNpbmc6IG8uZWFzaW5nLAoJCWNvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQkJaWYgKCBtb2RlID09PSAiaGlkZSIgKSB7CgkJCQllbC5oaWRlKCk7CgkJCX0KCQkJJC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApOwoJCQkkLmVmZmVjdHMucmVtb3ZlV3JhcHBlciggZWwgKTsKCQkJZG9uZSgpOwoJCX0KCX0pOwp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LnRyYW5zZmVyID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7Cgl2YXIgZWxlbSA9ICQoIHRoaXMgKSwKCQl0YXJnZXQgPSAkKCBvLnRvICksCgkJdGFyZ2V0Rml4ZWQgPSB0YXJnZXQuY3NzKCAicG9zaXRpb24iICkgPT09ICJmaXhlZCIsCgkJYm9keSA9ICQoImJvZHkiKSwKCQlmaXhUb3AgPSB0YXJnZXRGaXhlZCA/IGJvZHkuc2Nyb2xsVG9wKCkgOiAwLAoJCWZpeExlZnQgPSB0YXJnZXRGaXhlZCA/IGJvZHkuc2Nyb2xsTGVmdCgpIDogMCwKCQllbmRQb3NpdGlvbiA9IHRhcmdldC5vZmZzZXQoKSwKCQlhbmltYXRpb24gPSB7CgkJCXRvcDogZW5kUG9zaXRpb24udG9wIC0gZml4VG9wICwKCQkJbGVmdDogZW5kUG9zaXRpb24ubGVmdCAtIGZpeExlZnQgLAoJCQloZWlnaHQ6IHRhcmdldC5pbm5lckhlaWdodCgpLAoJCQl3aWR0aDogdGFyZ2V0LmlubmVyV2lkdGgoKQoJCX0sCgkJc3RhcnRQb3NpdGlvbiA9IGVsZW0ub2Zmc2V0KCksCgkJdHJhbnNmZXIgPSAkKCAnPGRpdiBjbGFzcz0idWktZWZmZWN0cy10cmFuc2ZlciI+PC9kaXY+JyApCgkJCS5hcHBlbmRUbyggZG9jdW1lbnQuYm9keSApCgkJCS5hZGRDbGFzcyggby5jbGFzc05hbWUgKQoJCQkuY3NzKHsKCQkJCXRvcDogc3RhcnRQb3NpdGlvbi50b3AgLSBmaXhUb3AgLAoJCQkJbGVmdDogc3RhcnRQb3NpdGlvbi5sZWZ0IC0gZml4TGVmdCAsCgkJCQloZWlnaHQ6IGVsZW0uaW5uZXJIZWlnaHQoKSwKCQkJCXdpZHRoOiBlbGVtLmlubmVyV2lkdGgoKSwKCQkJCXBvc2l0aW9uOiB0YXJnZXRGaXhlZCA/ICJmaXhlZCIgOiAiYWJzb2x1dGUiCgkJCX0pCgkJCS5hbmltYXRlKCBhbmltYXRpb24sIG8uZHVyYXRpb24sIG8uZWFzaW5nLCBmdW5jdGlvbigpIHsKCQkJCXRyYW5zZmVyLnJlbW92ZSgpOwoJCQkJZG9uZSgpOwoJCQl9KTsKfTsKCn0pKGpRdWVyeSk7Cg=="},{"name":"jstorage","src":""},{"name":"slimScroll","src":"LyohIENvcHlyaWdodCAoYykgMjAxMSBQaW90ciBSb2NoYWxhIChodHRwOi8vcm9jaGEubGEpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApCiAqIGFuZCBHUEwgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvZ3BsLWxpY2Vuc2UucGhwKSBsaWNlbnNlcy4KICoKICogVmVyc2lvbjogMC42LjUKICogCiAqLwooZnVuY3Rpb24oZCl7alF1ZXJ5LmZuLmV4dGVuZCh7c2xpbVNjcm9sbDpmdW5jdGlvbihtKXt2YXIgYT1kLmV4dGVuZCh7d2hlZWxTdGVwOjIwLHdpZHRoOiJhdXRvIixoZWlnaHQ6IjI1MHB4IixzaXplOiI3cHgiLGNvbG9yOiIjMDAwIixwb3NpdGlvbjoicmlnaHQiLGRpc3RhbmNlOiIxcHgiLHN0YXJ0OiJ0b3AiLG9wYWNpdHk6MC40LGFsd2F5c1Zpc2libGU6ITEsZGlzYWJsZUZhZGVPdXQ6ITEscmFpbFZpc2libGU6ITEscmFpbENvbG9yOiIjMzMzIixyYWlsT3BhY2l0eToiMC4yIixyYWlsQ2xhc3M6InNsaW1TY3JvbGxSYWlsIixiYXJDbGFzczoic2xpbVNjcm9sbEJhciIsd3JhcHBlckNsYXNzOiJzbGltU2Nyb2xsRGl2IixhbGxvd1BhZ2VTY3JvbGw6ITEsc2Nyb2xsOjAsdG91Y2hTY3JvbGxTdGVwOjIwMH0sbSk7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShpLGQsZSl7dmFyIGY9aTtkJiYoZj1wYXJzZUludChjLmNzcygidG9wIikpK2kqcGFyc2VJbnQoYS53aGVlbFN0ZXApLwoxMDAqYy5vdXRlckhlaWdodCgpLGQ9Yi5vdXRlckhlaWdodCgpLWMub3V0ZXJIZWlnaHQoKSxmPU1hdGgubWluKE1hdGgubWF4KGYsMCksZCksYy5jc3Moe3RvcDpmKyJweCJ9KSk7Zz1wYXJzZUludChjLmNzcygidG9wIikpLyhiLm91dGVySGVpZ2h0KCktYy5vdXRlckhlaWdodCgpKTtmPWcqKGJbMF0uc2Nyb2xsSGVpZ2h0LWIub3V0ZXJIZWlnaHQoKSk7ZSYmKGY9aSxpPWYvYlswXS5zY3JvbGxIZWlnaHQqYi5vdXRlckhlaWdodCgpLGMuY3NzKHt0b3A6aSsicHgifSkpO2Iuc2Nyb2xsVG9wKGYpO24oKTtqKCl9ZnVuY3Rpb24gdCgpe3A9TWF0aC5tYXgoYi5vdXRlckhlaWdodCgpL2JbMF0uc2Nyb2xsSGVpZ2h0KmIub3V0ZXJIZWlnaHQoKSxtKTtjLmNzcyh7aGVpZ2h0OnArInB4In0pfWZ1bmN0aW9uIG4oKXt0KCk7Y2xlYXJUaW1lb3V0KHUpO2c9PX5+ZyYmKGs9YS5hbGxvd1BhZ2VTY3JvbGwsdiE9ZyYmYi50cmlnZ2VyKCJzbGltc2Nyb2xsIiwwPT1+fmc/InRvcCI6ImJvdHRvbSIpKTsKdj1nO3A+PWIub3V0ZXJIZWlnaHQoKT9rPSEwOihjLnN0b3AoITAsITApLmZhZGVJbigiZmFzdCIpLGEucmFpbFZpc2libGUmJmguc3RvcCghMCwhMCkuZmFkZUluKCJmYXN0IikpfWZ1bmN0aW9uIGooKXthLmFsd2F5c1Zpc2libGV8fCh1PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZigoIWEuZGlzYWJsZUZhZGVPdXR8fCFsKSYmIXEmJiFyKWMuZmFkZU91dCgic2xvdyIpLGguZmFkZU91dCgic2xvdyIpfSwxRTMpKX12YXIgbCxxLHIsdSx3LHAsZyx2LG09MzAsaz0hMSxiPWQodGhpcyk7aWYoYi5wYXJlbnQoKS5oYXNDbGFzcygic2xpbVNjcm9sbERpdiIpKXNjcm9sbCYmKGM9Yi5wYXJlbnQoKS5maW5kKCIuc2xpbVNjcm9sbEJhciIpLGg9Yi5wYXJlbnQoKS5maW5kKCIuc2xpbVNjcm9sbFJhaWwiKSxlKGIuc2Nyb2xsVG9wKCkrcGFyc2VJbnQoc2Nyb2xsKSwhMSwhMCkpO2Vsc2V7dmFyIHk9ZCgiPGRpdj48L2Rpdj4iKS5hZGRDbGFzcyhhLndyYXBwZXJDbGFzcykuY3NzKHtwb3NpdGlvbjoicmVsYXRpdmUiLApvdmVyZmxvdzoiaGlkZGVuIix3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodH0pO2IuY3NzKHtvdmVyZmxvdzoiaGlkZGVuIix3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodH0pO3ZhciBoPWQoIjxkaXY+PC9kaXY+IikuYWRkQ2xhc3MoYS5yYWlsQ2xhc3MpLmNzcyh7d2lkdGg6YS5zaXplLGhlaWdodDoiMTAwJSIscG9zaXRpb246ImFic29sdXRlIix0b3A6MCxkaXNwbGF5OmEuYWx3YXlzVmlzaWJsZSYmYS5yYWlsVmlzaWJsZT8iYmxvY2siOiJub25lIiwiYm9yZGVyLXJhZGl1cyI6YS5zaXplLGJhY2tncm91bmQ6YS5yYWlsQ29sb3Isb3BhY2l0eTphLnJhaWxPcGFjaXR5LHpJbmRleDo5MH0pLGM9ZCgiPGRpdj48L2Rpdj4iKS5hZGRDbGFzcyhhLmJhckNsYXNzKS5jc3Moe2JhY2tncm91bmQ6YS5jb2xvcix3aWR0aDphLnNpemUscG9zaXRpb246ImFic29sdXRlIix0b3A6MCxvcGFjaXR5OmEub3BhY2l0eSxkaXNwbGF5OmEuYWx3YXlzVmlzaWJsZT8iYmxvY2siOiJub25lIiwKImJvcmRlci1yYWRpdXMiOmEuc2l6ZSxCb3JkZXJSYWRpdXM6YS5zaXplLE1vekJvcmRlclJhZGl1czphLnNpemUsV2Via2l0Qm9yZGVyUmFkaXVzOmEuc2l6ZSx6SW5kZXg6OTl9KSx4PSJyaWdodCI9PWEucG9zaXRpb24/e3JpZ2h0OmEuZGlzdGFuY2V9OntsZWZ0OmEuZGlzdGFuY2V9O2guY3NzKHgpO2MuY3NzKHgpO2Iud3JhcCh5KTtiLnBhcmVudCgpLmFwcGVuZChjKTtiLnBhcmVudCgpLmFwcGVuZChoKTtjLmRyYWdnYWJsZSh7YXhpczoieSIsY29udGFpbm1lbnQ6InBhcmVudCIsc3RhcnQ6ZnVuY3Rpb24oKXtyPSEwfSxzdG9wOmZ1bmN0aW9uKCl7cj0hMTtqKCl9LGRyYWc6ZnVuY3Rpb24oKXtlKDAsZCh0aGlzKS5wb3NpdGlvbigpLnRvcCwhMSl9fSk7aC5ob3ZlcihmdW5jdGlvbigpe24oKX0sZnVuY3Rpb24oKXtqKCl9KTtjLmhvdmVyKGZ1bmN0aW9uKCl7cT0hMH0sZnVuY3Rpb24oKXtxPSExfSk7Yi5ob3ZlcihmdW5jdGlvbigpe2w9ITA7bigpO2ooKX0sZnVuY3Rpb24oKXtsPQohMTtqKCl9KTtiLmJpbmQoInRvdWNoc3RhcnQiLGZ1bmN0aW9uKGEpe2Eub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCYmKHc9YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0ucGFnZVkpfSk7Yi5iaW5kKCJ0b3VjaG1vdmUiLGZ1bmN0aW9uKGIpe2Iub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO2Iub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCYmZSgody1iLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWSkvYS50b3VjaFNjcm9sbFN0ZXAsITApfSk7dmFyIHM9ZnVuY3Rpb24oYSl7aWYobCl7dmFyIGE9YXx8d2luZG93LmV2ZW50LGI9MDthLndoZWVsRGVsdGEmJihiPS1hLndoZWVsRGVsdGEvMTIwKTthLmRldGFpbCYmKGI9YS5kZXRhaWwvMyk7ZShiLCEwKTthLnByZXZlbnREZWZhdWx0JiYhayYmYS5wcmV2ZW50RGVmYXVsdCgpO2t8fChhLnJldHVyblZhbHVlPSExKX19OyhmdW5jdGlvbigpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyPyh0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIkRPTU1vdXNlU2Nyb2xsIiwKcywhMSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJtb3VzZXdoZWVsIixzLCExKSk6ZG9jdW1lbnQuYXR0YWNoRXZlbnQoIm9ubW91c2V3aGVlbCIscyl9KSgpO3QoKTsiYm90dG9tIj09YS5zdGFydD8oYy5jc3Moe3RvcDpiLm91dGVySGVpZ2h0KCktYy5vdXRlckhlaWdodCgpfSksZSgwLCEwKSk6Im9iamVjdCI9PXR5cGVvZiBhLnN0YXJ0JiYoZShkKGEuc3RhcnQpLnBvc2l0aW9uKCkudG9wLG51bGwsITApLGEuYWx3YXlzVmlzaWJsZXx8Yy5oaWRlKCkpfX0pO3JldHVybiB0aGlzfX0pO2pRdWVyeS5mbi5leHRlbmQoe3NsaW1zY3JvbGw6alF1ZXJ5LmZuLnNsaW1TY3JvbGx9KX0pKGpRdWVyeSk7"},{"name":"slimScroll","src":"LyohIENvcHlyaWdodCAoYykgMjAxMSBQaW90ciBSb2NoYWxhIChodHRwOi8vcm9jaGEubGEpCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApCiAqIGFuZCBHUEwgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvZ3BsLWxpY2Vuc2UucGhwKSBsaWNlbnNlcy4KICoKICogVmVyc2lvbjogMC42LjUKICogCiAqLwooZnVuY3Rpb24oZCl7alF1ZXJ5LmZuLmV4dGVuZCh7c2xpbVNjcm9sbDpmdW5jdGlvbihtKXt2YXIgYT1kLmV4dGVuZCh7d2hlZWxTdGVwOjIwLHdpZHRoOiJhdXRvIixoZWlnaHQ6IjI1MHB4IixzaXplOiI3cHgiLGNvbG9yOiIjMDAwIixwb3NpdGlvbjoicmlnaHQiLGRpc3RhbmNlOiIxcHgiLHN0YXJ0OiJ0b3AiLG9wYWNpdHk6MC40LGFsd2F5c1Zpc2libGU6ITEsZGlzYWJsZUZhZGVPdXQ6ITEscmFpbFZpc2libGU6ITEscmFpbENvbG9yOiIjMzMzIixyYWlsT3BhY2l0eToiMC4yIixyYWlsQ2xhc3M6InNsaW1TY3JvbGxSYWlsIixiYXJDbGFzczoic2xpbVNjcm9sbEJhciIsd3JhcHBlckNsYXNzOiJzbGltU2Nyb2xsRGl2IixhbGxvd1BhZ2VTY3JvbGw6ITEsc2Nyb2xsOjAsdG91Y2hTY3JvbGxTdGVwOjIwMH0sbSk7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShpLGQsZSl7dmFyIGY9aTtkJiYoZj1wYXJzZUludChjLmNzcygidG9wIikpK2kqcGFyc2VJbnQoYS53aGVlbFN0ZXApLwoxMDAqYy5vdXRlckhlaWdodCgpLGQ9Yi5vdXRlckhlaWdodCgpLWMub3V0ZXJIZWlnaHQoKSxmPU1hdGgubWluKE1hdGgubWF4KGYsMCksZCksYy5jc3Moe3RvcDpmKyJweCJ9KSk7Zz1wYXJzZUludChjLmNzcygidG9wIikpLyhiLm91dGVySGVpZ2h0KCktYy5vdXRlckhlaWdodCgpKTtmPWcqKGJbMF0uc2Nyb2xsSGVpZ2h0LWIub3V0ZXJIZWlnaHQoKSk7ZSYmKGY9aSxpPWYvYlswXS5zY3JvbGxIZWlnaHQqYi5vdXRlckhlaWdodCgpLGMuY3NzKHt0b3A6aSsicHgifSkpO2Iuc2Nyb2xsVG9wKGYpO24oKTtqKCl9ZnVuY3Rpb24gdCgpe3A9TWF0aC5tYXgoYi5vdXRlckhlaWdodCgpL2JbMF0uc2Nyb2xsSGVpZ2h0KmIub3V0ZXJIZWlnaHQoKSxtKTtjLmNzcyh7aGVpZ2h0OnArInB4In0pfWZ1bmN0aW9uIG4oKXt0KCk7Y2xlYXJUaW1lb3V0KHUpO2c9PX5+ZyYmKGs9YS5hbGxvd1BhZ2VTY3JvbGwsdiE9ZyYmYi50cmlnZ2VyKCJzbGltc2Nyb2xsIiwwPT1+fmc/InRvcCI6ImJvdHRvbSIpKTsKdj1nO3A+PWIub3V0ZXJIZWlnaHQoKT9rPSEwOihjLnN0b3AoITAsITApLmZhZGVJbigiZmFzdCIpLGEucmFpbFZpc2libGUmJmguc3RvcCghMCwhMCkuZmFkZUluKCJmYXN0IikpfWZ1bmN0aW9uIGooKXthLmFsd2F5c1Zpc2libGV8fCh1PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZigoIWEuZGlzYWJsZUZhZGVPdXR8fCFsKSYmIXEmJiFyKWMuZmFkZU91dCgic2xvdyIpLGguZmFkZU91dCgic2xvdyIpfSwxRTMpKX12YXIgbCxxLHIsdSx3LHAsZyx2LG09MzAsaz0hMSxiPWQodGhpcyk7aWYoYi5wYXJlbnQoKS5oYXNDbGFzcygic2xpbVNjcm9sbERpdiIpKXNjcm9sbCYmKGM9Yi5wYXJlbnQoKS5maW5kKCIuc2xpbVNjcm9sbEJhciIpLGg9Yi5wYXJlbnQoKS5maW5kKCIuc2xpbVNjcm9sbFJhaWwiKSxlKGIuc2Nyb2xsVG9wKCkrcGFyc2VJbnQoc2Nyb2xsKSwhMSwhMCkpO2Vsc2V7dmFyIHk9ZCgiPGRpdj48L2Rpdj4iKS5hZGRDbGFzcyhhLndyYXBwZXJDbGFzcykuY3NzKHtwb3NpdGlvbjoicmVsYXRpdmUiLApvdmVyZmxvdzoiaGlkZGVuIix3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodH0pO2IuY3NzKHtvdmVyZmxvdzoiaGlkZGVuIix3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodH0pO3ZhciBoPWQoIjxkaXY+PC9kaXY+IikuYWRkQ2xhc3MoYS5yYWlsQ2xhc3MpLmNzcyh7d2lkdGg6YS5zaXplLGhlaWdodDoiMTAwJSIscG9zaXRpb246ImFic29sdXRlIix0b3A6MCxkaXNwbGF5OmEuYWx3YXlzVmlzaWJsZSYmYS5yYWlsVmlzaWJsZT8iYmxvY2siOiJub25lIiwiYm9yZGVyLXJhZGl1cyI6YS5zaXplLGJhY2tncm91bmQ6YS5yYWlsQ29sb3Isb3BhY2l0eTphLnJhaWxPcGFjaXR5LHpJbmRleDo5MH0pLGM9ZCgiPGRpdj48L2Rpdj4iKS5hZGRDbGFzcyhhLmJhckNsYXNzKS5jc3Moe2JhY2tncm91bmQ6YS5jb2xvcix3aWR0aDphLnNpemUscG9zaXRpb246ImFic29sdXRlIix0b3A6MCxvcGFjaXR5OmEub3BhY2l0eSxkaXNwbGF5OmEuYWx3YXlzVmlzaWJsZT8iYmxvY2siOiJub25lIiwKImJvcmRlci1yYWRpdXMiOmEuc2l6ZSxCb3JkZXJSYWRpdXM6YS5zaXplLE1vekJvcmRlclJhZGl1czphLnNpemUsV2Via2l0Qm9yZGVyUmFkaXVzOmEuc2l6ZSx6SW5kZXg6OTl9KSx4PSJyaWdodCI9PWEucG9zaXRpb24/e3JpZ2h0OmEuZGlzdGFuY2V9OntsZWZ0OmEuZGlzdGFuY2V9O2guY3NzKHgpO2MuY3NzKHgpO2Iud3JhcCh5KTtiLnBhcmVudCgpLmFwcGVuZChjKTtiLnBhcmVudCgpLmFwcGVuZChoKTtjLmRyYWdnYWJsZSh7YXhpczoieSIsY29udGFpbm1lbnQ6InBhcmVudCIsc3RhcnQ6ZnVuY3Rpb24oKXtyPSEwfSxzdG9wOmZ1bmN0aW9uKCl7cj0hMTtqKCl9LGRyYWc6ZnVuY3Rpb24oKXtlKDAsZCh0aGlzKS5wb3NpdGlvbigpLnRvcCwhMSl9fSk7aC5ob3ZlcihmdW5jdGlvbigpe24oKX0sZnVuY3Rpb24oKXtqKCl9KTtjLmhvdmVyKGZ1bmN0aW9uKCl7cT0hMH0sZnVuY3Rpb24oKXtxPSExfSk7Yi5ob3ZlcihmdW5jdGlvbigpe2w9ITA7bigpO2ooKX0sZnVuY3Rpb24oKXtsPQohMTtqKCl9KTtiLmJpbmQoInRvdWNoc3RhcnQiLGZ1bmN0aW9uKGEpe2Eub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCYmKHc9YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0ucGFnZVkpfSk7Yi5iaW5kKCJ0b3VjaG1vdmUiLGZ1bmN0aW9uKGIpe2Iub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO2Iub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCYmZSgody1iLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWSkvYS50b3VjaFNjcm9sbFN0ZXAsITApfSk7dmFyIHM9ZnVuY3Rpb24oYSl7aWYobCl7dmFyIGE9YXx8d2luZG93LmV2ZW50LGI9MDthLndoZWVsRGVsdGEmJihiPS1hLndoZWVsRGVsdGEvMTIwKTthLmRldGFpbCYmKGI9YS5kZXRhaWwvMyk7ZShiLCEwKTthLnByZXZlbnREZWZhdWx0JiYhayYmYS5wcmV2ZW50RGVmYXVsdCgpO2t8fChhLnJldHVyblZhbHVlPSExKX19OyhmdW5jdGlvbigpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyPyh0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIkRPTU1vdXNlU2Nyb2xsIiwKcywhMSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJtb3VzZXdoZWVsIixzLCExKSk6ZG9jdW1lbnQuYXR0YWNoRXZlbnQoIm9ubW91c2V3aGVlbCIscyl9KSgpO3QoKTsiYm90dG9tIj09YS5zdGFydD8oYy5jc3Moe3RvcDpiLm91dGVySGVpZ2h0KCktYy5vdXRlckhlaWdodCgpfSksZSgwLCEwKSk6Im9iamVjdCI9PXR5cGVvZiBhLnN0YXJ0JiYoZShkKGEuc3RhcnQpLnBvc2l0aW9uKCkudG9wLG51bGwsITApLGEuYWx3YXlzVmlzaWJsZXx8Yy5oaWRlKCkpfX0pO3JldHVybiB0aGlzfX0pO2pRdWVyeS5mbi5leHRlbmQoe3NsaW1zY3JvbGw6alF1ZXJ5LmZuLnNsaW1TY3JvbGx9KX0pKGpRdWVyeSk7"},{"name":"bootstrap-transition","src":"LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIGJvb3RzdHJhcC10cmFuc2l0aW9uLmpzIHYyLjIuMgogKiBodHRwOi8vdHdpdHRlci5naXRodWIuY29tL2Jvb3RzdHJhcC9qYXZhc2NyaXB0Lmh0bWwjdHJhbnNpdGlvbnMKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIENvcHlyaWdodCAyMDEyIFR3aXR0ZXIsIEluYy4KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKIWZ1bmN0aW9uICgkKSB7CgogICJ1c2Ugc3RyaWN0IjsgLy8ganNoaW50IDtfOwoKCiAgLyogQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLykKICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgogICQoZnVuY3Rpb24gKCkgewoKICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gKGZ1bmN0aW9uICgpIHsKCiAgICAgIHZhciB0cmFuc2l0aW9uRW5kID0gKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJykKICAgICAgICAgICwgdHJhbnNFbmRFdmVudE5hbWVzID0gewogICAgICAgICAgICAgICAnV2Via2l0VHJhbnNpdGlvbicgOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcKICAgICAgICAgICAgLCAgJ01velRyYW5zaXRpb24nICAgIDogJ3RyYW5zaXRpb25lbmQnCiAgICAgICAgICAgICwgICdPVHJhbnNpdGlvbicgICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcKICAgICAgICAgICAgLCAgJ3RyYW5zaXRpb24nICAgICAgIDogJ3RyYW5zaXRpb25lbmQnCiAgICAgICAgICAgIH0KICAgICAgICAgICwgbmFtZQoKICAgICAgICBmb3IgKG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKXsKICAgICAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICB9KCkpCgogICAgICByZXR1cm4gdHJhbnNpdGlvbkVuZCAmJiB7CiAgICAgICAgZW5kOiB0cmFuc2l0aW9uRW5kCiAgICAgIH0KCiAgICB9KSgpCgogIH0pCgp9KHdpbmRvdy5qUXVlcnkpOw=="},{"name":"bootstrap-alert","src":"LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBib290c3RyYXAtYWxlcnQuanMgdjIuMi4yCiAqIGh0dHA6Ly90d2l0dGVyLmdpdGh1Yi5jb20vYm9vdHN0cmFwL2phdmFzY3JpcHQuaHRtbCNhbGVydHMKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBDb3B5cmlnaHQgMjAxMiBUd2l0dGVyLCBJbmMuCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKCiFmdW5jdGlvbiAoJCkgewoKICAidXNlIHN0cmljdCI7IC8vIGpzaGludCA7XzsKCgogLyogQUxFUlQgQ0xBU1MgREVGSU5JVElPTgogICogPT09PT09PT09PT09PT09PT09PT09PSAqLwoKICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPSJhbGVydCJdJwogICAgLCBBbGVydCA9IGZ1bmN0aW9uIChlbCkgewogICAgICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpCiAgICAgIH0KCiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciAkdGhpcyA9ICQodGhpcykKICAgICAgLCBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykKICAgICAgLCAkcGFyZW50CgogICAgaWYgKCFzZWxlY3RvcikgewogICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKQogICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXHNdKiQpLywgJycpIC8vc3RyaXAgZm9yIGllNwogICAgfQoKICAgICRwYXJlbnQgPSAkKHNlbGVjdG9yKQoKICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpCgogICAgJHBhcmVudC5sZW5ndGggfHwgKCRwYXJlbnQgPSAkdGhpcy5oYXNDbGFzcygnYWxlcnQnKSA/ICR0aGlzIDogJHRoaXMucGFyZW50KCkpCgogICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdjbG9zZScpKQoKICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4KCiAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdpbicpCgogICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudCgpIHsKICAgICAgJHBhcmVudAogICAgICAgIC50cmlnZ2VyKCdjbG9zZWQnKQogICAgICAgIC5yZW1vdmUoKQogICAgfQoKICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/CiAgICAgICRwYXJlbnQub24oJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCByZW1vdmVFbGVtZW50KSA6CiAgICAgIHJlbW92ZUVsZW1lbnQoKQogIH0KCgogLyogQUxFUlQgUExVR0lOIERFRklOSVRJT04KICAqID09PT09PT09PT09PT09PT09PT09PT09ICovCgogIHZhciBvbGQgPSAkLmZuLmFsZXJ0CgogICQuZm4uYWxlcnQgPSBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyICR0aGlzID0gJCh0aGlzKQogICAgICAgICwgZGF0YSA9ICR0aGlzLmRhdGEoJ2FsZXJ0JykKICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdhbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSkKICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKQogICAgfSkKICB9CgogICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydAoKCiAvKiBBTEVSVCBOTyBDT05GTElDVAogICogPT09PT09PT09PT09PT09PT0gKi8KCiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi5hbGVydCA9IG9sZAogICAgcmV0dXJuIHRoaXMKICB9CgoKIC8qIEFMRVJUIERBVEEtQVBJCiAgKiA9PT09PT09PT09PT09PSAqLwoKICAkKGRvY3VtZW50KS5vbignY2xpY2suYWxlcnQuZGF0YS1hcGknLCBkaXNtaXNzLCBBbGVydC5wcm90b3R5cGUuY2xvc2UpCgp9KHdpbmRvdy5qUXVlcnkpOw=="},{"name":"bootstrap-modal","src":""},{"name":"bootstrap-tab","src":"LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogYm9vdHN0cmFwLXRhYi5qcyB2Mi4yLjIKICogaHR0cDovL3R3aXR0ZXIuZ2l0aHViLmNvbS9ib290c3RyYXAvamF2YXNjcmlwdC5odG1sI3RhYnMKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29weXJpZ2h0IDIwMTIgVHdpdHRlciwgSW5jLgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKIWZ1bmN0aW9uICgkKSB7CgogICJ1c2Ugc3RyaWN0IjsgLy8ganNoaW50IDtfOwoKCiAvKiBUQUIgQ0xBU1MgREVGSU5JVElPTgogICogPT09PT09PT09PT09PT09PT09PT0gKi8KCiAgdmFyIFRhYiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpCiAgfQoKICBUYWIucHJvdG90eXBlID0gewoKICAgIGNvbnN0cnVjdG9yOiBUYWIKCiAgLCBzaG93OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciAkdGhpcyA9IHRoaXMuZWxlbWVudAogICAgICAgICwgJHVsID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpCiAgICAgICAgLCBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykKICAgICAgICAsIHByZXZpb3VzCiAgICAgICAgLCAkdGFyZ2V0CiAgICAgICAgLCBlCgogICAgICBpZiAoIXNlbGVjdG9yKSB7CiAgICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJykKICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXHNdKiQpLywgJycpIC8vc3RyaXAgZm9yIGllNwogICAgICB9CgogICAgICBpZiAoICR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykgKSByZXR1cm4KCiAgICAgIHByZXZpb3VzID0gJHVsLmZpbmQoJy5hY3RpdmU6bGFzdCBhJylbMF0KCiAgICAgIGUgPSAkLkV2ZW50KCdzaG93JywgewogICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzCiAgICAgIH0pCgogICAgICAkdGhpcy50cmlnZ2VyKGUpCgogICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuCgogICAgICAkdGFyZ2V0ID0gJChzZWxlY3RvcikKCiAgICAgIHRoaXMuYWN0aXZhdGUoJHRoaXMucGFyZW50KCdsaScpLCAkdWwpCiAgICAgIHRoaXMuYWN0aXZhdGUoJHRhcmdldCwgJHRhcmdldC5wYXJlbnQoKSwgZnVuY3Rpb24gKCkgewogICAgICAgICR0aGlzLnRyaWdnZXIoewogICAgICAgICAgdHlwZTogJ3Nob3duJwogICAgICAgICwgcmVsYXRlZFRhcmdldDogcHJldmlvdXMKICAgICAgICB9KQogICAgICB9KQogICAgfQoKICAsIGFjdGl2YXRlOiBmdW5jdGlvbiAoIGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHsKICAgICAgdmFyICRhY3RpdmUgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJykKICAgICAgICAsIHRyYW5zaXRpb24gPSBjYWxsYmFjawogICAgICAgICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbgogICAgICAgICAgICAmJiAkYWN0aXZlLmhhc0NsYXNzKCdmYWRlJykKCiAgICAgIGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgJGFjdGl2ZQogICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKQogICAgICAgICAgLmZpbmQoJz4gLmRyb3Bkb3duLW1lbnUgPiAuYWN0aXZlJykKICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJykKCiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJykKCiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHsKICAgICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uCiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKQogICAgICAgIH0KCiAgICAgICAgaWYgKCBlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKSApIHsKICAgICAgICAgIGVsZW1lbnQuY2xvc2VzdCgnbGkuZHJvcGRvd24nKS5hZGRDbGFzcygnYWN0aXZlJykKICAgICAgICB9CgogICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCkKICAgICAgfQoKICAgICAgdHJhbnNpdGlvbiA/CiAgICAgICAgJGFjdGl2ZS5vbmUoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBuZXh0KSA6CiAgICAgICAgbmV4dCgpCgogICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpCiAgICB9CiAgfQoKCiAvKiBUQUIgUExVR0lOIERFRklOSVRJT04KICAqID09PT09PT09PT09PT09PT09PT09PSAqLwoKICB2YXIgb2xkID0gJC5mbi50YWIKCiAgJC5mbi50YWIgPSBmdW5jdGlvbiAoIG9wdGlvbiApIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpCiAgICAgICAgLCBkYXRhID0gJHRoaXMuZGF0YSgndGFiJykKICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCd0YWInLCAoZGF0YSA9IG5ldyBUYWIodGhpcykpKQogICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCkKICAgIH0pCiAgfQoKICAkLmZuLnRhYi5Db25zdHJ1Y3RvciA9IFRhYgoKCiAvKiBUQUIgTk8gQ09ORkxJQ1QKICAqID09PT09PT09PT09PT09PSAqLwoKICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi50YWIgPSBvbGQKICAgIHJldHVybiB0aGlzCiAgfQoKCiAvKiBUQUIgREFUQS1BUEkKICAqID09PT09PT09PT09PSAqLwoKICAkKGRvY3VtZW50KS5vbignY2xpY2sudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT0idGFiIl0sIFtkYXRhLXRvZ2dsZT0icGlsbCJdJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKQogICAgJCh0aGlzKS50YWIoJ3Nob3cnKQogIH0pCgp9KHdpbmRvdy5qUXVlcnkpOw=="},{"name":"bootstrap-tooltip","src":""},{"name":"bootstrap-button","src":"LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIGJvb3RzdHJhcC1idXR0b24uanMgdjIuMi4yCiAqIGh0dHA6Ly90d2l0dGVyLmdpdGh1Yi5jb20vYm9vdHN0cmFwL2phdmFzY3JpcHQuaHRtbCNidXR0b25zCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBDb3B5cmlnaHQgMjAxMiBUd2l0dGVyLCBJbmMuCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKIWZ1bmN0aW9uICgkKSB7CgogICJ1c2Ugc3RyaWN0IjsgLy8ganNoaW50IDtfOwoKCiAvKiBCVVRUT04gUFVCTElDIENMQVNTIERFRklOSVRJT04KICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpCiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5idXR0b24uZGVmYXVsdHMsIG9wdGlvbnMpCiAgfQoKICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICB2YXIgZCA9ICdkaXNhYmxlZCcKICAgICAgLCAkZWwgPSB0aGlzLiRlbGVtZW50CiAgICAgICwgZGF0YSA9ICRlbC5kYXRhKCkKICAgICAgLCB2YWwgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJwoKICAgIHN0YXRlID0gc3RhdGUgKyAnVGV4dCcKICAgIGRhdGEucmVzZXRUZXh0IHx8ICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKQoKICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdIHx8IHRoaXMub3B0aW9uc1tzdGF0ZV0pCgogICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdAogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIHN0YXRlID09ICdsb2FkaW5nVGV4dCcgPwogICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpIDoKICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKQogICAgfSwgMCkKICB9CgogIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkgewogICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT0iYnV0dG9ucy1yYWRpbyJdJykKCiAgICAkcGFyZW50ICYmICRwYXJlbnQKICAgICAgLmZpbmQoJy5hY3RpdmUnKQogICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpCgogICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcygnYWN0aXZlJykKICB9CgoKIC8qIEJVVFRPTiBQTFVHSU4gREVGSU5JVElPTgogICogPT09PT09PT09PT09PT09PT09PT09PT09ICovCgogIHZhciBvbGQgPSAkLmZuLmJ1dHRvbgoKICAkLmZuLmJ1dHRvbiA9IGZ1bmN0aW9uIChvcHRpb24pIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpCiAgICAgICAgLCBkYXRhID0gJHRoaXMuZGF0YSgnYnV0dG9uJykKICAgICAgICAsIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbgogICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2J1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpCiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKCkKICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbikKICAgIH0pCiAgfQoKICAkLmZuLmJ1dHRvbi5kZWZhdWx0cyA9IHsKICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLicKICB9CgogICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uCgoKIC8qIEJVVFRPTiBOTyBDT05GTElDVAogICogPT09PT09PT09PT09PT09PT09ICovCgogICQuZm4uYnV0dG9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7CiAgICAkLmZuLmJ1dHRvbiA9IG9sZAogICAgcmV0dXJuIHRoaXMKICB9CgoKIC8qIEJVVFRPTiBEQVRBLUFQSQogICogPT09PT09PT09PT09PT09ICovCgogICQoZG9jdW1lbnQpLm9uKCdjbGljay5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1idXR0b25dJywgZnVuY3Rpb24gKGUpIHsKICAgIHZhciAkYnRuID0gJChlLnRhcmdldCkKICAgIGlmICghJGJ0bi5oYXNDbGFzcygnYnRuJykpICRidG4gPSAkYnRuLmNsb3Nlc3QoJy5idG4nKQogICAgJGJ0bi5idXR0b24oJ3RvZ2dsZScpCiAgfSkKCn0od2luZG93LmpRdWVyeSk7"},{"name":"bootstrap-collapse","src":"LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBib290c3RyYXAtY29sbGFwc2UuanMgdjIuMi4yCiAqIGh0dHA6Ly90d2l0dGVyLmdpdGh1Yi5jb20vYm9vdHN0cmFwL2phdmFzY3JpcHQuaHRtbCNjb2xsYXBzZQogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIENvcHlyaWdodCAyMDEyIFR3aXR0ZXIsIEluYy4KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCgohZnVuY3Rpb24gKCQpIHsKCiAgInVzZSBzdHJpY3QiOyAvLyBqc2hpbnQgO187CgoKIC8qIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OCiAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykgewogICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCkKICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmNvbGxhcHNlLmRlZmF1bHRzLCBvcHRpb25zKQoKICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7CiAgICAgIHRoaXMuJHBhcmVudCA9ICQodGhpcy5vcHRpb25zLnBhcmVudCkKICAgIH0KCiAgICB0aGlzLm9wdGlvbnMudG9nZ2xlICYmIHRoaXMudG9nZ2xlKCkKICB9CgogIENvbGxhcHNlLnByb3RvdHlwZSA9IHsKCiAgICBjb25zdHJ1Y3RvcjogQ29sbGFwc2UKCiAgLCBkaW1lbnNpb246IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKQogICAgICByZXR1cm4gaGFzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCcKICAgIH0KCiAgLCBzaG93OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBkaW1lbnNpb24KICAgICAgICAsIHNjcm9sbAogICAgICAgICwgYWN0aXZlcwogICAgICAgICwgaGFzRGF0YQoKICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZykgcmV0dXJuCgogICAgICBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpCiAgICAgIHNjcm9sbCA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpCiAgICAgIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmZpbmQoJz4gLmFjY29yZGlvbi1ncm91cCA+IC5pbicpCgogICAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkgewogICAgICAgIGhhc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2NvbGxhcHNlJykKICAgICAgICBpZiAoaGFzRGF0YSAmJiBoYXNEYXRhLnRyYW5zaXRpb25pbmcpIHJldHVybgogICAgICAgIGFjdGl2ZXMuY29sbGFwc2UoJ2hpZGUnKQogICAgICAgIGhhc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdjb2xsYXBzZScsIG51bGwpCiAgICAgIH0KCiAgICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSgwKQogICAgICB0aGlzLnRyYW5zaXRpb24oJ2FkZENsYXNzJywgJC5FdmVudCgnc2hvdycpLCAnc2hvd24nKQogICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFswXVtzY3JvbGxdKQogICAgfQoKICAsIGhpZGU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGRpbWVuc2lvbgogICAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nKSByZXR1cm4KICAgICAgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKQogICAgICB0aGlzLnJlc2V0KHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSgpKQogICAgICB0aGlzLnRyYW5zaXRpb24oJ3JlbW92ZUNsYXNzJywgJC5FdmVudCgnaGlkZScpLCAnaGlkZGVuJykKICAgICAgdGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKDApCiAgICB9CgogICwgcmVzZXQ6IGZ1bmN0aW9uIChzaXplKSB7CiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpCgogICAgICB0aGlzLiRlbGVtZW50CiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpCiAgICAgICAgW2RpbWVuc2lvbl0oc2l6ZSB8fCAnYXV0bycpCiAgICAgICAgWzBdLm9mZnNldFdpZHRoCgogICAgICB0aGlzLiRlbGVtZW50W3NpemUgIT09IG51bGwgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2NvbGxhcHNlJykKCiAgICAgIHJldHVybiB0aGlzCiAgICB9CgogICwgdHJhbnNpdGlvbjogZnVuY3Rpb24gKG1ldGhvZCwgc3RhcnRFdmVudCwgY29tcGxldGVFdmVudCkgewogICAgICB2YXIgdGhhdCA9IHRoaXMKICAgICAgICAsIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoc3RhcnRFdmVudC50eXBlID09ICdzaG93JykgdGhhdC5yZXNldCgpCiAgICAgICAgICAgIHRoYXQudHJhbnNpdGlvbmluZyA9IDAKICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKGNvbXBsZXRlRXZlbnQpCiAgICAgICAgICB9CgogICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudCkKCiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4KCiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDEKCiAgICAgIHRoaXMuJGVsZW1lbnRbbWV0aG9kXSgnaW4nKQoKICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnY29sbGFwc2UnKSA/CiAgICAgICAgdGhpcy4kZWxlbWVudC5vbmUoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBjb21wbGV0ZSkgOgogICAgICAgIGNvbXBsZXRlKCkKICAgIH0KCiAgLCB0b2dnbGU6IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpCiAgICB9CgogIH0KCgogLyogQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT04KICAqID09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgogIHZhciBvbGQgPSAkLmZuLmNvbGxhcHNlCgogICQuZm4uY29sbGFwc2UgPSBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyICR0aGlzID0gJCh0aGlzKQogICAgICAgICwgZGF0YSA9ICR0aGlzLmRhdGEoJ2NvbGxhcHNlJykKICAgICAgICAsIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbgogICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2NvbGxhcHNlJywgKGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgb3B0aW9ucykpKQogICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCkKICAgIH0pCiAgfQoKICAkLmZuLmNvbGxhcHNlLmRlZmF1bHRzID0gewogICAgdG9nZ2xlOiB0cnVlCiAgfQoKICAkLmZuLmNvbGxhcHNlLkNvbnN0cnVjdG9yID0gQ29sbGFwc2UKCgogLyogQ09MTEFQU0UgTk8gQ09ORkxJQ1QKICAqID09PT09PT09PT09PT09PT09PT09ICovCgogICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHsKICAgICQuZm4uY29sbGFwc2UgPSBvbGQKICAgIHJldHVybiB0aGlzCiAgfQoKCiAvKiBDT0xMQVBTRSBEQVRBLUFQSQogICogPT09PT09PT09PT09PT09PT0gKi8KCiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1jb2xsYXBzZV0nLCBmdW5jdGlvbiAoZSkgewogICAgdmFyICR0aGlzID0gJCh0aGlzKSwgaHJlZgogICAgICAsIHRhcmdldCA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykKICAgICAgICB8fCBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgICB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxzXSskKS8sICcnKSAvL3N0cmlwIGZvciBpZTcKICAgICAgLCBvcHRpb24gPSAkKHRhcmdldCkuZGF0YSgnY29sbGFwc2UnKSA/ICd0b2dnbGUnIDogJHRoaXMuZGF0YSgpCiAgICAkdGhpc1skKHRhcmdldCkuaGFzQ2xhc3MoJ2luJykgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2NvbGxhcHNlZCcpCiAgICAkKHRhcmdldCkuY29sbGFwc2Uob3B0aW9uKQogIH0pCgp9KHdpbmRvdy5qUXVlcnkpOw=="},{"name":"market","src":"alF1ZXJ5LmZuLmltYWdlRnJvbUI2NCA9IGZ1bmN0aW9uKGVuY29kZWRJbWFnZVNvdXJjZSkgewogICAgLy9zZXQgdGhlIGRhdGEgdHlwZSBmb3IgdGhlIHNvdXJjZSBhbmQgYXBwZW5kIHRoZSBlbmNvZGVkIGltYWdlCiAgICAkKHRoaXMpLmF0dHIoJ3NyYycsICdkYXRhOmltYWdlL2dpZjtiYXNlNjQsJyArIGVuY29kZWRJbWFnZVNvdXJjZSk7Cn07Cgp2YXIgQXhjaWRTY3JpcHQgPSBBeGNpZFNjcmlwdCB8fCB7fTsKCi8vIFRoZSBjb3JlIHNjcmlwdCBsb2FkZXIuIExvYWRzIHBhY2tlZCBtaWNybyB3ZWIgYXBwbGljYXRpb25zIGFuZCBpbmplY3RzIHRoZW0gaW50byB0aGUgcGFnZSBET00uCihmdW5jdGlvbihucyl7CgogICAgbnMuc2hvd0FsZXJ0ID0gZnVuY3Rpb24obWVzc2FnZSkgewoKICAgIH07CgogICAgbnMuaW5zdGFsbEJ1dHRvbkNsaWNrZWQgPSBmdW5jdGlvbihzY3JpcHRJRCwgZWwpIHsKICAgICAgICAkKGVsKS5idXR0b24oJ2xvYWRpbmcnKTsKICAgIH07CgogICAgLy8gUmVnaXN0ZXIgdGhlIGNsYXNzCiAgICBucy5TY3JpcHRMb2FkZXIgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIEFQSV9ST09UID0gIiI7CiAgICAgICAgLy8gVGhlIGFjdHVhbCBsb2FkZXIgY2xhc3MKICAgICAgICB2YXIgTG9hZGVyID0gZnVuY3Rpb24obnMpIHsKICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IgQ29kZQogICAgICAgIH07CgogICAgICAgIC8vIExvYWQgYSBwYWNrYWdlIGZyb20gYSByZW1vdGUgVVJMIChUaGlzIGlzIHdoZXJlIGFzIGEgcHJvZHVjdGlvbiBhcHAsIHdlIHdpbGwgbmVlZCB0byBzZXJ2ZSByZXNvdXJjZXMgb3ZlciBIVFRQUyBhbmQgbWFrZSBzdXJlIHNjcmlwdHMgYXJlIGF1dGhvcml6ZWQgdG8gcnVuLgogICAgICAgIC8vIFNlcnZlIHRoZSByZXN1bHQgb3ZlciBKU09OUAogICAgICAgIExvYWRlci5wcm90b3R5cGUubG9hZFJlbW90ZVBhY2thZ2UgPSBmdW5jdGlvbih1cmwpIHsKCiAgICAgICAgfTsKCiAgICAgICAgTG9hZGVyLnByb3RvdHlwZS5sb2FkTG9jYWxQYWNrYWdlcyA9IGZ1bmN0aW9uKCkgewoKICAgICAgICB9OwoKICAgICAgICBMb2FkZXIucHJvdG90eXBlLnByb2Nlc3NQYWNrYWdlID0gZnVuY3Rpb24ocGFja2FnZSkgewoKICAgICAgICB9OwoKICAgICAgICBMb2FkZXIucHJvdG90eXBlLmluamVjdEpTID0gZnVuY3Rpb24oanMpIHsKCiAgICAgICAgfTsKCiAgICAgICAgTG9hZGVyLnByb3RvdHlwZS5sb2FkU2l0ZUFwcGxpY2F0aW9ucyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkLmdldEpTT04oQVBJX1JPT1QgKyAnYXBpL21vdGhlcmZ1Y2tpbmdsaXN0JywgZnVuY3Rpb24oZGF0YSkgewoKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgTG9hZGVyLnByb3RvdHlwZS5sb2FkVG9wQXBwbGljYXRpb25zID0gZnVuY3Rpb24oKSB7CgogICAgICAgIH07CgogICAgICAgIExvYWRlci5wcm90b3R5cGUucmVuZGVyQXBwbGljYXRpb25zTGlzdCA9IGZ1bmN0aW9uKCkgewoKICAgICAgICB9OwoKICAgICAgICBMb2FkZXIucHJvdG90eXBlLnNhdmVNYW5pZmVzdFdpdGhLZXkgPSBmdW5jdGlvbihtYW5pZmVzdCwga2V5KSB7CiAgICAgICAgICAgIC8vc2F2ZSBvdXIganNvbiB3aXRoIGF1dGggdG9rZW4gKyBzY3JpcHQgaWQ/CiAgICAgICAgICAgIGlmKHRoaXMuaGFzTG9jYWxTdG9yYWdlQWNjZXNzKCkpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICQualN0b3JhZ2Uuc2V0KGtleSwgbWFuaWZlc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzYXZlIG1hbmlmZXN0IScpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgTG9hZGVyLnByb3RvdHlwZS5oYXNMb2NhbFN0b3JhZ2VBY2Nlc3MgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICQualN0b3JhZ2Uuc3RvcmFnZUF2YWlsYWJsZSgpOwogICAgICAgIH07CgogICAgICAgIC8vIEluaXRpYWxpemUgaXQgc28gdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGluc3RhbmNlIG9mIGl0c2VsZi4KICAgICAgICByZXR1cm4gbmV3IExvYWRlcihucyk7CiAgICB9KSgpOwoKfSkoQXhjaWRTY3JpcHQpOwoKJChmdW5jdGlvbiAoKSB7CiAgICAKICAgICQoImJvZHkiKS5hcHBlbmQoV1BNLmdldEFwcCgnd3BtJykuZ2V0RmlsZSgnbWFya2V0LWZyYWdtZW50JykpOwogICAgCiAgICB2YXIgYXBwcyA9IFsKICAgICAgICB7CiAgICAgICAgICAgIHRpdGxlIDogJ3Rlc3QgYXBwJywKICAgICAgICAgICAgaWNvbiA6ICdodHRwOi8vZmlsZXMuc29mdGljb25zLmNvbS9kb3dubG9hZC9hcHBsaWNhdGlvbi1pY29ucy80OHB4LWljb25zLTEtNC1ieS1sZW9uYXJkLXNjaHdhcnovcG5nLzQ4eDQ4L01hcC5wbmcnLAogICAgICAgICAgICBpbnN0YWxsZWQgOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIHRpdGxlIDogJ3Rlc3RpbmcgYXBwbGljYXRpb24nLAogICAgICAgICAgICBpY29uIDogJ2h0dHA6Ly9jZG41Lmljb25maW5kZXIuY29tL2RhdGEvaWNvbnMvNDhweF9pY29uc19jb2xsZWN0aW9uX2J5X25ld2VyYXZpbi80OC9hZHJlc3NfYm9vay5wbmcnLAogICAgICAgICAgICBpbnN0YWxsZWQgOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICB0aXRsZSA6ICd0ZXN0IGFwcCcsCiAgICAgICAgICAgIGljb24gOiAnaHR0cDovL2ZpbGVzLnNvZnRpY29ucy5jb20vZG93bmxvYWQvYXBwbGljYXRpb24taWNvbnMvNDhweC1pY29ucy0xLTQtYnktbGVvbmFyZC1zY2h3YXJ6L3BuZy80OHg0OC9NYXAucG5nJywKICAgICAgICAgICAgaW5zdGFsbGVkIDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICB0aXRsZSA6ICd0ZXN0aW5nIGFwcGxpY2F0aW9uJywKICAgICAgICAgICAgaWNvbiA6ICdodHRwOi8vY2RuNS5pY29uZmluZGVyLmNvbS9kYXRhL2ljb25zLzQ4cHhfaWNvbnNfY29sbGVjdGlvbl9ieV9uZXdlcmF2aW4vNDgvZmxhc2gucG5nJywKICAgICAgICAgICAgaW5zdGFsbGVkIDogdHJ1ZQogICAgICAgIH0KICAgIF07CgogICAgLy95ZWFoLi4uCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgICAgICAvL2FjdGl2YXRlIG91ciBtYXJrZXQKICAgICAgICAkKCcjbWFya2V0TW9kYWwnKS5tb2RhbCgnc2hvdycpOwoKICAgICAgICAvL21ha2UgdGhlIHNjcm9sbCBzZXh5IGZvciBvdXIgYXBwIHJlc3VsdHMKICAgICAgICAkKCcuYXBwLXJlc3VsdHMnKS5zbGltU2Nyb2xsKHsKICAgICAgICAgICAgaGVpZ2h0OiAnMTkwcHgnLAogICAgICAgICAgICBhbHdheXNWaXNpYmxlOiBmYWxzZQogICAgICAgIH0pOwoKICAgICAgICAvL3Rlc3Qgb3V0IG91ciB0ZW1wbGF0ZQogICAgICAgICQoJyNhcHBSZXN1bHRUZW1wbGF0ZScpLnRtcGwoYXBwcykuYXBwZW5kVG8oJyNhcHBSZXN1bHRzQm9keScpOwogICAgfSk7Cn0p"}],"css":[{"name":"bootstrap","src":""},{"name":"bootstrap-responsive","src":""},{"name":"market","src":"I21hcmtldE1vZGFsIHsKICAgIHdpZHRoOiA2MDBweDsKfQoKI21hcmtldFRhYnMgewogICAgZmxvYXQ6IHJpZ2h0OwogICAgZGlzcGxheTogYmxvY2s7Cn0KCiNheGNpZE1hcmtldFRpdGxlIHsKICAgIGZsb2F0OiBsZWZ0OwogICAgbGluZS1oZWlnaHQ6IDQycHg7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLmFwcC1yZXN1bHRzIHsKICAgIG1heC1oZWlnaHQ6IDE5MHB4OwogICAgb3ZlcmZsb3c6IGF1dG87Cn0KCi5hcHAtcmVzdWx0LWFjdGlvbnMgewogICAgbGluZS1oZWlnaHQ6IDQ4cHg7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLmFwcC1yZXN1bHQtc25pcHBldCB7CiAgICBtaW4td2lkdGg6IDE1MHB4OwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBsaW5lLWhlaWdodDogNDhweDsKfQo="}],"files":[{"name":"market-fragment","src":""}],"inlineImages":[]});